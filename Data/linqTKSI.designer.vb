'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.35317
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="TKSIJOBS")>  _
Partial Public Class linqTKSIDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InserttPOHeader(instance As tPOHeader)
    End Sub
  Partial Private Sub UpdatetPOHeader(instance As tPOHeader)
    End Sub
  Partial Private Sub DeletetPOHeader(instance As tPOHeader)
    End Sub
  Partial Private Sub InserttPOLine(instance As tPOLine)
    End Sub
  Partial Private Sub UpdatetPOLine(instance As tPOLine)
    End Sub
  Partial Private Sub DeletetPOLine(instance As tPOLine)
    End Sub
  Partial Private Sub InserttSOHeader(instance As tSOHeader)
    End Sub
  Partial Private Sub UpdatetSOHeader(instance As tSOHeader)
    End Sub
  Partial Private Sub DeletetSOHeader(instance As tSOHeader)
    End Sub
  Partial Private Sub InserttSOLine(instance As tSOLine)
    End Sub
  Partial Private Sub UpdatetSOLine(instance As tSOLine)
    End Sub
  Partial Private Sub DeletetSOLine(instance As tSOLine)
    End Sub
  Partial Private Sub InserttAddress(instance As tAddress)
    End Sub
  Partial Private Sub UpdatetAddress(instance As tAddress)
    End Sub
  Partial Private Sub DeletetAddress(instance As tAddress)
    End Sub
  Partial Private Sub InserttVendor(instance As tVendor)
    End Sub
  Partial Private Sub UpdatetVendor(instance As tVendor)
    End Sub
  Partial Private Sub DeletetVendor(instance As tVendor)
    End Sub
  Partial Private Sub InserttCustomr(instance As tCustomr)
    End Sub
  Partial Private Sub UpdatetCustomr(instance As tCustomr)
    End Sub
  Partial Private Sub DeletetCustomr(instance As tCustomr)
    End Sub
  Partial Private Sub InserttUser(instance As tUser)
    End Sub
  Partial Private Sub UpdatetUser(instance As tUser)
    End Sub
  Partial Private Sub DeletetUser(instance As tUser)
    End Sub
  Partial Private Sub InserttblCommissionStructure(instance As tblCommissionStructure)
    End Sub
  Partial Private Sub UpdatetblCommissionStructure(instance As tblCommissionStructure)
    End Sub
  Partial Private Sub DeletetblCommissionStructure(instance As tblCommissionStructure)
    End Sub
  Partial Private Sub InserttEmployee(instance As tEmployee)
    End Sub
  Partial Private Sub UpdatetEmployee(instance As tEmployee)
    End Sub
  Partial Private Sub DeletetEmployee(instance As tEmployee)
    End Sub
  Partial Private Sub InserttblCWPackage(instance As tblCWPackage)
    End Sub
  Partial Private Sub UpdatetblCWPackage(instance As tblCWPackage)
    End Sub
  Partial Private Sub DeletetblCWPackage(instance As tblCWPackage)
    End Sub
  Partial Private Sub InserttblCWPackageContent(instance As tblCWPackageContent)
    End Sub
  Partial Private Sub UpdatetblCWPackageContent(instance As tblCWPackageContent)
    End Sub
  Partial Private Sub DeletetblCWPackageContent(instance As tblCWPackageContent)
    End Sub
  Partial Private Sub InserttblJobActivity(instance As tblJobActivity)
    End Sub
  Partial Private Sub UpdatetblJobActivity(instance As tblJobActivity)
    End Sub
  Partial Private Sub DeletetblJobActivity(instance As tblJobActivity)
    End Sub
  Partial Private Sub InserttblJobTax(instance As tblJobTax)
    End Sub
  Partial Private Sub UpdatetblJobTax(instance As tblJobTax)
    End Sub
  Partial Private Sub DeletetblJobTax(instance As tblJobTax)
    End Sub
  Partial Private Sub InserttUserPrefrence(instance As tUserPrefrence)
    End Sub
  Partial Private Sub UpdatetUserPrefrence(instance As tUserPrefrence)
    End Sub
  Partial Private Sub DeletetUserPrefrence(instance As tUserPrefrence)
    End Sub
  Partial Private Sub InserttPayment(instance As tPayment)
    End Sub
  Partial Private Sub UpdatetPayment(instance As tPayment)
    End Sub
  Partial Private Sub DeletetPayment(instance As tPayment)
    End Sub
  Partial Private Sub InserttblTrailerHeader(instance As tblTrailerHeader)
    End Sub
  Partial Private Sub UpdatetblTrailerHeader(instance As tblTrailerHeader)
    End Sub
  Partial Private Sub DeletetblTrailerHeader(instance As tblTrailerHeader)
    End Sub
  Partial Private Sub InserttblTrailerDetail(instance As tblTrailerDetail)
    End Sub
  Partial Private Sub UpdatetblTrailerDetail(instance As tblTrailerDetail)
    End Sub
  Partial Private Sub DeletetblTrailerDetail(instance As tblTrailerDetail)
    End Sub
  Partial Private Sub InserttblTasklist(instance As tblTasklist)
    End Sub
  Partial Private Sub UpdatetblTasklist(instance As tblTasklist)
    End Sub
  Partial Private Sub DeletetblTasklist(instance As tblTasklist)
    End Sub
  Partial Private Sub InserttblSWOPending(instance As tblSWOPending)
    End Sub
  Partial Private Sub UpdatetblSWOPending(instance As tblSWOPending)
    End Sub
  Partial Private Sub DeletetblSWOPending(instance As tblSWOPending)
    End Sub
  Partial Private Sub InserttblSWOOrder(instance As tblSWOOrder)
    End Sub
  Partial Private Sub UpdatetblSWOOrder(instance As tblSWOOrder)
    End Sub
  Partial Private Sub DeletetblSWOOrder(instance As tblSWOOrder)
    End Sub
  Partial Private Sub InserttJob(instance As tJob)
    End Sub
  Partial Private Sub UpdatetJob(instance As tJob)
    End Sub
  Partial Private Sub DeletetJob(instance As tJob)
    End Sub
  Partial Private Sub InserttblCustomerExtended(instance As tblCustomerExtended)
    End Sub
  Partial Private Sub UpdatetblCustomerExtended(instance As tblCustomerExtended)
    End Sub
  Partial Private Sub DeletetblCustomerExtended(instance As tblCustomerExtended)
    End Sub
  Partial Private Sub InserttblLocationLabelJOIN(instance As tblLocationLabelJOIN)
    End Sub
  Partial Private Sub UpdatetblLocationLabelJOIN(instance As tblLocationLabelJOIN)
    End Sub
  Partial Private Sub DeletetblLocationLabelJOIN(instance As tblLocationLabelJOIN)
    End Sub
  Partial Private Sub InserttblLocationBin(instance As tblLocationBin)
    End Sub
  Partial Private Sub UpdatetblLocationBin(instance As tblLocationBin)
    End Sub
  Partial Private Sub DeletetblLocationBin(instance As tblLocationBin)
    End Sub
  Partial Private Sub InserttblTaxDistrict(instance As tblTaxDistrict)
    End Sub
  Partial Private Sub UpdatetblTaxDistrict(instance As tblTaxDistrict)
    End Sub
  Partial Private Sub DeletetblTaxDistrict(instance As tblTaxDistrict)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.TKSISchedule.MySettings.Default.TKSIJOBSConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property tPOHeaders() As System.Data.Linq.Table(Of tPOHeader)
		Get
			Return Me.GetTable(Of tPOHeader)
		End Get
	End Property
	
	Public ReadOnly Property tPOLines() As System.Data.Linq.Table(Of tPOLine)
		Get
			Return Me.GetTable(Of tPOLine)
		End Get
	End Property
	
	Public ReadOnly Property tSOHeaders() As System.Data.Linq.Table(Of tSOHeader)
		Get
			Return Me.GetTable(Of tSOHeader)
		End Get
	End Property
	
	Public ReadOnly Property tSOLines() As System.Data.Linq.Table(Of tSOLine)
		Get
			Return Me.GetTable(Of tSOLine)
		End Get
	End Property
	
	Public ReadOnly Property tAddresses() As System.Data.Linq.Table(Of tAddress)
		Get
			Return Me.GetTable(Of tAddress)
		End Get
	End Property
	
	Public ReadOnly Property tVendors() As System.Data.Linq.Table(Of tVendor)
		Get
			Return Me.GetTable(Of tVendor)
		End Get
	End Property
	
	Public ReadOnly Property tCustomrs() As System.Data.Linq.Table(Of tCustomr)
		Get
			Return Me.GetTable(Of tCustomr)
		End Get
	End Property
	
	Public ReadOnly Property tUsers() As System.Data.Linq.Table(Of tUser)
		Get
			Return Me.GetTable(Of tUser)
		End Get
	End Property
	
	Public ReadOnly Property tblCommissionStructures() As System.Data.Linq.Table(Of tblCommissionStructure)
		Get
			Return Me.GetTable(Of tblCommissionStructure)
		End Get
	End Property
	
	Public ReadOnly Property tEmployees() As System.Data.Linq.Table(Of tEmployee)
		Get
			Return Me.GetTable(Of tEmployee)
		End Get
	End Property
	
	Public ReadOnly Property tblCWPackages() As System.Data.Linq.Table(Of tblCWPackage)
		Get
			Return Me.GetTable(Of tblCWPackage)
		End Get
	End Property
	
	Public ReadOnly Property tblCWPackageContents() As System.Data.Linq.Table(Of tblCWPackageContent)
		Get
			Return Me.GetTable(Of tblCWPackageContent)
		End Get
	End Property
	
	Public ReadOnly Property tblJobActivities() As System.Data.Linq.Table(Of tblJobActivity)
		Get
			Return Me.GetTable(Of tblJobActivity)
		End Get
	End Property
	
	Public ReadOnly Property tblJobTaxes() As System.Data.Linq.Table(Of tblJobTax)
		Get
			Return Me.GetTable(Of tblJobTax)
		End Get
	End Property
	
	Public ReadOnly Property tUserPrefrences() As System.Data.Linq.Table(Of tUserPrefrence)
		Get
			Return Me.GetTable(Of tUserPrefrence)
		End Get
	End Property
	
	Public ReadOnly Property tPayments() As System.Data.Linq.Table(Of tPayment)
		Get
			Return Me.GetTable(Of tPayment)
		End Get
	End Property
	
	Public ReadOnly Property tblTrailerHeaders() As System.Data.Linq.Table(Of tblTrailerHeader)
		Get
			Return Me.GetTable(Of tblTrailerHeader)
		End Get
	End Property
	
	Public ReadOnly Property tblTrailerDetails() As System.Data.Linq.Table(Of tblTrailerDetail)
		Get
			Return Me.GetTable(Of tblTrailerDetail)
		End Get
	End Property
	
	Public ReadOnly Property tblTasklists() As System.Data.Linq.Table(Of tblTasklist)
		Get
			Return Me.GetTable(Of tblTasklist)
		End Get
	End Property
	
	Public ReadOnly Property tblSWOPendings() As System.Data.Linq.Table(Of tblSWOPending)
		Get
			Return Me.GetTable(Of tblSWOPending)
		End Get
	End Property
	
	Public ReadOnly Property tblSWOOrders() As System.Data.Linq.Table(Of tblSWOOrder)
		Get
			Return Me.GetTable(Of tblSWOOrder)
		End Get
	End Property
	
	Public ReadOnly Property tJobs() As System.Data.Linq.Table(Of tJob)
		Get
			Return Me.GetTable(Of tJob)
		End Get
	End Property
	
	Public ReadOnly Property tblCustomerExtendeds() As System.Data.Linq.Table(Of tblCustomerExtended)
		Get
			Return Me.GetTable(Of tblCustomerExtended)
		End Get
	End Property
	
	Public ReadOnly Property tblLocationLabelJOINs() As System.Data.Linq.Table(Of tblLocationLabelJOIN)
		Get
			Return Me.GetTable(Of tblLocationLabelJOIN)
		End Get
	End Property
	
	Public ReadOnly Property tblLocationBins() As System.Data.Linq.Table(Of tblLocationBin)
		Get
			Return Me.GetTable(Of tblLocationBin)
		End Get
	End Property
	
	Public ReadOnly Property tblTaxDistricts() As System.Data.Linq.Table(Of tblTaxDistrict)
		Get
			Return Me.GetTable(Of tblTaxDistrict)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tPOHeader")>  _
Partial Public Class tPOHeader
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _nID As Integer
	
	Private _nJobID As Integer
	
	Private _dCreateRecord As System.Nullable(Of Date)
	
	Private _nVendorID As Integer
	
	Private _sPONum As String
	
	Private _sShipTo1 As String
	
	Private _sShipTo2 As String
	
	Private _sShipto3 As String
	
	Private _sShipToCity As String
	
	Private _sShipToState As String
	
	Private _sShipToZip As String
	
	Private _sShiptoCounty As String
	
	Private _nBoxes As Integer
	
	Private _dPODate As System.Nullable(Of Date)
	
	Private _sTerms As String
	
	Private _dRequired As System.Nullable(Of Date)
	
	Private _sEnteredBy As String
	
	Private _nTotal As Decimal
	
	Private _sVia As String
	
	Private _sFOB As String
	
	Private _nRetailSale As Decimal
	
	Private _nSaleAccount As Integer
	
	Private _nRetailFreight As Decimal
	
	Private _sConf As String
	
	Private _nAdd As Decimal
	
	Private _DREC As System.Nullable(Of Date)
	
	Private _DDEL As System.Nullable(Of Date)
	
	Private _SRECNOTES As String
	
	Private _SDELNOTES As String
	
	Private _DFAXED As System.Nullable(Of Date)
	
	Private _nAccount As Integer
	
	Private _nInvNo As String
	
	Private _nCheckNo As Integer
	
	Private _dSimply As System.Nullable(Of Date)
	
	Private _bSimply As Boolean
	
	Private _nTruck As Integer
	
	Private _sFilter As String
	
	Private _sBackOrder As String
	
	Private _sItems As String
	
	Private _sItemDesc As String
	
	Private _sPOType As String
	
	Private _nsalesadjust As Decimal
	
	Private _sAdjustReason As String
	
	Private _sCurActNote As String
	
	Private _nPOSort As Integer
	
	Private _tPOLines As EntitySet(Of tPOLine)
	
	Private _tVendor As EntityRef(Of tVendor)
	
	Private _tJob As EntityRef(Of tJob)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnnIDChanged()
    End Sub
    Partial Private Sub OnnJobIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnnJobIDChanged()
    End Sub
    Partial Private Sub OndCreateRecordChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndCreateRecordChanged()
    End Sub
    Partial Private Sub OnnVendorIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnnVendorIDChanged()
    End Sub
    Partial Private Sub OnsPONumChanging(value As String)
    End Sub
    Partial Private Sub OnsPONumChanged()
    End Sub
    Partial Private Sub OnsShipTo1Changing(value As String)
    End Sub
    Partial Private Sub OnsShipTo1Changed()
    End Sub
    Partial Private Sub OnsShipTo2Changing(value As String)
    End Sub
    Partial Private Sub OnsShipTo2Changed()
    End Sub
    Partial Private Sub OnsShipto3Changing(value As String)
    End Sub
    Partial Private Sub OnsShipto3Changed()
    End Sub
    Partial Private Sub OnsShipToCityChanging(value As String)
    End Sub
    Partial Private Sub OnsShipToCityChanged()
    End Sub
    Partial Private Sub OnsShipToStateChanging(value As String)
    End Sub
    Partial Private Sub OnsShipToStateChanged()
    End Sub
    Partial Private Sub OnsShipToZipChanging(value As String)
    End Sub
    Partial Private Sub OnsShipToZipChanged()
    End Sub
    Partial Private Sub OnsShiptoCountyChanging(value As String)
    End Sub
    Partial Private Sub OnsShiptoCountyChanged()
    End Sub
    Partial Private Sub OnnBoxesChanging(value As Integer)
    End Sub
    Partial Private Sub OnnBoxesChanged()
    End Sub
    Partial Private Sub OndPODateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndPODateChanged()
    End Sub
    Partial Private Sub OnsTermsChanging(value As String)
    End Sub
    Partial Private Sub OnsTermsChanged()
    End Sub
    Partial Private Sub OndRequiredChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndRequiredChanged()
    End Sub
    Partial Private Sub OnsEnteredByChanging(value As String)
    End Sub
    Partial Private Sub OnsEnteredByChanged()
    End Sub
    Partial Private Sub OnnTotalChanging(value As Decimal)
    End Sub
    Partial Private Sub OnnTotalChanged()
    End Sub
    Partial Private Sub OnsViaChanging(value As String)
    End Sub
    Partial Private Sub OnsViaChanged()
    End Sub
    Partial Private Sub OnsFOBChanging(value As String)
    End Sub
    Partial Private Sub OnsFOBChanged()
    End Sub
    Partial Private Sub OnnRetailSaleChanging(value As Decimal)
    End Sub
    Partial Private Sub OnnRetailSaleChanged()
    End Sub
    Partial Private Sub OnnSaleAccountChanging(value As Integer)
    End Sub
    Partial Private Sub OnnSaleAccountChanged()
    End Sub
    Partial Private Sub OnnRetailFreightChanging(value As Decimal)
    End Sub
    Partial Private Sub OnnRetailFreightChanged()
    End Sub
    Partial Private Sub OnsConfChanging(value As String)
    End Sub
    Partial Private Sub OnsConfChanged()
    End Sub
    Partial Private Sub OnnAddChanging(value As Decimal)
    End Sub
    Partial Private Sub OnnAddChanged()
    End Sub
    Partial Private Sub OnDRECChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDRECChanged()
    End Sub
    Partial Private Sub OnDDELChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDDELChanged()
    End Sub
    Partial Private Sub OnSRECNOTESChanging(value As String)
    End Sub
    Partial Private Sub OnSRECNOTESChanged()
    End Sub
    Partial Private Sub OnSDELNOTESChanging(value As String)
    End Sub
    Partial Private Sub OnSDELNOTESChanged()
    End Sub
    Partial Private Sub OnDFAXEDChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDFAXEDChanged()
    End Sub
    Partial Private Sub OnnAccountChanging(value As Integer)
    End Sub
    Partial Private Sub OnnAccountChanged()
    End Sub
    Partial Private Sub OnnInvNoChanging(value As String)
    End Sub
    Partial Private Sub OnnInvNoChanged()
    End Sub
    Partial Private Sub OnnCheckNoChanging(value As Integer)
    End Sub
    Partial Private Sub OnnCheckNoChanged()
    End Sub
    Partial Private Sub OndSimplyChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndSimplyChanged()
    End Sub
    Partial Private Sub OnbSimplyChanging(value As Boolean)
    End Sub
    Partial Private Sub OnbSimplyChanged()
    End Sub
    Partial Private Sub OnnTruckChanging(value As Integer)
    End Sub
    Partial Private Sub OnnTruckChanged()
    End Sub
    Partial Private Sub OnsFilterChanging(value As String)
    End Sub
    Partial Private Sub OnsFilterChanged()
    End Sub
    Partial Private Sub OnsBackOrderChanging(value As String)
    End Sub
    Partial Private Sub OnsBackOrderChanged()
    End Sub
    Partial Private Sub OnsItemsChanging(value As String)
    End Sub
    Partial Private Sub OnsItemsChanged()
    End Sub
    Partial Private Sub OnsItemDescChanging(value As String)
    End Sub
    Partial Private Sub OnsItemDescChanged()
    End Sub
    Partial Private Sub OnsPOTypeChanging(value As String)
    End Sub
    Partial Private Sub OnsPOTypeChanged()
    End Sub
    Partial Private Sub OnnsalesadjustChanging(value As Decimal)
    End Sub
    Partial Private Sub OnnsalesadjustChanged()
    End Sub
    Partial Private Sub OnsAdjustReasonChanging(value As String)
    End Sub
    Partial Private Sub OnsAdjustReasonChanged()
    End Sub
    Partial Private Sub OnsCurActNoteChanging(value As String)
    End Sub
    Partial Private Sub OnsCurActNoteChanged()
    End Sub
    Partial Private Sub OnnPOSortChanging(value As Integer)
    End Sub
    Partial Private Sub OnnPOSortChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tPOLines = New EntitySet(Of tPOLine)(AddressOf Me.attach_tPOLines, AddressOf Me.detach_tPOLines)
		Me._tVendor = CType(Nothing, EntityRef(Of tVendor))
		Me._tJob = CType(Nothing, EntityRef(Of tJob))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property nID() As Integer
		Get
			Return Me._nID
		End Get
		Set
			If ((Me._nID = value)  _
						= false) Then
				Me.OnnIDChanging(value)
				Me.SendPropertyChanging
				Me._nID = value
				Me.SendPropertyChanged("nID")
				Me.OnnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nJobID", DbType:="Int NOT NULL")>  _
	Public Property nJobID() As Integer
		Get
			Return Me._nJobID
		End Get
		Set
			If ((Me._nJobID = value)  _
						= false) Then
				If Me._tJob.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnnJobIDChanging(value)
				Me.SendPropertyChanging
				Me._nJobID = value
				Me.SendPropertyChanged("nJobID")
				Me.OnnJobIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dCreateRecord", DbType:="SmallDateTime")>  _
	Public Property dCreateRecord() As System.Nullable(Of Date)
		Get
			Return Me._dCreateRecord
		End Get
		Set
			If (Me._dCreateRecord.Equals(value) = false) Then
				Me.OndCreateRecordChanging(value)
				Me.SendPropertyChanging
				Me._dCreateRecord = value
				Me.SendPropertyChanged("dCreateRecord")
				Me.OndCreateRecordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nVendorID", DbType:="Int NOT NULL")>  _
	Public Property nVendorID() As Integer
		Get
			Return Me._nVendorID
		End Get
		Set
			If ((Me._nVendorID = value)  _
						= false) Then
				If Me._tVendor.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnnVendorIDChanging(value)
				Me.SendPropertyChanging
				Me._nVendorID = value
				Me.SendPropertyChanged("nVendorID")
				Me.OnnVendorIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sPONum", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sPONum() As String
		Get
			Return Me._sPONum
		End Get
		Set
			If (String.Equals(Me._sPONum, value) = false) Then
				Me.OnsPONumChanging(value)
				Me.SendPropertyChanging
				Me._sPONum = value
				Me.SendPropertyChanged("sPONum")
				Me.OnsPONumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sShipTo1", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sShipTo1() As String
		Get
			Return Me._sShipTo1
		End Get
		Set
			If (String.Equals(Me._sShipTo1, value) = false) Then
				Me.OnsShipTo1Changing(value)
				Me.SendPropertyChanging
				Me._sShipTo1 = value
				Me.SendPropertyChanged("sShipTo1")
				Me.OnsShipTo1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sShipTo2", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sShipTo2() As String
		Get
			Return Me._sShipTo2
		End Get
		Set
			If (String.Equals(Me._sShipTo2, value) = false) Then
				Me.OnsShipTo2Changing(value)
				Me.SendPropertyChanging
				Me._sShipTo2 = value
				Me.SendPropertyChanged("sShipTo2")
				Me.OnsShipTo2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sShipto3", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sShipto3() As String
		Get
			Return Me._sShipto3
		End Get
		Set
			If (String.Equals(Me._sShipto3, value) = false) Then
				Me.OnsShipto3Changing(value)
				Me.SendPropertyChanging
				Me._sShipto3 = value
				Me.SendPropertyChanged("sShipto3")
				Me.OnsShipto3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sShipToCity", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sShipToCity() As String
		Get
			Return Me._sShipToCity
		End Get
		Set
			If (String.Equals(Me._sShipToCity, value) = false) Then
				Me.OnsShipToCityChanging(value)
				Me.SendPropertyChanging
				Me._sShipToCity = value
				Me.SendPropertyChanged("sShipToCity")
				Me.OnsShipToCityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sShipToState", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sShipToState() As String
		Get
			Return Me._sShipToState
		End Get
		Set
			If (String.Equals(Me._sShipToState, value) = false) Then
				Me.OnsShipToStateChanging(value)
				Me.SendPropertyChanging
				Me._sShipToState = value
				Me.SendPropertyChanged("sShipToState")
				Me.OnsShipToStateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sShipToZip", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sShipToZip() As String
		Get
			Return Me._sShipToZip
		End Get
		Set
			If (String.Equals(Me._sShipToZip, value) = false) Then
				Me.OnsShipToZipChanging(value)
				Me.SendPropertyChanging
				Me._sShipToZip = value
				Me.SendPropertyChanged("sShipToZip")
				Me.OnsShipToZipChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sShiptoCounty", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sShiptoCounty() As String
		Get
			Return Me._sShiptoCounty
		End Get
		Set
			If (String.Equals(Me._sShiptoCounty, value) = false) Then
				Me.OnsShiptoCountyChanging(value)
				Me.SendPropertyChanging
				Me._sShiptoCounty = value
				Me.SendPropertyChanged("sShiptoCounty")
				Me.OnsShiptoCountyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nBoxes", DbType:="Int NOT NULL")>  _
	Public Property nBoxes() As Integer
		Get
			Return Me._nBoxes
		End Get
		Set
			If ((Me._nBoxes = value)  _
						= false) Then
				Me.OnnBoxesChanging(value)
				Me.SendPropertyChanging
				Me._nBoxes = value
				Me.SendPropertyChanged("nBoxes")
				Me.OnnBoxesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dPODate", DbType:="SmallDateTime")>  _
	Public Property dPODate() As System.Nullable(Of Date)
		Get
			Return Me._dPODate
		End Get
		Set
			If (Me._dPODate.Equals(value) = false) Then
				Me.OndPODateChanging(value)
				Me.SendPropertyChanging
				Me._dPODate = value
				Me.SendPropertyChanged("dPODate")
				Me.OndPODateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sTerms", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sTerms() As String
		Get
			Return Me._sTerms
		End Get
		Set
			If (String.Equals(Me._sTerms, value) = false) Then
				Me.OnsTermsChanging(value)
				Me.SendPropertyChanging
				Me._sTerms = value
				Me.SendPropertyChanged("sTerms")
				Me.OnsTermsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dRequired", DbType:="SmallDateTime")>  _
	Public Property dRequired() As System.Nullable(Of Date)
		Get
			Return Me._dRequired
		End Get
		Set
			If (Me._dRequired.Equals(value) = false) Then
				Me.OndRequiredChanging(value)
				Me.SendPropertyChanging
				Me._dRequired = value
				Me.SendPropertyChanged("dRequired")
				Me.OndRequiredChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sEnteredBy", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sEnteredBy() As String
		Get
			Return Me._sEnteredBy
		End Get
		Set
			If (String.Equals(Me._sEnteredBy, value) = false) Then
				Me.OnsEnteredByChanging(value)
				Me.SendPropertyChanging
				Me._sEnteredBy = value
				Me.SendPropertyChanged("sEnteredBy")
				Me.OnsEnteredByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nTotal", DbType:="Money NOT NULL")>  _
	Public Property nTotal() As Decimal
		Get
			Return Me._nTotal
		End Get
		Set
			If ((Me._nTotal = value)  _
						= false) Then
				Me.OnnTotalChanging(value)
				Me.SendPropertyChanging
				Me._nTotal = value
				Me.SendPropertyChanged("nTotal")
				Me.OnnTotalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sVia", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sVia() As String
		Get
			Return Me._sVia
		End Get
		Set
			If (String.Equals(Me._sVia, value) = false) Then
				Me.OnsViaChanging(value)
				Me.SendPropertyChanging
				Me._sVia = value
				Me.SendPropertyChanged("sVia")
				Me.OnsViaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sFOB", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sFOB() As String
		Get
			Return Me._sFOB
		End Get
		Set
			If (String.Equals(Me._sFOB, value) = false) Then
				Me.OnsFOBChanging(value)
				Me.SendPropertyChanging
				Me._sFOB = value
				Me.SendPropertyChanged("sFOB")
				Me.OnsFOBChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nRetailSale", DbType:="Money NOT NULL", UpdateCheck:=UpdateCheck.WhenChanged)>  _
	Public Property nRetailSale() As Decimal
		Get
			Return Me._nRetailSale
		End Get
		Set
			If ((Me._nRetailSale = value)  _
						= false) Then
				Me.OnnRetailSaleChanging(value)
				Me.SendPropertyChanging
				Me._nRetailSale = value
				Me.SendPropertyChanged("nRetailSale")
				Me.OnnRetailSaleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nSaleAccount", DbType:="Int NOT NULL")>  _
	Public Property nSaleAccount() As Integer
		Get
			Return Me._nSaleAccount
		End Get
		Set
			If ((Me._nSaleAccount = value)  _
						= false) Then
				Me.OnnSaleAccountChanging(value)
				Me.SendPropertyChanging
				Me._nSaleAccount = value
				Me.SendPropertyChanged("nSaleAccount")
				Me.OnnSaleAccountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nRetailFreight", DbType:="Money NOT NULL")>  _
	Public Property nRetailFreight() As Decimal
		Get
			Return Me._nRetailFreight
		End Get
		Set
			If ((Me._nRetailFreight = value)  _
						= false) Then
				Me.OnnRetailFreightChanging(value)
				Me.SendPropertyChanging
				Me._nRetailFreight = value
				Me.SendPropertyChanged("nRetailFreight")
				Me.OnnRetailFreightChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sConf", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sConf() As String
		Get
			Return Me._sConf
		End Get
		Set
			If (String.Equals(Me._sConf, value) = false) Then
				Me.OnsConfChanging(value)
				Me.SendPropertyChanging
				Me._sConf = value
				Me.SendPropertyChanged("sConf")
				Me.OnsConfChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nAdd", DbType:="Money NOT NULL")>  _
	Public Property nAdd() As Decimal
		Get
			Return Me._nAdd
		End Get
		Set
			If ((Me._nAdd = value)  _
						= false) Then
				Me.OnnAddChanging(value)
				Me.SendPropertyChanging
				Me._nAdd = value
				Me.SendPropertyChanged("nAdd")
				Me.OnnAddChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DREC", DbType:="SmallDateTime")>  _
	Public Property DREC() As System.Nullable(Of Date)
		Get
			Return Me._DREC
		End Get
		Set
			If (Me._DREC.Equals(value) = false) Then
				Me.OnDRECChanging(value)
				Me.SendPropertyChanging
				Me._DREC = value
				Me.SendPropertyChanged("DREC")
				Me.OnDRECChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DDEL", DbType:="SmallDateTime")>  _
	Public Property DDEL() As System.Nullable(Of Date)
		Get
			Return Me._DDEL
		End Get
		Set
			If (Me._DDEL.Equals(value) = false) Then
				Me.OnDDELChanging(value)
				Me.SendPropertyChanging
				Me._DDEL = value
				Me.SendPropertyChanged("DDEL")
				Me.OnDDELChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SRECNOTES", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property SRECNOTES() As String
		Get
			Return Me._SRECNOTES
		End Get
		Set
			If (String.Equals(Me._SRECNOTES, value) = false) Then
				Me.OnSRECNOTESChanging(value)
				Me.SendPropertyChanging
				Me._SRECNOTES = value
				Me.SendPropertyChanged("SRECNOTES")
				Me.OnSRECNOTESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SDELNOTES", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property SDELNOTES() As String
		Get
			Return Me._SDELNOTES
		End Get
		Set
			If (String.Equals(Me._SDELNOTES, value) = false) Then
				Me.OnSDELNOTESChanging(value)
				Me.SendPropertyChanging
				Me._SDELNOTES = value
				Me.SendPropertyChanged("SDELNOTES")
				Me.OnSDELNOTESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DFAXED", DbType:="SmallDateTime")>  _
	Public Property DFAXED() As System.Nullable(Of Date)
		Get
			Return Me._DFAXED
		End Get
		Set
			If (Me._DFAXED.Equals(value) = false) Then
				Me.OnDFAXEDChanging(value)
				Me.SendPropertyChanging
				Me._DFAXED = value
				Me.SendPropertyChanged("DFAXED")
				Me.OnDFAXEDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nAccount", DbType:="Int NOT NULL")>  _
	Public Property nAccount() As Integer
		Get
			Return Me._nAccount
		End Get
		Set
			If ((Me._nAccount = value)  _
						= false) Then
				Me.OnnAccountChanging(value)
				Me.SendPropertyChanging
				Me._nAccount = value
				Me.SendPropertyChanged("nAccount")
				Me.OnnAccountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nInvNo", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property nInvNo() As String
		Get
			Return Me._nInvNo
		End Get
		Set
			If (String.Equals(Me._nInvNo, value) = false) Then
				Me.OnnInvNoChanging(value)
				Me.SendPropertyChanging
				Me._nInvNo = value
				Me.SendPropertyChanged("nInvNo")
				Me.OnnInvNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nCheckNo", DbType:="Int NOT NULL")>  _
	Public Property nCheckNo() As Integer
		Get
			Return Me._nCheckNo
		End Get
		Set
			If ((Me._nCheckNo = value)  _
						= false) Then
				Me.OnnCheckNoChanging(value)
				Me.SendPropertyChanging
				Me._nCheckNo = value
				Me.SendPropertyChanged("nCheckNo")
				Me.OnnCheckNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dSimply", DbType:="SmallDateTime")>  _
	Public Property dSimply() As System.Nullable(Of Date)
		Get
			Return Me._dSimply
		End Get
		Set
			If (Me._dSimply.Equals(value) = false) Then
				Me.OndSimplyChanging(value)
				Me.SendPropertyChanging
				Me._dSimply = value
				Me.SendPropertyChanged("dSimply")
				Me.OndSimplyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bSimply", DbType:="Bit NOT NULL")>  _
	Public Property bSimply() As Boolean
		Get
			Return Me._bSimply
		End Get
		Set
			If ((Me._bSimply = value)  _
						= false) Then
				Me.OnbSimplyChanging(value)
				Me.SendPropertyChanging
				Me._bSimply = value
				Me.SendPropertyChanged("bSimply")
				Me.OnbSimplyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nTruck", DbType:="Int NOT NULL")>  _
	Public Property nTruck() As Integer
		Get
			Return Me._nTruck
		End Get
		Set
			If ((Me._nTruck = value)  _
						= false) Then
				Me.OnnTruckChanging(value)
				Me.SendPropertyChanging
				Me._nTruck = value
				Me.SendPropertyChanged("nTruck")
				Me.OnnTruckChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sFilter", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sFilter() As String
		Get
			Return Me._sFilter
		End Get
		Set
			If (String.Equals(Me._sFilter, value) = false) Then
				Me.OnsFilterChanging(value)
				Me.SendPropertyChanging
				Me._sFilter = value
				Me.SendPropertyChanged("sFilter")
				Me.OnsFilterChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sBackOrder", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sBackOrder() As String
		Get
			Return Me._sBackOrder
		End Get
		Set
			If (String.Equals(Me._sBackOrder, value) = false) Then
				Me.OnsBackOrderChanging(value)
				Me.SendPropertyChanging
				Me._sBackOrder = value
				Me.SendPropertyChanged("sBackOrder")
				Me.OnsBackOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sItems", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sItems() As String
		Get
			Return Me._sItems
		End Get
		Set
			If (String.Equals(Me._sItems, value) = false) Then
				Me.OnsItemsChanging(value)
				Me.SendPropertyChanging
				Me._sItems = value
				Me.SendPropertyChanged("sItems")
				Me.OnsItemsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sItemDesc", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sItemDesc() As String
		Get
			Return Me._sItemDesc
		End Get
		Set
			If (String.Equals(Me._sItemDesc, value) = false) Then
				Me.OnsItemDescChanging(value)
				Me.SendPropertyChanging
				Me._sItemDesc = value
				Me.SendPropertyChanged("sItemDesc")
				Me.OnsItemDescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sPOType", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sPOType() As String
		Get
			Return Me._sPOType
		End Get
		Set
			If (String.Equals(Me._sPOType, value) = false) Then
				Me.OnsPOTypeChanging(value)
				Me.SendPropertyChanging
				Me._sPOType = value
				Me.SendPropertyChanged("sPOType")
				Me.OnsPOTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nsalesadjust", DbType:="Money NOT NULL")>  _
	Public Property nsalesadjust() As Decimal
		Get
			Return Me._nsalesadjust
		End Get
		Set
			If ((Me._nsalesadjust = value)  _
						= false) Then
				Me.OnnsalesadjustChanging(value)
				Me.SendPropertyChanging
				Me._nsalesadjust = value
				Me.SendPropertyChanged("nsalesadjust")
				Me.OnnsalesadjustChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sAdjustReason", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property sAdjustReason() As String
		Get
			Return Me._sAdjustReason
		End Get
		Set
			If (String.Equals(Me._sAdjustReason, value) = false) Then
				Me.OnsAdjustReasonChanging(value)
				Me.SendPropertyChanging
				Me._sAdjustReason = value
				Me.SendPropertyChanged("sAdjustReason")
				Me.OnsAdjustReasonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sCurActNote", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property sCurActNote() As String
		Get
			Return Me._sCurActNote
		End Get
		Set
			If (String.Equals(Me._sCurActNote, value) = false) Then
				Me.OnsCurActNoteChanging(value)
				Me.SendPropertyChanging
				Me._sCurActNote = value
				Me.SendPropertyChanged("sCurActNote")
				Me.OnsCurActNoteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nPOSort", DbType:="Int NOT NULL")>  _
	Public Property nPOSort() As Integer
		Get
			Return Me._nPOSort
		End Get
		Set
			If ((Me._nPOSort = value)  _
						= false) Then
				Me.OnnPOSortChanging(value)
				Me.SendPropertyChanging
				Me._nPOSort = value
				Me.SendPropertyChanged("nPOSort")
				Me.OnnPOSortChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tPOHeader_tPOLine", Storage:="_tPOLines", ThisKey:="nID", OtherKey:="nPOID")>  _
	Public Property tPOLines() As EntitySet(Of tPOLine)
		Get
			Return Me._tPOLines
		End Get
		Set
			Me._tPOLines.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tVendor_tPOHeader", Storage:="_tVendor", ThisKey:="nVendorID", OtherKey:="lid", IsForeignKey:=true)>  _
	Public Property tVendor() As tVendor
		Get
			Return Me._tVendor.Entity
		End Get
		Set
			Dim previousValue As tVendor = Me._tVendor.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tVendor.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tVendor.Entity = Nothing
					previousValue.tPOHeaders.Remove(Me)
				End If
				Me._tVendor.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tPOHeaders.Add(Me)
					Me._nVendorID = value.lid
				Else
					Me._nVendorID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tVendor")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tJob_tPOHeader", Storage:="_tJob", ThisKey:="nJobID", OtherKey:="nID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property tJob() As tJob
		Get
			Return Me._tJob.Entity
		End Get
		Set
			Dim previousValue As tJob = Me._tJob.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tJob.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tJob.Entity = Nothing
					previousValue.tPOHeaders.Remove(Me)
				End If
				Me._tJob.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tPOHeaders.Add(Me)
					Me._nJobID = value.nID
				Else
					Me._nJobID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tJob")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tPOLines(ByVal entity As tPOLine)
		Me.SendPropertyChanging
		entity.tPOHeader = Me
	End Sub
	
	Private Sub detach_tPOLines(ByVal entity As tPOLine)
		Me.SendPropertyChanging
		entity.tPOHeader = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tPOLine")>  _
Partial Public Class tPOLine
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _nPOID As Integer
	
	Private _nLineNumber As Integer
	
	Private _sType As String
	
	Private _sDesc As String
	
	Private _nCost As Decimal
	
	Private _nAccountID As Integer
	
	Private _sReceived As Boolean
	
	Private _tPOHeader As EntityRef(Of tPOHeader)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnnPOIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnnPOIDChanged()
    End Sub
    Partial Private Sub OnnLineNumberChanging(value As Integer)
    End Sub
    Partial Private Sub OnnLineNumberChanged()
    End Sub
    Partial Private Sub OnsTypeChanging(value As String)
    End Sub
    Partial Private Sub OnsTypeChanged()
    End Sub
    Partial Private Sub OnsDescChanging(value As String)
    End Sub
    Partial Private Sub OnsDescChanged()
    End Sub
    Partial Private Sub OnnCostChanging(value As Decimal)
    End Sub
    Partial Private Sub OnnCostChanged()
    End Sub
    Partial Private Sub OnnAccountIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnnAccountIDChanged()
    End Sub
    Partial Private Sub OnsReceivedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnsReceivedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tPOHeader = CType(Nothing, EntityRef(Of tPOHeader))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nPOID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property nPOID() As Integer
		Get
			Return Me._nPOID
		End Get
		Set
			If ((Me._nPOID = value)  _
						= false) Then
				If Me._tPOHeader.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnnPOIDChanging(value)
				Me.SendPropertyChanging
				Me._nPOID = value
				Me.SendPropertyChanged("nPOID")
				Me.OnnPOIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nLineNumber", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property nLineNumber() As Integer
		Get
			Return Me._nLineNumber
		End Get
		Set
			If ((Me._nLineNumber = value)  _
						= false) Then
				Me.OnnLineNumberChanging(value)
				Me.SendPropertyChanging
				Me._nLineNumber = value
				Me.SendPropertyChanged("nLineNumber")
				Me.OnnLineNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sType", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property sType() As String
		Get
			Return Me._sType
		End Get
		Set
			If (String.Equals(Me._sType, value) = false) Then
				Me.OnsTypeChanging(value)
				Me.SendPropertyChanging
				Me._sType = value
				Me.SendPropertyChanged("sType")
				Me.OnsTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sDesc", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property sDesc() As String
		Get
			Return Me._sDesc
		End Get
		Set
			If (String.Equals(Me._sDesc, value) = false) Then
				Me.OnsDescChanging(value)
				Me.SendPropertyChanging
				Me._sDesc = value
				Me.SendPropertyChanged("sDesc")
				Me.OnsDescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nCost", DbType:="Money NOT NULL")>  _
	Public Property nCost() As Decimal
		Get
			Return Me._nCost
		End Get
		Set
			If ((Me._nCost = value)  _
						= false) Then
				Me.OnnCostChanging(value)
				Me.SendPropertyChanging
				Me._nCost = value
				Me.SendPropertyChanged("nCost")
				Me.OnnCostChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nAccountID", DbType:="Int NOT NULL")>  _
	Public Property nAccountID() As Integer
		Get
			Return Me._nAccountID
		End Get
		Set
			If ((Me._nAccountID = value)  _
						= false) Then
				Me.OnnAccountIDChanging(value)
				Me.SendPropertyChanging
				Me._nAccountID = value
				Me.SendPropertyChanged("nAccountID")
				Me.OnnAccountIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sReceived", DbType:="Bit NOT NULL")>  _
	Public Property sReceived() As Boolean
		Get
			Return Me._sReceived
		End Get
		Set
			If ((Me._sReceived = value)  _
						= false) Then
				Me.OnsReceivedChanging(value)
				Me.SendPropertyChanging
				Me._sReceived = value
				Me.SendPropertyChanged("sReceived")
				Me.OnsReceivedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tPOHeader_tPOLine", Storage:="_tPOHeader", ThisKey:="nPOID", OtherKey:="nID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property tPOHeader() As tPOHeader
		Get
			Return Me._tPOHeader.Entity
		End Get
		Set
			Dim previousValue As tPOHeader = Me._tPOHeader.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tPOHeader.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tPOHeader.Entity = Nothing
					previousValue.tPOLines.Remove(Me)
				End If
				Me._tPOHeader.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tPOLines.Add(Me)
					Me._nPOID = value.nID
				Else
					Me._nPOID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tPOHeader")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tSOHeader")>  _
Partial Public Class tSOHeader
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _nID As Integer
	
	Private _sSONum As String
	
	Private _nCustID As Integer
	
	Private _nJobID As Integer
	
	Private _sName As String
	
	Private _sFOB As String
	
	Private _dShipped As System.Nullable(Of Date)
	
	Private _sVIA As String
	
	Private _sShipTo1 As String
	
	Private _sShipTo2 As String
	
	Private _sShipToCity As String
	
	Private _sShipToState As String
	
	Private _sShipToZip As String
	
	Private _sShipToCounty As String
	
	Private _sTerms As String
	
	Private _nTaxRate As Integer
	
	Private _dinvoice As System.Nullable(Of Date)
	
	Private _dsimply As System.Nullable(Of Date)
	
	Private _dmailed As System.Nullable(Of Date)
	
	Private _nTotal As Integer
	
	Private _sOurOrder As String
	
	Private _sYourOrder As String
	
	Private _nSimplySequence As Integer
	
	Private _tSOLines As EntitySet(Of tSOLine)
	
	Private _tCustomr As EntityRef(Of tCustomr)
	
	Private _tJob As EntityRef(Of tJob)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnnIDChanged()
    End Sub
    Partial Private Sub OnsSONumChanging(value As String)
    End Sub
    Partial Private Sub OnsSONumChanged()
    End Sub
    Partial Private Sub OnnCustIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnnCustIDChanged()
    End Sub
    Partial Private Sub OnnJobIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnnJobIDChanged()
    End Sub
    Partial Private Sub OnsNameChanging(value As String)
    End Sub
    Partial Private Sub OnsNameChanged()
    End Sub
    Partial Private Sub OnsFOBChanging(value As String)
    End Sub
    Partial Private Sub OnsFOBChanged()
    End Sub
    Partial Private Sub OndShippedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndShippedChanged()
    End Sub
    Partial Private Sub OnsVIAChanging(value As String)
    End Sub
    Partial Private Sub OnsVIAChanged()
    End Sub
    Partial Private Sub OnsShipTo1Changing(value As String)
    End Sub
    Partial Private Sub OnsShipTo1Changed()
    End Sub
    Partial Private Sub OnsShipTo2Changing(value As String)
    End Sub
    Partial Private Sub OnsShipTo2Changed()
    End Sub
    Partial Private Sub OnsShipToCityChanging(value As String)
    End Sub
    Partial Private Sub OnsShipToCityChanged()
    End Sub
    Partial Private Sub OnsShipToStateChanging(value As String)
    End Sub
    Partial Private Sub OnsShipToStateChanged()
    End Sub
    Partial Private Sub OnsShipToZipChanging(value As String)
    End Sub
    Partial Private Sub OnsShipToZipChanged()
    End Sub
    Partial Private Sub OnsShipToCountyChanging(value As String)
    End Sub
    Partial Private Sub OnsShipToCountyChanged()
    End Sub
    Partial Private Sub OnsTermsChanging(value As String)
    End Sub
    Partial Private Sub OnsTermsChanged()
    End Sub
    Partial Private Sub OnnTaxRateChanging(value As Integer)
    End Sub
    Partial Private Sub OnnTaxRateChanged()
    End Sub
    Partial Private Sub OndinvoiceChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndinvoiceChanged()
    End Sub
    Partial Private Sub OndsimplyChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndsimplyChanged()
    End Sub
    Partial Private Sub OndmailedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndmailedChanged()
    End Sub
    Partial Private Sub OnnTotalChanging(value As Integer)
    End Sub
    Partial Private Sub OnnTotalChanged()
    End Sub
    Partial Private Sub OnsOurOrderChanging(value As String)
    End Sub
    Partial Private Sub OnsOurOrderChanged()
    End Sub
    Partial Private Sub OnsYourOrderChanging(value As String)
    End Sub
    Partial Private Sub OnsYourOrderChanged()
    End Sub
    Partial Private Sub OnnSimplySequenceChanging(value As Integer)
    End Sub
    Partial Private Sub OnnSimplySequenceChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tSOLines = New EntitySet(Of tSOLine)(AddressOf Me.attach_tSOLines, AddressOf Me.detach_tSOLines)
		Me._tCustomr = CType(Nothing, EntityRef(Of tCustomr))
		Me._tJob = CType(Nothing, EntityRef(Of tJob))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property nID() As Integer
		Get
			Return Me._nID
		End Get
		Set
			If ((Me._nID = value)  _
						= false) Then
				Me.OnnIDChanging(value)
				Me.SendPropertyChanging
				Me._nID = value
				Me.SendPropertyChanged("nID")
				Me.OnnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sSONum", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sSONum() As String
		Get
			Return Me._sSONum
		End Get
		Set
			If (String.Equals(Me._sSONum, value) = false) Then
				Me.OnsSONumChanging(value)
				Me.SendPropertyChanging
				Me._sSONum = value
				Me.SendPropertyChanged("sSONum")
				Me.OnsSONumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nCustID", DbType:="Int NOT NULL")>  _
	Public Property nCustID() As Integer
		Get
			Return Me._nCustID
		End Get
		Set
			If ((Me._nCustID = value)  _
						= false) Then
				If Me._tCustomr.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnnCustIDChanging(value)
				Me.SendPropertyChanging
				Me._nCustID = value
				Me.SendPropertyChanged("nCustID")
				Me.OnnCustIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nJobID", DbType:="Int NOT NULL")>  _
	Public Property nJobID() As Integer
		Get
			Return Me._nJobID
		End Get
		Set
			If ((Me._nJobID = value)  _
						= false) Then
				If Me._tJob.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnnJobIDChanging(value)
				Me.SendPropertyChanging
				Me._nJobID = value
				Me.SendPropertyChanged("nJobID")
				Me.OnnJobIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sName() As String
		Get
			Return Me._sName
		End Get
		Set
			If (String.Equals(Me._sName, value) = false) Then
				Me.OnsNameChanging(value)
				Me.SendPropertyChanging
				Me._sName = value
				Me.SendPropertyChanged("sName")
				Me.OnsNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sFOB", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sFOB() As String
		Get
			Return Me._sFOB
		End Get
		Set
			If (String.Equals(Me._sFOB, value) = false) Then
				Me.OnsFOBChanging(value)
				Me.SendPropertyChanging
				Me._sFOB = value
				Me.SendPropertyChanged("sFOB")
				Me.OnsFOBChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dShipped", DbType:="SmallDateTime")>  _
	Public Property dShipped() As System.Nullable(Of Date)
		Get
			Return Me._dShipped
		End Get
		Set
			If (Me._dShipped.Equals(value) = false) Then
				Me.OndShippedChanging(value)
				Me.SendPropertyChanging
				Me._dShipped = value
				Me.SendPropertyChanged("dShipped")
				Me.OndShippedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sVIA", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sVIA() As String
		Get
			Return Me._sVIA
		End Get
		Set
			If (String.Equals(Me._sVIA, value) = false) Then
				Me.OnsVIAChanging(value)
				Me.SendPropertyChanging
				Me._sVIA = value
				Me.SendPropertyChanged("sVIA")
				Me.OnsVIAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sShipTo1", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sShipTo1() As String
		Get
			Return Me._sShipTo1
		End Get
		Set
			If (String.Equals(Me._sShipTo1, value) = false) Then
				Me.OnsShipTo1Changing(value)
				Me.SendPropertyChanging
				Me._sShipTo1 = value
				Me.SendPropertyChanged("sShipTo1")
				Me.OnsShipTo1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sShipTo2", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sShipTo2() As String
		Get
			Return Me._sShipTo2
		End Get
		Set
			If (String.Equals(Me._sShipTo2, value) = false) Then
				Me.OnsShipTo2Changing(value)
				Me.SendPropertyChanging
				Me._sShipTo2 = value
				Me.SendPropertyChanged("sShipTo2")
				Me.OnsShipTo2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sShipToCity", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sShipToCity() As String
		Get
			Return Me._sShipToCity
		End Get
		Set
			If (String.Equals(Me._sShipToCity, value) = false) Then
				Me.OnsShipToCityChanging(value)
				Me.SendPropertyChanging
				Me._sShipToCity = value
				Me.SendPropertyChanged("sShipToCity")
				Me.OnsShipToCityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sShipToState", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sShipToState() As String
		Get
			Return Me._sShipToState
		End Get
		Set
			If (String.Equals(Me._sShipToState, value) = false) Then
				Me.OnsShipToStateChanging(value)
				Me.SendPropertyChanging
				Me._sShipToState = value
				Me.SendPropertyChanged("sShipToState")
				Me.OnsShipToStateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sShipToZip", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sShipToZip() As String
		Get
			Return Me._sShipToZip
		End Get
		Set
			If (String.Equals(Me._sShipToZip, value) = false) Then
				Me.OnsShipToZipChanging(value)
				Me.SendPropertyChanging
				Me._sShipToZip = value
				Me.SendPropertyChanged("sShipToZip")
				Me.OnsShipToZipChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sShipToCounty", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sShipToCounty() As String
		Get
			Return Me._sShipToCounty
		End Get
		Set
			If (String.Equals(Me._sShipToCounty, value) = false) Then
				Me.OnsShipToCountyChanging(value)
				Me.SendPropertyChanging
				Me._sShipToCounty = value
				Me.SendPropertyChanged("sShipToCounty")
				Me.OnsShipToCountyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sTerms", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sTerms() As String
		Get
			Return Me._sTerms
		End Get
		Set
			If (String.Equals(Me._sTerms, value) = false) Then
				Me.OnsTermsChanging(value)
				Me.SendPropertyChanging
				Me._sTerms = value
				Me.SendPropertyChanged("sTerms")
				Me.OnsTermsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nTaxRate", DbType:="Int NOT NULL")>  _
	Public Property nTaxRate() As Integer
		Get
			Return Me._nTaxRate
		End Get
		Set
			If ((Me._nTaxRate = value)  _
						= false) Then
				Me.OnnTaxRateChanging(value)
				Me.SendPropertyChanging
				Me._nTaxRate = value
				Me.SendPropertyChanged("nTaxRate")
				Me.OnnTaxRateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dinvoice", DbType:="SmallDateTime")>  _
	Public Property dinvoice() As System.Nullable(Of Date)
		Get
			Return Me._dinvoice
		End Get
		Set
			If (Me._dinvoice.Equals(value) = false) Then
				Me.OndinvoiceChanging(value)
				Me.SendPropertyChanging
				Me._dinvoice = value
				Me.SendPropertyChanged("dinvoice")
				Me.OndinvoiceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dsimply", DbType:="SmallDateTime")>  _
	Public Property dsimply() As System.Nullable(Of Date)
		Get
			Return Me._dsimply
		End Get
		Set
			If (Me._dsimply.Equals(value) = false) Then
				Me.OndsimplyChanging(value)
				Me.SendPropertyChanging
				Me._dsimply = value
				Me.SendPropertyChanged("dsimply")
				Me.OndsimplyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dmailed", DbType:="SmallDateTime")>  _
	Public Property dmailed() As System.Nullable(Of Date)
		Get
			Return Me._dmailed
		End Get
		Set
			If (Me._dmailed.Equals(value) = false) Then
				Me.OndmailedChanging(value)
				Me.SendPropertyChanging
				Me._dmailed = value
				Me.SendPropertyChanged("dmailed")
				Me.OndmailedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nTotal", DbType:="Int NOT NULL")>  _
	Public Property nTotal() As Integer
		Get
			Return Me._nTotal
		End Get
		Set
			If ((Me._nTotal = value)  _
						= false) Then
				Me.OnnTotalChanging(value)
				Me.SendPropertyChanging
				Me._nTotal = value
				Me.SendPropertyChanged("nTotal")
				Me.OnnTotalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sOurOrder", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sOurOrder() As String
		Get
			Return Me._sOurOrder
		End Get
		Set
			If (String.Equals(Me._sOurOrder, value) = false) Then
				Me.OnsOurOrderChanging(value)
				Me.SendPropertyChanging
				Me._sOurOrder = value
				Me.SendPropertyChanged("sOurOrder")
				Me.OnsOurOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sYourOrder", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sYourOrder() As String
		Get
			Return Me._sYourOrder
		End Get
		Set
			If (String.Equals(Me._sYourOrder, value) = false) Then
				Me.OnsYourOrderChanging(value)
				Me.SendPropertyChanging
				Me._sYourOrder = value
				Me.SendPropertyChanged("sYourOrder")
				Me.OnsYourOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nSimplySequence", DbType:="Int NOT NULL")>  _
	Public Property nSimplySequence() As Integer
		Get
			Return Me._nSimplySequence
		End Get
		Set
			If ((Me._nSimplySequence = value)  _
						= false) Then
				Me.OnnSimplySequenceChanging(value)
				Me.SendPropertyChanging
				Me._nSimplySequence = value
				Me.SendPropertyChanged("nSimplySequence")
				Me.OnnSimplySequenceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tSOHeader_tSOLine", Storage:="_tSOLines", ThisKey:="nID", OtherKey:="nSOID")>  _
	Public Property tSOLines() As EntitySet(Of tSOLine)
		Get
			Return Me._tSOLines
		End Get
		Set
			Me._tSOLines.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tCustomr_tSOHeader", Storage:="_tCustomr", ThisKey:="nCustID", OtherKey:="lID", IsForeignKey:=true)>  _
	Public Property tCustomr() As tCustomr
		Get
			Return Me._tCustomr.Entity
		End Get
		Set
			Dim previousValue As tCustomr = Me._tCustomr.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tCustomr.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tCustomr.Entity = Nothing
					previousValue.tSOHeaders.Remove(Me)
				End If
				Me._tCustomr.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tSOHeaders.Add(Me)
					Me._nCustID = value.lID
				Else
					Me._nCustID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tCustomr")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tJob_tSOHeader", Storage:="_tJob", ThisKey:="nJobID", OtherKey:="nID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property tJob() As tJob
		Get
			Return Me._tJob.Entity
		End Get
		Set
			Dim previousValue As tJob = Me._tJob.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tJob.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tJob.Entity = Nothing
					previousValue.tSOHeaders.Remove(Me)
				End If
				Me._tJob.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tSOHeaders.Add(Me)
					Me._nJobID = value.nID
				Else
					Me._nJobID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tJob")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tSOLines(ByVal entity As tSOLine)
		Me.SendPropertyChanging
		entity.tSOHeader = Me
	End Sub
	
	Private Sub detach_tSOLines(ByVal entity As tSOLine)
		Me.SendPropertyChanging
		entity.tSOHeader = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tSOLine")>  _
Partial Public Class tSOLine
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _nSOID As Integer
	
	Private _nLineNumber As Integer
	
	Private _sDesc As String
	
	Private _bTaxable As Boolean
	
	Private _sType As String
	
	Private _sHidden As Boolean
	
	Private _nAmount As Decimal
	
	Private _nAccountID As Integer
	
	Private _tSOHeader As EntityRef(Of tSOHeader)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnnSOIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnnSOIDChanged()
    End Sub
    Partial Private Sub OnnLineNumberChanging(value As Integer)
    End Sub
    Partial Private Sub OnnLineNumberChanged()
    End Sub
    Partial Private Sub OnsDescChanging(value As String)
    End Sub
    Partial Private Sub OnsDescChanged()
    End Sub
    Partial Private Sub OnbTaxableChanging(value As Boolean)
    End Sub
    Partial Private Sub OnbTaxableChanged()
    End Sub
    Partial Private Sub OnsTypeChanging(value As String)
    End Sub
    Partial Private Sub OnsTypeChanged()
    End Sub
    Partial Private Sub OnsHiddenChanging(value As Boolean)
    End Sub
    Partial Private Sub OnsHiddenChanged()
    End Sub
    Partial Private Sub OnnAmountChanging(value As Decimal)
    End Sub
    Partial Private Sub OnnAmountChanged()
    End Sub
    Partial Private Sub OnnAccountIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnnAccountIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tSOHeader = CType(Nothing, EntityRef(Of tSOHeader))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nSOID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property nSOID() As Integer
		Get
			Return Me._nSOID
		End Get
		Set
			If ((Me._nSOID = value)  _
						= false) Then
				If Me._tSOHeader.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnnSOIDChanging(value)
				Me.SendPropertyChanging
				Me._nSOID = value
				Me.SendPropertyChanged("nSOID")
				Me.OnnSOIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nLineNumber", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property nLineNumber() As Integer
		Get
			Return Me._nLineNumber
		End Get
		Set
			If ((Me._nLineNumber = value)  _
						= false) Then
				Me.OnnLineNumberChanging(value)
				Me.SendPropertyChanging
				Me._nLineNumber = value
				Me.SendPropertyChanged("nLineNumber")
				Me.OnnLineNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sDesc", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sDesc() As String
		Get
			Return Me._sDesc
		End Get
		Set
			If (String.Equals(Me._sDesc, value) = false) Then
				Me.OnsDescChanging(value)
				Me.SendPropertyChanging
				Me._sDesc = value
				Me.SendPropertyChanged("sDesc")
				Me.OnsDescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bTaxable", DbType:="Bit NOT NULL")>  _
	Public Property bTaxable() As Boolean
		Get
			Return Me._bTaxable
		End Get
		Set
			If ((Me._bTaxable = value)  _
						= false) Then
				Me.OnbTaxableChanging(value)
				Me.SendPropertyChanging
				Me._bTaxable = value
				Me.SendPropertyChanged("bTaxable")
				Me.OnbTaxableChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sType", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sType() As String
		Get
			Return Me._sType
		End Get
		Set
			If (String.Equals(Me._sType, value) = false) Then
				Me.OnsTypeChanging(value)
				Me.SendPropertyChanging
				Me._sType = value
				Me.SendPropertyChanged("sType")
				Me.OnsTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sHidden", DbType:="Bit NOT NULL")>  _
	Public Property sHidden() As Boolean
		Get
			Return Me._sHidden
		End Get
		Set
			If ((Me._sHidden = value)  _
						= false) Then
				Me.OnsHiddenChanging(value)
				Me.SendPropertyChanging
				Me._sHidden = value
				Me.SendPropertyChanged("sHidden")
				Me.OnsHiddenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nAmount", DbType:="Money NOT NULL")>  _
	Public Property nAmount() As Decimal
		Get
			Return Me._nAmount
		End Get
		Set
			If ((Me._nAmount = value)  _
						= false) Then
				Me.OnnAmountChanging(value)
				Me.SendPropertyChanging
				Me._nAmount = value
				Me.SendPropertyChanged("nAmount")
				Me.OnnAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nAccountID", DbType:="Int NOT NULL")>  _
	Public Property nAccountID() As Integer
		Get
			Return Me._nAccountID
		End Get
		Set
			If ((Me._nAccountID = value)  _
						= false) Then
				Me.OnnAccountIDChanging(value)
				Me.SendPropertyChanging
				Me._nAccountID = value
				Me.SendPropertyChanged("nAccountID")
				Me.OnnAccountIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tSOHeader_tSOLine", Storage:="_tSOHeader", ThisKey:="nSOID", OtherKey:="nID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property tSOHeader() As tSOHeader
		Get
			Return Me._tSOHeader.Entity
		End Get
		Set
			Dim previousValue As tSOHeader = Me._tSOHeader.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tSOHeader.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tSOHeader.Entity = Nothing
					previousValue.tSOLines.Remove(Me)
				End If
				Me._tSOHeader.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tSOLines.Add(Me)
					Me._nSOID = value.nID
				Else
					Me._nSOID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tSOHeader")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tAddress")>  _
Partial Public Class tAddress
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _nID As Integer
	
	Private _sAddress1 As String
	
	Private _sAddress2 As String
	
	Private _sCity As String
	
	Private _sState As String
	
	Private _sCounty As String
	
	Private _sZip As String
	
	Private _sLocCode As String
	
	Private _tblSWOPendings As EntitySet(Of tblSWOPending)
	
	Private _tJobs As EntitySet(Of tJob)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnnIDChanged()
    End Sub
    Partial Private Sub OnsAddress1Changing(value As String)
    End Sub
    Partial Private Sub OnsAddress1Changed()
    End Sub
    Partial Private Sub OnsAddress2Changing(value As String)
    End Sub
    Partial Private Sub OnsAddress2Changed()
    End Sub
    Partial Private Sub OnsCityChanging(value As String)
    End Sub
    Partial Private Sub OnsCityChanged()
    End Sub
    Partial Private Sub OnsStateChanging(value As String)
    End Sub
    Partial Private Sub OnsStateChanged()
    End Sub
    Partial Private Sub OnsCountyChanging(value As String)
    End Sub
    Partial Private Sub OnsCountyChanged()
    End Sub
    Partial Private Sub OnsZipChanging(value As String)
    End Sub
    Partial Private Sub OnsZipChanged()
    End Sub
    Partial Private Sub OnsLocCodeChanging(value As String)
    End Sub
    Partial Private Sub OnsLocCodeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblSWOPendings = New EntitySet(Of tblSWOPending)(AddressOf Me.attach_tblSWOPendings, AddressOf Me.detach_tblSWOPendings)
		Me._tJobs = New EntitySet(Of tJob)(AddressOf Me.attach_tJobs, AddressOf Me.detach_tJobs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property nID() As Integer
		Get
			Return Me._nID
		End Get
		Set
			If ((Me._nID = value)  _
						= false) Then
				Me.OnnIDChanging(value)
				Me.SendPropertyChanging
				Me._nID = value
				Me.SendPropertyChanged("nID")
				Me.OnnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sAddress1", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sAddress1() As String
		Get
			Return Me._sAddress1
		End Get
		Set
			If (String.Equals(Me._sAddress1, value) = false) Then
				Me.OnsAddress1Changing(value)
				Me.SendPropertyChanging
				Me._sAddress1 = value
				Me.SendPropertyChanged("sAddress1")
				Me.OnsAddress1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sAddress2", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sAddress2() As String
		Get
			Return Me._sAddress2
		End Get
		Set
			If (String.Equals(Me._sAddress2, value) = false) Then
				Me.OnsAddress2Changing(value)
				Me.SendPropertyChanging
				Me._sAddress2 = value
				Me.SendPropertyChanged("sAddress2")
				Me.OnsAddress2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sCity", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sCity() As String
		Get
			Return Me._sCity
		End Get
		Set
			If (String.Equals(Me._sCity, value) = false) Then
				Me.OnsCityChanging(value)
				Me.SendPropertyChanging
				Me._sCity = value
				Me.SendPropertyChanged("sCity")
				Me.OnsCityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sState", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sState() As String
		Get
			Return Me._sState
		End Get
		Set
			If (String.Equals(Me._sState, value) = false) Then
				Me.OnsStateChanging(value)
				Me.SendPropertyChanging
				Me._sState = value
				Me.SendPropertyChanged("sState")
				Me.OnsStateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sCounty", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sCounty() As String
		Get
			Return Me._sCounty
		End Get
		Set
			If (String.Equals(Me._sCounty, value) = false) Then
				Me.OnsCountyChanging(value)
				Me.SendPropertyChanging
				Me._sCounty = value
				Me.SendPropertyChanged("sCounty")
				Me.OnsCountyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sZip", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sZip() As String
		Get
			Return Me._sZip
		End Get
		Set
			If (String.Equals(Me._sZip, value) = false) Then
				Me.OnsZipChanging(value)
				Me.SendPropertyChanging
				Me._sZip = value
				Me.SendPropertyChanged("sZip")
				Me.OnsZipChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sLocCode", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sLocCode() As String
		Get
			Return Me._sLocCode
		End Get
		Set
			If (String.Equals(Me._sLocCode, value) = false) Then
				Me.OnsLocCodeChanging(value)
				Me.SendPropertyChanging
				Me._sLocCode = value
				Me.SendPropertyChanged("sLocCode")
				Me.OnsLocCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tAddress_tblSWOPending", Storage:="_tblSWOPendings", ThisKey:="nID", OtherKey:="AddressID")>  _
	Public Property tblSWOPendings() As EntitySet(Of tblSWOPending)
		Get
			Return Me._tblSWOPendings
		End Get
		Set
			Me._tblSWOPendings.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tAddress_tJob", Storage:="_tJobs", ThisKey:="nID", OtherKey:="nAddressID")>  _
	Public Property tJobs() As EntitySet(Of tJob)
		Get
			Return Me._tJobs
		End Get
		Set
			Me._tJobs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblSWOPendings(ByVal entity As tblSWOPending)
		Me.SendPropertyChanging
		entity.tAddress = Me
	End Sub
	
	Private Sub detach_tblSWOPendings(ByVal entity As tblSWOPending)
		Me.SendPropertyChanging
		entity.tAddress = Nothing
	End Sub
	
	Private Sub attach_tJobs(ByVal entity As tJob)
		Me.SendPropertyChanging
		entity.tAddress = Me
	End Sub
	
	Private Sub detach_tJobs(ByVal entity As tJob)
		Me.SendPropertyChanging
		entity.tAddress = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tVendor")>  _
Partial Public Class tVendor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _lid As Integer
	
	Private _sName As String
	
	Private _sStreet1 As String
	
	Private _sStreet2 As String
	
	Private _sCity As String
	
	Private _sProvState As String
	
	Private _sCountry As String
	
	Private _sPostalZip As String
	
	Private _sPhone1 As String
	
	Private _sPhone2 As String
	
	Private _sFax As String
	
	Private _IgnoreScheduling As System.Nullable(Of Boolean)
	
	Private _vendorType As String
	
	Private _tPOHeaders As EntitySet(Of tPOHeader)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnlidChanging(value As Integer)
    End Sub
    Partial Private Sub OnlidChanged()
    End Sub
    Partial Private Sub OnsNameChanging(value As String)
    End Sub
    Partial Private Sub OnsNameChanged()
    End Sub
    Partial Private Sub OnsStreet1Changing(value As String)
    End Sub
    Partial Private Sub OnsStreet1Changed()
    End Sub
    Partial Private Sub OnsStreet2Changing(value As String)
    End Sub
    Partial Private Sub OnsStreet2Changed()
    End Sub
    Partial Private Sub OnsCityChanging(value As String)
    End Sub
    Partial Private Sub OnsCityChanged()
    End Sub
    Partial Private Sub OnsProvStateChanging(value As String)
    End Sub
    Partial Private Sub OnsProvStateChanged()
    End Sub
    Partial Private Sub OnsCountryChanging(value As String)
    End Sub
    Partial Private Sub OnsCountryChanged()
    End Sub
    Partial Private Sub OnsPostalZipChanging(value As String)
    End Sub
    Partial Private Sub OnsPostalZipChanged()
    End Sub
    Partial Private Sub OnsPhone1Changing(value As String)
    End Sub
    Partial Private Sub OnsPhone1Changed()
    End Sub
    Partial Private Sub OnsPhone2Changing(value As String)
    End Sub
    Partial Private Sub OnsPhone2Changed()
    End Sub
    Partial Private Sub OnsFaxChanging(value As String)
    End Sub
    Partial Private Sub OnsFaxChanged()
    End Sub
    Partial Private Sub OnIgnoreSchedulingChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIgnoreSchedulingChanged()
    End Sub
    Partial Private Sub OnvendorTypeChanging(value As String)
    End Sub
    Partial Private Sub OnvendorTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tPOHeaders = New EntitySet(Of tPOHeader)(AddressOf Me.attach_tPOHeaders, AddressOf Me.detach_tPOHeaders)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lid", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property lid() As Integer
		Get
			Return Me._lid
		End Get
		Set
			If ((Me._lid = value)  _
						= false) Then
				Me.OnlidChanging(value)
				Me.SendPropertyChanging
				Me._lid = value
				Me.SendPropertyChanged("lid")
				Me.OnlidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sName() As String
		Get
			Return Me._sName
		End Get
		Set
			If (String.Equals(Me._sName, value) = false) Then
				Me.OnsNameChanging(value)
				Me.SendPropertyChanging
				Me._sName = value
				Me.SendPropertyChanged("sName")
				Me.OnsNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sStreet1", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sStreet1() As String
		Get
			Return Me._sStreet1
		End Get
		Set
			If (String.Equals(Me._sStreet1, value) = false) Then
				Me.OnsStreet1Changing(value)
				Me.SendPropertyChanging
				Me._sStreet1 = value
				Me.SendPropertyChanged("sStreet1")
				Me.OnsStreet1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sStreet2", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sStreet2() As String
		Get
			Return Me._sStreet2
		End Get
		Set
			If (String.Equals(Me._sStreet2, value) = false) Then
				Me.OnsStreet2Changing(value)
				Me.SendPropertyChanging
				Me._sStreet2 = value
				Me.SendPropertyChanged("sStreet2")
				Me.OnsStreet2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sCity", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sCity() As String
		Get
			Return Me._sCity
		End Get
		Set
			If (String.Equals(Me._sCity, value) = false) Then
				Me.OnsCityChanging(value)
				Me.SendPropertyChanging
				Me._sCity = value
				Me.SendPropertyChanged("sCity")
				Me.OnsCityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sProvState", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sProvState() As String
		Get
			Return Me._sProvState
		End Get
		Set
			If (String.Equals(Me._sProvState, value) = false) Then
				Me.OnsProvStateChanging(value)
				Me.SendPropertyChanging
				Me._sProvState = value
				Me.SendPropertyChanged("sProvState")
				Me.OnsProvStateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sCountry", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sCountry() As String
		Get
			Return Me._sCountry
		End Get
		Set
			If (String.Equals(Me._sCountry, value) = false) Then
				Me.OnsCountryChanging(value)
				Me.SendPropertyChanging
				Me._sCountry = value
				Me.SendPropertyChanged("sCountry")
				Me.OnsCountryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sPostalZip", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sPostalZip() As String
		Get
			Return Me._sPostalZip
		End Get
		Set
			If (String.Equals(Me._sPostalZip, value) = false) Then
				Me.OnsPostalZipChanging(value)
				Me.SendPropertyChanging
				Me._sPostalZip = value
				Me.SendPropertyChanged("sPostalZip")
				Me.OnsPostalZipChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sPhone1", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sPhone1() As String
		Get
			Return Me._sPhone1
		End Get
		Set
			If (String.Equals(Me._sPhone1, value) = false) Then
				Me.OnsPhone1Changing(value)
				Me.SendPropertyChanging
				Me._sPhone1 = value
				Me.SendPropertyChanged("sPhone1")
				Me.OnsPhone1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sPhone2", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sPhone2() As String
		Get
			Return Me._sPhone2
		End Get
		Set
			If (String.Equals(Me._sPhone2, value) = false) Then
				Me.OnsPhone2Changing(value)
				Me.SendPropertyChanging
				Me._sPhone2 = value
				Me.SendPropertyChanged("sPhone2")
				Me.OnsPhone2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sFax", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sFax() As String
		Get
			Return Me._sFax
		End Get
		Set
			If (String.Equals(Me._sFax, value) = false) Then
				Me.OnsFaxChanging(value)
				Me.SendPropertyChanging
				Me._sFax = value
				Me.SendPropertyChanged("sFax")
				Me.OnsFaxChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IgnoreScheduling", DbType:="Bit")>  _
	Public Property IgnoreScheduling() As System.Nullable(Of Boolean)
		Get
			Return Me._IgnoreScheduling
		End Get
		Set
			If (Me._IgnoreScheduling.Equals(value) = false) Then
				Me.OnIgnoreSchedulingChanging(value)
				Me.SendPropertyChanging
				Me._IgnoreScheduling = value
				Me.SendPropertyChanged("IgnoreScheduling")
				Me.OnIgnoreSchedulingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vendorType", DbType:="VarChar(50)")>  _
	Public Property vendorType() As String
		Get
			Return Me._vendorType
		End Get
		Set
			If (String.Equals(Me._vendorType, value) = false) Then
				Me.OnvendorTypeChanging(value)
				Me.SendPropertyChanging
				Me._vendorType = value
				Me.SendPropertyChanged("vendorType")
				Me.OnvendorTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tVendor_tPOHeader", Storage:="_tPOHeaders", ThisKey:="lid", OtherKey:="nVendorID")>  _
	Public Property tPOHeaders() As EntitySet(Of tPOHeader)
		Get
			Return Me._tPOHeaders
		End Get
		Set
			Me._tPOHeaders.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tPOHeaders(ByVal entity As tPOHeader)
		Me.SendPropertyChanging
		entity.tVendor = Me
	End Sub
	
	Private Sub detach_tPOHeaders(ByVal entity As tPOHeader)
		Me.SendPropertyChanging
		entity.tVendor = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tCustomr")>  _
Partial Public Class tCustomr
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _lID As Integer
	
	Private _sName As String
	
	Private _sStreet1 As String
	
	Private _sStreet2 As String
	
	Private _sCity As String
	
	Private _sProvState As String
	
	Private _sCountry As String
	
	Private _sPostalZip As String
	
	Private _sPhone1 As String
	
	Private _sPhone2 As String
	
	Private _sFax As String
	
	Private _dCrLimit As Decimal
	
	Private _dAmtYTD As String
	
	Private _tSOHeaders As EntitySet(Of tSOHeader)
	
	Private _tblSWOPendings As EntitySet(Of tblSWOPending)
	
	Private _tJobs As EntitySet(Of tJob)
	
	Private _tblCustomerExtendeds As EntityRef(Of tblCustomerExtended)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnlIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnlIDChanged()
    End Sub
    Partial Private Sub OnsNameChanging(value As String)
    End Sub
    Partial Private Sub OnsNameChanged()
    End Sub
    Partial Private Sub OnsStreet1Changing(value As String)
    End Sub
    Partial Private Sub OnsStreet1Changed()
    End Sub
    Partial Private Sub OnsStreet2Changing(value As String)
    End Sub
    Partial Private Sub OnsStreet2Changed()
    End Sub
    Partial Private Sub OnsCityChanging(value As String)
    End Sub
    Partial Private Sub OnsCityChanged()
    End Sub
    Partial Private Sub OnsProvStateChanging(value As String)
    End Sub
    Partial Private Sub OnsProvStateChanged()
    End Sub
    Partial Private Sub OnsCountryChanging(value As String)
    End Sub
    Partial Private Sub OnsCountryChanged()
    End Sub
    Partial Private Sub OnsPostalZipChanging(value As String)
    End Sub
    Partial Private Sub OnsPostalZipChanged()
    End Sub
    Partial Private Sub OnsPhone1Changing(value As String)
    End Sub
    Partial Private Sub OnsPhone1Changed()
    End Sub
    Partial Private Sub OnsPhone2Changing(value As String)
    End Sub
    Partial Private Sub OnsPhone2Changed()
    End Sub
    Partial Private Sub OnsFaxChanging(value As String)
    End Sub
    Partial Private Sub OnsFaxChanged()
    End Sub
    Partial Private Sub OndCrLimitChanging(value As Decimal)
    End Sub
    Partial Private Sub OndCrLimitChanged()
    End Sub
    Partial Private Sub OndAmtYTDChanging(value As String)
    End Sub
    Partial Private Sub OndAmtYTDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tSOHeaders = New EntitySet(Of tSOHeader)(AddressOf Me.attach_tSOHeaders, AddressOf Me.detach_tSOHeaders)
		Me._tblSWOPendings = New EntitySet(Of tblSWOPending)(AddressOf Me.attach_tblSWOPendings, AddressOf Me.detach_tblSWOPendings)
		Me._tJobs = New EntitySet(Of tJob)(AddressOf Me.attach_tJobs, AddressOf Me.detach_tJobs)
		Me._tblCustomerExtendeds = CType(Nothing, EntityRef(Of tblCustomerExtended))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lID", DbType:="Int NOT NULL", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property lID() As Integer
		Get
			Return Me._lID
		End Get
		Set
			If ((Me._lID = value)  _
						= false) Then
				Me.OnlIDChanging(value)
				Me.SendPropertyChanging
				Me._lID = value
				Me.SendPropertyChanged("lID")
				Me.OnlIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sName() As String
		Get
			Return Me._sName
		End Get
		Set
			If (String.Equals(Me._sName, value) = false) Then
				Me.OnsNameChanging(value)
				Me.SendPropertyChanging
				Me._sName = value
				Me.SendPropertyChanged("sName")
				Me.OnsNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sStreet1", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sStreet1() As String
		Get
			Return Me._sStreet1
		End Get
		Set
			If (String.Equals(Me._sStreet1, value) = false) Then
				Me.OnsStreet1Changing(value)
				Me.SendPropertyChanging
				Me._sStreet1 = value
				Me.SendPropertyChanged("sStreet1")
				Me.OnsStreet1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sStreet2", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sStreet2() As String
		Get
			Return Me._sStreet2
		End Get
		Set
			If (String.Equals(Me._sStreet2, value) = false) Then
				Me.OnsStreet2Changing(value)
				Me.SendPropertyChanging
				Me._sStreet2 = value
				Me.SendPropertyChanged("sStreet2")
				Me.OnsStreet2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sCity", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sCity() As String
		Get
			Return Me._sCity
		End Get
		Set
			If (String.Equals(Me._sCity, value) = false) Then
				Me.OnsCityChanging(value)
				Me.SendPropertyChanging
				Me._sCity = value
				Me.SendPropertyChanged("sCity")
				Me.OnsCityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sProvState", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sProvState() As String
		Get
			Return Me._sProvState
		End Get
		Set
			If (String.Equals(Me._sProvState, value) = false) Then
				Me.OnsProvStateChanging(value)
				Me.SendPropertyChanging
				Me._sProvState = value
				Me.SendPropertyChanged("sProvState")
				Me.OnsProvStateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sCountry", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sCountry() As String
		Get
			Return Me._sCountry
		End Get
		Set
			If (String.Equals(Me._sCountry, value) = false) Then
				Me.OnsCountryChanging(value)
				Me.SendPropertyChanging
				Me._sCountry = value
				Me.SendPropertyChanged("sCountry")
				Me.OnsCountryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sPostalZip", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sPostalZip() As String
		Get
			Return Me._sPostalZip
		End Get
		Set
			If (String.Equals(Me._sPostalZip, value) = false) Then
				Me.OnsPostalZipChanging(value)
				Me.SendPropertyChanging
				Me._sPostalZip = value
				Me.SendPropertyChanged("sPostalZip")
				Me.OnsPostalZipChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sPhone1", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sPhone1() As String
		Get
			Return Me._sPhone1
		End Get
		Set
			If (String.Equals(Me._sPhone1, value) = false) Then
				Me.OnsPhone1Changing(value)
				Me.SendPropertyChanging
				Me._sPhone1 = value
				Me.SendPropertyChanged("sPhone1")
				Me.OnsPhone1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sPhone2", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sPhone2() As String
		Get
			Return Me._sPhone2
		End Get
		Set
			If (String.Equals(Me._sPhone2, value) = false) Then
				Me.OnsPhone2Changing(value)
				Me.SendPropertyChanging
				Me._sPhone2 = value
				Me.SendPropertyChanged("sPhone2")
				Me.OnsPhone2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sFax", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sFax() As String
		Get
			Return Me._sFax
		End Get
		Set
			If (String.Equals(Me._sFax, value) = false) Then
				Me.OnsFaxChanging(value)
				Me.SendPropertyChanging
				Me._sFax = value
				Me.SendPropertyChanged("sFax")
				Me.OnsFaxChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dCrLimit", DbType:="Money NOT NULL")>  _
	Public Property dCrLimit() As Decimal
		Get
			Return Me._dCrLimit
		End Get
		Set
			If ((Me._dCrLimit = value)  _
						= false) Then
				Me.OndCrLimitChanging(value)
				Me.SendPropertyChanging
				Me._dCrLimit = value
				Me.SendPropertyChanged("dCrLimit")
				Me.OndCrLimitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dAmtYTD", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property dAmtYTD() As String
		Get
			Return Me._dAmtYTD
		End Get
		Set
			If (String.Equals(Me._dAmtYTD, value) = false) Then
				Me.OndAmtYTDChanging(value)
				Me.SendPropertyChanging
				Me._dAmtYTD = value
				Me.SendPropertyChanged("dAmtYTD")
				Me.OndAmtYTDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tCustomr_tSOHeader", Storage:="_tSOHeaders", ThisKey:="lID", OtherKey:="nCustID")>  _
	Public Property tSOHeaders() As EntitySet(Of tSOHeader)
		Get
			Return Me._tSOHeaders
		End Get
		Set
			Me._tSOHeaders.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tCustomr_tblSWOPending", Storage:="_tblSWOPendings", ThisKey:="lID", OtherKey:="CustID")>  _
	Public Property tblSWOPendings() As EntitySet(Of tblSWOPending)
		Get
			Return Me._tblSWOPendings
		End Get
		Set
			Me._tblSWOPendings.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tCustomr_tJob", Storage:="_tJobs", ThisKey:="lID", OtherKey:="nCustID")>  _
	Public Property tJobs() As EntitySet(Of tJob)
		Get
			Return Me._tJobs
		End Get
		Set
			Me._tJobs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tCustomr_tblCustomerExtended", Storage:="_tblCustomerExtendeds", ThisKey:="lID", OtherKey:="lID", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property tblCustomerExtendeds() As tblCustomerExtended
		Get
			Return Me._tblCustomerExtendeds.Entity
		End Get
		Set
			Dim previousValue As tblCustomerExtended = Me._tblCustomerExtendeds.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblCustomerExtendeds.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblCustomerExtendeds.Entity = Nothing
					previousValue.tCustomr = Nothing
				End If
				Me._tblCustomerExtendeds.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.tCustomr = Me
				End If
				Me.SendPropertyChanged("tblCustomerExtendeds")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tSOHeaders(ByVal entity As tSOHeader)
		Me.SendPropertyChanging
		entity.tCustomr = Me
	End Sub
	
	Private Sub detach_tSOHeaders(ByVal entity As tSOHeader)
		Me.SendPropertyChanging
		entity.tCustomr = Nothing
	End Sub
	
	Private Sub attach_tblSWOPendings(ByVal entity As tblSWOPending)
		Me.SendPropertyChanging
		entity.tCustomr = Me
	End Sub
	
	Private Sub detach_tblSWOPendings(ByVal entity As tblSWOPending)
		Me.SendPropertyChanging
		entity.tCustomr = Nothing
	End Sub
	
	Private Sub attach_tJobs(ByVal entity As tJob)
		Me.SendPropertyChanging
		entity.tCustomr = Me
	End Sub
	
	Private Sub detach_tJobs(ByVal entity As tJob)
		Me.SendPropertyChanging
		entity.tCustomr = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tUser")>  _
Partial Public Class tUser
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Username As String
	
	Private _Password As String
	
	Private _Userlevel As String
	
	Private _Email As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUsernameChanging(value As String)
    End Sub
    Partial Private Sub OnUsernameChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    Partial Private Sub OnUserlevelChanging(value As String)
    End Sub
    Partial Private Sub OnUserlevelChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Username", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Username() As String
		Get
			Return Me._Username
		End Get
		Set
			If (String.Equals(Me._Username, value) = false) Then
				Me.OnUsernameChanging(value)
				Me.SendPropertyChanging
				Me._Username = value
				Me.SendPropertyChanged("Username")
				Me.OnUsernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me.OnPasswordChanging(value)
				Me.SendPropertyChanging
				Me._Password = value
				Me.SendPropertyChanged("Password")
				Me.OnPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Userlevel", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Userlevel() As String
		Get
			Return Me._Userlevel
		End Get
		Set
			If (String.Equals(Me._Userlevel, value) = false) Then
				Me.OnUserlevelChanging(value)
				Me.SendPropertyChanging
				Me._Userlevel = value
				Me.SendPropertyChanged("Userlevel")
				Me.OnUserlevelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="VarChar(255)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblCommissionStructure")>  _
Partial Public Class tblCommissionStructure
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _lngID As Integer
	
	Private _dblLevel1 As Decimal
	
	Private _dblRate1 As Decimal
	
	Private _dblLevel2 As Decimal
	
	Private _dblRate2 As Decimal
	
	Private _dblLevel3 As Decimal
	
	Private _dblRate3 As Decimal
	
	Private _dblLevel4 As Decimal
	
	Private _dblRate4 As Decimal
	
	Private _dblLevel5 As Decimal
	
	Private _dblRate5 As Decimal
	
	Private _dblLevel6 As Decimal
	
	Private _dblRate6 As Decimal
	
	Private _dblLevel7 As Decimal
	
	Private _dblRate7 As Decimal
	
	Private _dblLevel8 As Decimal
	
	Private _dblRate8 As Decimal
	
	Private _dblLevel9 As Decimal
	
	Private _dblRate9 As Decimal
	
	Private _dblLevel10 As Decimal
	
	Private _dblRate10 As Decimal
	
	Private _dblLevel11 As Decimal
	
	Private _dblRate11 As Decimal
	
	Private _dblLevel12 As Decimal
	
	Private _dblRate12 As Decimal
	
	Private _dblLevel13 As Decimal
	
	Private _dblRate13 As Decimal
	
	Private _dblLevel14 As Decimal
	
	Private _dblRate14 As Decimal
	
	Private _dblLevel15 As Decimal
	
	Private _dblRate15 As Decimal
	
	Private _dblLevel16 As Decimal
	
	Private _dblRate16 As Decimal
	
	Private _dblLevel17 As Decimal
	
	Private _dblRate17 As Decimal
	
	Private _dblLevel18 As Decimal
	
	Private _dblRate18 As Decimal
	
	Private _dblLevel19 As Decimal
	
	Private _dblRate19 As Decimal
	
	Private _dblLevel20 As Decimal
	
	Private _dblRate20 As Decimal
	
	Private _lngPriority As Integer
	
	Private _dblJobCostRate As Decimal
	
	Private _ExpireDate As Date
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnlngIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnlngIDChanged()
    End Sub
    Partial Private Sub OndblLevel1Changing(value As Decimal)
    End Sub
    Partial Private Sub OndblLevel1Changed()
    End Sub
    Partial Private Sub OndblRate1Changing(value As Decimal)
    End Sub
    Partial Private Sub OndblRate1Changed()
    End Sub
    Partial Private Sub OndblLevel2Changing(value As Decimal)
    End Sub
    Partial Private Sub OndblLevel2Changed()
    End Sub
    Partial Private Sub OndblRate2Changing(value As Decimal)
    End Sub
    Partial Private Sub OndblRate2Changed()
    End Sub
    Partial Private Sub OndblLevel3Changing(value As Decimal)
    End Sub
    Partial Private Sub OndblLevel3Changed()
    End Sub
    Partial Private Sub OndblRate3Changing(value As Decimal)
    End Sub
    Partial Private Sub OndblRate3Changed()
    End Sub
    Partial Private Sub OndblLevel4Changing(value As Decimal)
    End Sub
    Partial Private Sub OndblLevel4Changed()
    End Sub
    Partial Private Sub OndblRate4Changing(value As Decimal)
    End Sub
    Partial Private Sub OndblRate4Changed()
    End Sub
    Partial Private Sub OndblLevel5Changing(value As Decimal)
    End Sub
    Partial Private Sub OndblLevel5Changed()
    End Sub
    Partial Private Sub OndblRate5Changing(value As Decimal)
    End Sub
    Partial Private Sub OndblRate5Changed()
    End Sub
    Partial Private Sub OndblLevel6Changing(value As Decimal)
    End Sub
    Partial Private Sub OndblLevel6Changed()
    End Sub
    Partial Private Sub OndblRate6Changing(value As Decimal)
    End Sub
    Partial Private Sub OndblRate6Changed()
    End Sub
    Partial Private Sub OndblLevel7Changing(value As Decimal)
    End Sub
    Partial Private Sub OndblLevel7Changed()
    End Sub
    Partial Private Sub OndblRate7Changing(value As Decimal)
    End Sub
    Partial Private Sub OndblRate7Changed()
    End Sub
    Partial Private Sub OndblLevel8Changing(value As Decimal)
    End Sub
    Partial Private Sub OndblLevel8Changed()
    End Sub
    Partial Private Sub OndblRate8Changing(value As Decimal)
    End Sub
    Partial Private Sub OndblRate8Changed()
    End Sub
    Partial Private Sub OndblLevel9Changing(value As Decimal)
    End Sub
    Partial Private Sub OndblLevel9Changed()
    End Sub
    Partial Private Sub OndblRate9Changing(value As Decimal)
    End Sub
    Partial Private Sub OndblRate9Changed()
    End Sub
    Partial Private Sub OndblLevel10Changing(value As Decimal)
    End Sub
    Partial Private Sub OndblLevel10Changed()
    End Sub
    Partial Private Sub OndblRate10Changing(value As Decimal)
    End Sub
    Partial Private Sub OndblRate10Changed()
    End Sub
    Partial Private Sub OndblLevel11Changing(value As Decimal)
    End Sub
    Partial Private Sub OndblLevel11Changed()
    End Sub
    Partial Private Sub OndblRate11Changing(value As Decimal)
    End Sub
    Partial Private Sub OndblRate11Changed()
    End Sub
    Partial Private Sub OndblLevel12Changing(value As Decimal)
    End Sub
    Partial Private Sub OndblLevel12Changed()
    End Sub
    Partial Private Sub OndblRate12Changing(value As Decimal)
    End Sub
    Partial Private Sub OndblRate12Changed()
    End Sub
    Partial Private Sub OndblLevel13Changing(value As Decimal)
    End Sub
    Partial Private Sub OndblLevel13Changed()
    End Sub
    Partial Private Sub OndblRate13Changing(value As Decimal)
    End Sub
    Partial Private Sub OndblRate13Changed()
    End Sub
    Partial Private Sub OndblLevel14Changing(value As Decimal)
    End Sub
    Partial Private Sub OndblLevel14Changed()
    End Sub
    Partial Private Sub OndblRate14Changing(value As Decimal)
    End Sub
    Partial Private Sub OndblRate14Changed()
    End Sub
    Partial Private Sub OndblLevel15Changing(value As Decimal)
    End Sub
    Partial Private Sub OndblLevel15Changed()
    End Sub
    Partial Private Sub OndblRate15Changing(value As Decimal)
    End Sub
    Partial Private Sub OndblRate15Changed()
    End Sub
    Partial Private Sub OndblLevel16Changing(value As Decimal)
    End Sub
    Partial Private Sub OndblLevel16Changed()
    End Sub
    Partial Private Sub OndblRate16Changing(value As Decimal)
    End Sub
    Partial Private Sub OndblRate16Changed()
    End Sub
    Partial Private Sub OndblLevel17Changing(value As Decimal)
    End Sub
    Partial Private Sub OndblLevel17Changed()
    End Sub
    Partial Private Sub OndblRate17Changing(value As Decimal)
    End Sub
    Partial Private Sub OndblRate17Changed()
    End Sub
    Partial Private Sub OndblLevel18Changing(value As Decimal)
    End Sub
    Partial Private Sub OndblLevel18Changed()
    End Sub
    Partial Private Sub OndblRate18Changing(value As Decimal)
    End Sub
    Partial Private Sub OndblRate18Changed()
    End Sub
    Partial Private Sub OndblLevel19Changing(value As Decimal)
    End Sub
    Partial Private Sub OndblLevel19Changed()
    End Sub
    Partial Private Sub OndblRate19Changing(value As Decimal)
    End Sub
    Partial Private Sub OndblRate19Changed()
    End Sub
    Partial Private Sub OndblLevel20Changing(value As Decimal)
    End Sub
    Partial Private Sub OndblLevel20Changed()
    End Sub
    Partial Private Sub OndblRate20Changing(value As Decimal)
    End Sub
    Partial Private Sub OndblRate20Changed()
    End Sub
    Partial Private Sub OnlngPriorityChanging(value As Integer)
    End Sub
    Partial Private Sub OnlngPriorityChanged()
    End Sub
    Partial Private Sub OndblJobCostRateChanging(value As Decimal)
    End Sub
    Partial Private Sub OndblJobCostRateChanged()
    End Sub
    Partial Private Sub OnExpireDateChanging(value As Date)
    End Sub
    Partial Private Sub OnExpireDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lngID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property lngID() As Integer
		Get
			Return Me._lngID
		End Get
		Set
			If ((Me._lngID = value)  _
						= false) Then
				Me.OnlngIDChanging(value)
				Me.SendPropertyChanging
				Me._lngID = value
				Me.SendPropertyChanged("lngID")
				Me.OnlngIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblLevel1", DbType:="Money NOT NULL")>  _
	Public Property dblLevel1() As Decimal
		Get
			Return Me._dblLevel1
		End Get
		Set
			If ((Me._dblLevel1 = value)  _
						= false) Then
				Me.OndblLevel1Changing(value)
				Me.SendPropertyChanging
				Me._dblLevel1 = value
				Me.SendPropertyChanged("dblLevel1")
				Me.OndblLevel1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblRate1", DbType:="Money NOT NULL")>  _
	Public Property dblRate1() As Decimal
		Get
			Return Me._dblRate1
		End Get
		Set
			If ((Me._dblRate1 = value)  _
						= false) Then
				Me.OndblRate1Changing(value)
				Me.SendPropertyChanging
				Me._dblRate1 = value
				Me.SendPropertyChanged("dblRate1")
				Me.OndblRate1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblLevel2", DbType:="Money NOT NULL")>  _
	Public Property dblLevel2() As Decimal
		Get
			Return Me._dblLevel2
		End Get
		Set
			If ((Me._dblLevel2 = value)  _
						= false) Then
				Me.OndblLevel2Changing(value)
				Me.SendPropertyChanging
				Me._dblLevel2 = value
				Me.SendPropertyChanged("dblLevel2")
				Me.OndblLevel2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblRate2", DbType:="Money NOT NULL")>  _
	Public Property dblRate2() As Decimal
		Get
			Return Me._dblRate2
		End Get
		Set
			If ((Me._dblRate2 = value)  _
						= false) Then
				Me.OndblRate2Changing(value)
				Me.SendPropertyChanging
				Me._dblRate2 = value
				Me.SendPropertyChanged("dblRate2")
				Me.OndblRate2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblLevel3", DbType:="Money NOT NULL")>  _
	Public Property dblLevel3() As Decimal
		Get
			Return Me._dblLevel3
		End Get
		Set
			If ((Me._dblLevel3 = value)  _
						= false) Then
				Me.OndblLevel3Changing(value)
				Me.SendPropertyChanging
				Me._dblLevel3 = value
				Me.SendPropertyChanged("dblLevel3")
				Me.OndblLevel3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblRate3", DbType:="Money NOT NULL")>  _
	Public Property dblRate3() As Decimal
		Get
			Return Me._dblRate3
		End Get
		Set
			If ((Me._dblRate3 = value)  _
						= false) Then
				Me.OndblRate3Changing(value)
				Me.SendPropertyChanging
				Me._dblRate3 = value
				Me.SendPropertyChanged("dblRate3")
				Me.OndblRate3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblLevel4", DbType:="Money NOT NULL")>  _
	Public Property dblLevel4() As Decimal
		Get
			Return Me._dblLevel4
		End Get
		Set
			If ((Me._dblLevel4 = value)  _
						= false) Then
				Me.OndblLevel4Changing(value)
				Me.SendPropertyChanging
				Me._dblLevel4 = value
				Me.SendPropertyChanged("dblLevel4")
				Me.OndblLevel4Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblRate4", DbType:="Money NOT NULL")>  _
	Public Property dblRate4() As Decimal
		Get
			Return Me._dblRate4
		End Get
		Set
			If ((Me._dblRate4 = value)  _
						= false) Then
				Me.OndblRate4Changing(value)
				Me.SendPropertyChanging
				Me._dblRate4 = value
				Me.SendPropertyChanged("dblRate4")
				Me.OndblRate4Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblLevel5", DbType:="Money NOT NULL")>  _
	Public Property dblLevel5() As Decimal
		Get
			Return Me._dblLevel5
		End Get
		Set
			If ((Me._dblLevel5 = value)  _
						= false) Then
				Me.OndblLevel5Changing(value)
				Me.SendPropertyChanging
				Me._dblLevel5 = value
				Me.SendPropertyChanged("dblLevel5")
				Me.OndblLevel5Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblRate5", DbType:="Money NOT NULL")>  _
	Public Property dblRate5() As Decimal
		Get
			Return Me._dblRate5
		End Get
		Set
			If ((Me._dblRate5 = value)  _
						= false) Then
				Me.OndblRate5Changing(value)
				Me.SendPropertyChanging
				Me._dblRate5 = value
				Me.SendPropertyChanged("dblRate5")
				Me.OndblRate5Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblLevel6", DbType:="Money NOT NULL")>  _
	Public Property dblLevel6() As Decimal
		Get
			Return Me._dblLevel6
		End Get
		Set
			If ((Me._dblLevel6 = value)  _
						= false) Then
				Me.OndblLevel6Changing(value)
				Me.SendPropertyChanging
				Me._dblLevel6 = value
				Me.SendPropertyChanged("dblLevel6")
				Me.OndblLevel6Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblRate6", DbType:="Money NOT NULL")>  _
	Public Property dblRate6() As Decimal
		Get
			Return Me._dblRate6
		End Get
		Set
			If ((Me._dblRate6 = value)  _
						= false) Then
				Me.OndblRate6Changing(value)
				Me.SendPropertyChanging
				Me._dblRate6 = value
				Me.SendPropertyChanged("dblRate6")
				Me.OndblRate6Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblLevel7", DbType:="Money NOT NULL")>  _
	Public Property dblLevel7() As Decimal
		Get
			Return Me._dblLevel7
		End Get
		Set
			If ((Me._dblLevel7 = value)  _
						= false) Then
				Me.OndblLevel7Changing(value)
				Me.SendPropertyChanging
				Me._dblLevel7 = value
				Me.SendPropertyChanged("dblLevel7")
				Me.OndblLevel7Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblRate7", DbType:="Money NOT NULL")>  _
	Public Property dblRate7() As Decimal
		Get
			Return Me._dblRate7
		End Get
		Set
			If ((Me._dblRate7 = value)  _
						= false) Then
				Me.OndblRate7Changing(value)
				Me.SendPropertyChanging
				Me._dblRate7 = value
				Me.SendPropertyChanged("dblRate7")
				Me.OndblRate7Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblLevel8", DbType:="Money NOT NULL")>  _
	Public Property dblLevel8() As Decimal
		Get
			Return Me._dblLevel8
		End Get
		Set
			If ((Me._dblLevel8 = value)  _
						= false) Then
				Me.OndblLevel8Changing(value)
				Me.SendPropertyChanging
				Me._dblLevel8 = value
				Me.SendPropertyChanged("dblLevel8")
				Me.OndblLevel8Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblRate8", DbType:="Money NOT NULL")>  _
	Public Property dblRate8() As Decimal
		Get
			Return Me._dblRate8
		End Get
		Set
			If ((Me._dblRate8 = value)  _
						= false) Then
				Me.OndblRate8Changing(value)
				Me.SendPropertyChanging
				Me._dblRate8 = value
				Me.SendPropertyChanged("dblRate8")
				Me.OndblRate8Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblLevel9", DbType:="Money NOT NULL")>  _
	Public Property dblLevel9() As Decimal
		Get
			Return Me._dblLevel9
		End Get
		Set
			If ((Me._dblLevel9 = value)  _
						= false) Then
				Me.OndblLevel9Changing(value)
				Me.SendPropertyChanging
				Me._dblLevel9 = value
				Me.SendPropertyChanged("dblLevel9")
				Me.OndblLevel9Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblRate9", DbType:="Money NOT NULL")>  _
	Public Property dblRate9() As Decimal
		Get
			Return Me._dblRate9
		End Get
		Set
			If ((Me._dblRate9 = value)  _
						= false) Then
				Me.OndblRate9Changing(value)
				Me.SendPropertyChanging
				Me._dblRate9 = value
				Me.SendPropertyChanged("dblRate9")
				Me.OndblRate9Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblLevel10", DbType:="Money NOT NULL")>  _
	Public Property dblLevel10() As Decimal
		Get
			Return Me._dblLevel10
		End Get
		Set
			If ((Me._dblLevel10 = value)  _
						= false) Then
				Me.OndblLevel10Changing(value)
				Me.SendPropertyChanging
				Me._dblLevel10 = value
				Me.SendPropertyChanged("dblLevel10")
				Me.OndblLevel10Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblRate10", DbType:="Money NOT NULL")>  _
	Public Property dblRate10() As Decimal
		Get
			Return Me._dblRate10
		End Get
		Set
			If ((Me._dblRate10 = value)  _
						= false) Then
				Me.OndblRate10Changing(value)
				Me.SendPropertyChanging
				Me._dblRate10 = value
				Me.SendPropertyChanged("dblRate10")
				Me.OndblRate10Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblLevel11", DbType:="Money NOT NULL")>  _
	Public Property dblLevel11() As Decimal
		Get
			Return Me._dblLevel11
		End Get
		Set
			If ((Me._dblLevel11 = value)  _
						= false) Then
				Me.OndblLevel11Changing(value)
				Me.SendPropertyChanging
				Me._dblLevel11 = value
				Me.SendPropertyChanged("dblLevel11")
				Me.OndblLevel11Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblRate11", DbType:="Money NOT NULL")>  _
	Public Property dblRate11() As Decimal
		Get
			Return Me._dblRate11
		End Get
		Set
			If ((Me._dblRate11 = value)  _
						= false) Then
				Me.OndblRate11Changing(value)
				Me.SendPropertyChanging
				Me._dblRate11 = value
				Me.SendPropertyChanged("dblRate11")
				Me.OndblRate11Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblLevel12", DbType:="Money NOT NULL")>  _
	Public Property dblLevel12() As Decimal
		Get
			Return Me._dblLevel12
		End Get
		Set
			If ((Me._dblLevel12 = value)  _
						= false) Then
				Me.OndblLevel12Changing(value)
				Me.SendPropertyChanging
				Me._dblLevel12 = value
				Me.SendPropertyChanged("dblLevel12")
				Me.OndblLevel12Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblRate12", DbType:="Money NOT NULL")>  _
	Public Property dblRate12() As Decimal
		Get
			Return Me._dblRate12
		End Get
		Set
			If ((Me._dblRate12 = value)  _
						= false) Then
				Me.OndblRate12Changing(value)
				Me.SendPropertyChanging
				Me._dblRate12 = value
				Me.SendPropertyChanged("dblRate12")
				Me.OndblRate12Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblLevel13", DbType:="Money NOT NULL")>  _
	Public Property dblLevel13() As Decimal
		Get
			Return Me._dblLevel13
		End Get
		Set
			If ((Me._dblLevel13 = value)  _
						= false) Then
				Me.OndblLevel13Changing(value)
				Me.SendPropertyChanging
				Me._dblLevel13 = value
				Me.SendPropertyChanged("dblLevel13")
				Me.OndblLevel13Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblRate13", DbType:="Money NOT NULL")>  _
	Public Property dblRate13() As Decimal
		Get
			Return Me._dblRate13
		End Get
		Set
			If ((Me._dblRate13 = value)  _
						= false) Then
				Me.OndblRate13Changing(value)
				Me.SendPropertyChanging
				Me._dblRate13 = value
				Me.SendPropertyChanged("dblRate13")
				Me.OndblRate13Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblLevel14", DbType:="Money NOT NULL")>  _
	Public Property dblLevel14() As Decimal
		Get
			Return Me._dblLevel14
		End Get
		Set
			If ((Me._dblLevel14 = value)  _
						= false) Then
				Me.OndblLevel14Changing(value)
				Me.SendPropertyChanging
				Me._dblLevel14 = value
				Me.SendPropertyChanged("dblLevel14")
				Me.OndblLevel14Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblRate14", DbType:="Money NOT NULL")>  _
	Public Property dblRate14() As Decimal
		Get
			Return Me._dblRate14
		End Get
		Set
			If ((Me._dblRate14 = value)  _
						= false) Then
				Me.OndblRate14Changing(value)
				Me.SendPropertyChanging
				Me._dblRate14 = value
				Me.SendPropertyChanged("dblRate14")
				Me.OndblRate14Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblLevel15", DbType:="Money NOT NULL")>  _
	Public Property dblLevel15() As Decimal
		Get
			Return Me._dblLevel15
		End Get
		Set
			If ((Me._dblLevel15 = value)  _
						= false) Then
				Me.OndblLevel15Changing(value)
				Me.SendPropertyChanging
				Me._dblLevel15 = value
				Me.SendPropertyChanged("dblLevel15")
				Me.OndblLevel15Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblRate15", DbType:="Money NOT NULL")>  _
	Public Property dblRate15() As Decimal
		Get
			Return Me._dblRate15
		End Get
		Set
			If ((Me._dblRate15 = value)  _
						= false) Then
				Me.OndblRate15Changing(value)
				Me.SendPropertyChanging
				Me._dblRate15 = value
				Me.SendPropertyChanged("dblRate15")
				Me.OndblRate15Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblLevel16", DbType:="Money NOT NULL")>  _
	Public Property dblLevel16() As Decimal
		Get
			Return Me._dblLevel16
		End Get
		Set
			If ((Me._dblLevel16 = value)  _
						= false) Then
				Me.OndblLevel16Changing(value)
				Me.SendPropertyChanging
				Me._dblLevel16 = value
				Me.SendPropertyChanged("dblLevel16")
				Me.OndblLevel16Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblRate16", DbType:="Money NOT NULL")>  _
	Public Property dblRate16() As Decimal
		Get
			Return Me._dblRate16
		End Get
		Set
			If ((Me._dblRate16 = value)  _
						= false) Then
				Me.OndblRate16Changing(value)
				Me.SendPropertyChanging
				Me._dblRate16 = value
				Me.SendPropertyChanged("dblRate16")
				Me.OndblRate16Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblLevel17", DbType:="Money NOT NULL")>  _
	Public Property dblLevel17() As Decimal
		Get
			Return Me._dblLevel17
		End Get
		Set
			If ((Me._dblLevel17 = value)  _
						= false) Then
				Me.OndblLevel17Changing(value)
				Me.SendPropertyChanging
				Me._dblLevel17 = value
				Me.SendPropertyChanged("dblLevel17")
				Me.OndblLevel17Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblRate17", DbType:="Money NOT NULL")>  _
	Public Property dblRate17() As Decimal
		Get
			Return Me._dblRate17
		End Get
		Set
			If ((Me._dblRate17 = value)  _
						= false) Then
				Me.OndblRate17Changing(value)
				Me.SendPropertyChanging
				Me._dblRate17 = value
				Me.SendPropertyChanged("dblRate17")
				Me.OndblRate17Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblLevel18", DbType:="Money NOT NULL")>  _
	Public Property dblLevel18() As Decimal
		Get
			Return Me._dblLevel18
		End Get
		Set
			If ((Me._dblLevel18 = value)  _
						= false) Then
				Me.OndblLevel18Changing(value)
				Me.SendPropertyChanging
				Me._dblLevel18 = value
				Me.SendPropertyChanged("dblLevel18")
				Me.OndblLevel18Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblRate18", DbType:="Money NOT NULL")>  _
	Public Property dblRate18() As Decimal
		Get
			Return Me._dblRate18
		End Get
		Set
			If ((Me._dblRate18 = value)  _
						= false) Then
				Me.OndblRate18Changing(value)
				Me.SendPropertyChanging
				Me._dblRate18 = value
				Me.SendPropertyChanged("dblRate18")
				Me.OndblRate18Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblLevel19", DbType:="Money NOT NULL")>  _
	Public Property dblLevel19() As Decimal
		Get
			Return Me._dblLevel19
		End Get
		Set
			If ((Me._dblLevel19 = value)  _
						= false) Then
				Me.OndblLevel19Changing(value)
				Me.SendPropertyChanging
				Me._dblLevel19 = value
				Me.SendPropertyChanged("dblLevel19")
				Me.OndblLevel19Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblRate19", DbType:="Money NOT NULL")>  _
	Public Property dblRate19() As Decimal
		Get
			Return Me._dblRate19
		End Get
		Set
			If ((Me._dblRate19 = value)  _
						= false) Then
				Me.OndblRate19Changing(value)
				Me.SendPropertyChanging
				Me._dblRate19 = value
				Me.SendPropertyChanged("dblRate19")
				Me.OndblRate19Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblLevel20", DbType:="Money NOT NULL")>  _
	Public Property dblLevel20() As Decimal
		Get
			Return Me._dblLevel20
		End Get
		Set
			If ((Me._dblLevel20 = value)  _
						= false) Then
				Me.OndblLevel20Changing(value)
				Me.SendPropertyChanging
				Me._dblLevel20 = value
				Me.SendPropertyChanged("dblLevel20")
				Me.OndblLevel20Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblRate20", DbType:="Money NOT NULL")>  _
	Public Property dblRate20() As Decimal
		Get
			Return Me._dblRate20
		End Get
		Set
			If ((Me._dblRate20 = value)  _
						= false) Then
				Me.OndblRate20Changing(value)
				Me.SendPropertyChanging
				Me._dblRate20 = value
				Me.SendPropertyChanged("dblRate20")
				Me.OndblRate20Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lngPriority", DbType:="Int NOT NULL")>  _
	Public Property lngPriority() As Integer
		Get
			Return Me._lngPriority
		End Get
		Set
			If ((Me._lngPriority = value)  _
						= false) Then
				Me.OnlngPriorityChanging(value)
				Me.SendPropertyChanging
				Me._lngPriority = value
				Me.SendPropertyChanged("lngPriority")
				Me.OnlngPriorityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dblJobCostRate", DbType:="Money NOT NULL")>  _
	Public Property dblJobCostRate() As Decimal
		Get
			Return Me._dblJobCostRate
		End Get
		Set
			If ((Me._dblJobCostRate = value)  _
						= false) Then
				Me.OndblJobCostRateChanging(value)
				Me.SendPropertyChanging
				Me._dblJobCostRate = value
				Me.SendPropertyChanged("dblJobCostRate")
				Me.OndblJobCostRateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExpireDate", DbType:="DateTime NOT NULL")>  _
	Public Property ExpireDate() As Date
		Get
			Return Me._ExpireDate
		End Get
		Set
			If ((Me._ExpireDate = value)  _
						= false) Then
				Me.OnExpireDateChanging(value)
				Me.SendPropertyChanging
				Me._ExpireDate = value
				Me.SendPropertyChanged("ExpireDate")
				Me.OnExpireDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tEmployee")>  _
Partial Public Class tEmployee
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _sName As String
	
	Private _Address As String
	
	Private _CityStateZip As String
	
	Private _Phone As String
	
	Private _SS As String
	
	Private _Claims As String
	
	Private _Status As String
	
	Private _Insurance As String
	
	Private _nickname As String
	
	Private _sequence As Integer
	
	Private _archive As Boolean
	
	Private _email As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnsNameChanging(value As String)
    End Sub
    Partial Private Sub OnsNameChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnCityStateZipChanging(value As String)
    End Sub
    Partial Private Sub OnCityStateZipChanged()
    End Sub
    Partial Private Sub OnPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneChanged()
    End Sub
    Partial Private Sub OnSSChanging(value As String)
    End Sub
    Partial Private Sub OnSSChanged()
    End Sub
    Partial Private Sub OnClaimsChanging(value As String)
    End Sub
    Partial Private Sub OnClaimsChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnInsuranceChanging(value As String)
    End Sub
    Partial Private Sub OnInsuranceChanged()
    End Sub
    Partial Private Sub OnnicknameChanging(value As String)
    End Sub
    Partial Private Sub OnnicknameChanged()
    End Sub
    Partial Private Sub OnsequenceChanging(value As Integer)
    End Sub
    Partial Private Sub OnsequenceChanged()
    End Sub
    Partial Private Sub OnarchiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnarchiveChanged()
    End Sub
    Partial Private Sub OnemailChanging(value As String)
    End Sub
    Partial Private Sub OnemailChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property sName() As String
		Get
			Return Me._sName
		End Get
		Set
			If (String.Equals(Me._sName, value) = false) Then
				Me.OnsNameChanging(value)
				Me.SendPropertyChanging
				Me._sName = value
				Me.SendPropertyChanged("sName")
				Me.OnsNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CityStateZip", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CityStateZip() As String
		Get
			Return Me._CityStateZip
		End Get
		Set
			If (String.Equals(Me._CityStateZip, value) = false) Then
				Me.OnCityStateZipChanging(value)
				Me.SendPropertyChanging
				Me._CityStateZip = value
				Me.SendPropertyChanged("CityStateZip")
				Me.OnCityStateZipChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, value) = false) Then
				Me.OnPhoneChanging(value)
				Me.SendPropertyChanging
				Me._Phone = value
				Me.SendPropertyChanged("Phone")
				Me.OnPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SS", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property SS() As String
		Get
			Return Me._SS
		End Get
		Set
			If (String.Equals(Me._SS, value) = false) Then
				Me.OnSSChanging(value)
				Me.SendPropertyChanging
				Me._SS = value
				Me.SendPropertyChanged("SS")
				Me.OnSSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Claims", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Claims() As String
		Get
			Return Me._Claims
		End Get
		Set
			If (String.Equals(Me._Claims, value) = false) Then
				Me.OnClaimsChanging(value)
				Me.SendPropertyChanging
				Me._Claims = value
				Me.SendPropertyChanged("Claims")
				Me.OnClaimsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Insurance", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Insurance() As String
		Get
			Return Me._Insurance
		End Get
		Set
			If (String.Equals(Me._Insurance, value) = false) Then
				Me.OnInsuranceChanging(value)
				Me.SendPropertyChanging
				Me._Insurance = value
				Me.SendPropertyChanged("Insurance")
				Me.OnInsuranceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nickname", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property nickname() As String
		Get
			Return Me._nickname
		End Get
		Set
			If (String.Equals(Me._nickname, value) = false) Then
				Me.OnnicknameChanging(value)
				Me.SendPropertyChanging
				Me._nickname = value
				Me.SendPropertyChanged("nickname")
				Me.OnnicknameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sequence", DbType:="Int NOT NULL")>  _
	Public Property sequence() As Integer
		Get
			Return Me._sequence
		End Get
		Set
			If ((Me._sequence = value)  _
						= false) Then
				Me.OnsequenceChanging(value)
				Me.SendPropertyChanging
				Me._sequence = value
				Me.SendPropertyChanged("sequence")
				Me.OnsequenceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_archive", DbType:="Bit NOT NULL")>  _
	Public Property archive() As Boolean
		Get
			Return Me._archive
		End Get
		Set
			If ((Me._archive = value)  _
						= false) Then
				Me.OnarchiveChanging(value)
				Me.SendPropertyChanging
				Me._archive = value
				Me.SendPropertyChanged("archive")
				Me.OnarchiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me.OnemailChanging(value)
				Me.SendPropertyChanging
				Me._email = value
				Me.SendPropertyChanged("email")
				Me.OnemailChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblCWPackage")>  _
Partial Public Class tblCWPackage
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _cwref As String
	
	Private _shopno As String
	
	Private _pkgno As String
	
	Private _serialno As String
	
	Private _shipdata As String
	
	Private _dlrpo As String
	
	Private _fbo As String
	
	Private _shipvia As String
	
	Private _width As Decimal
	
	Private _height As Decimal
	
	Private _depth As Decimal
	
	Private _dateImported As Date
	
	Private _dateReceived As System.Nullable(Of Date)
	
	Private _dateDelivered As System.Nullable(Of Date)
	
	Private _other As String
	
	Private _tblCWPackageContents As EntitySet(Of tblCWPackageContent)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OncwrefChanging(value As String)
    End Sub
    Partial Private Sub OncwrefChanged()
    End Sub
    Partial Private Sub OnshopnoChanging(value As String)
    End Sub
    Partial Private Sub OnshopnoChanged()
    End Sub
    Partial Private Sub OnpkgnoChanging(value As String)
    End Sub
    Partial Private Sub OnpkgnoChanged()
    End Sub
    Partial Private Sub OnserialnoChanging(value As String)
    End Sub
    Partial Private Sub OnserialnoChanged()
    End Sub
    Partial Private Sub OnshipdataChanging(value As String)
    End Sub
    Partial Private Sub OnshipdataChanged()
    End Sub
    Partial Private Sub OndlrpoChanging(value As String)
    End Sub
    Partial Private Sub OndlrpoChanged()
    End Sub
    Partial Private Sub OnfboChanging(value As String)
    End Sub
    Partial Private Sub OnfboChanged()
    End Sub
    Partial Private Sub OnshipviaChanging(value As String)
    End Sub
    Partial Private Sub OnshipviaChanged()
    End Sub
    Partial Private Sub OnwidthChanging(value As Decimal)
    End Sub
    Partial Private Sub OnwidthChanged()
    End Sub
    Partial Private Sub OnheightChanging(value As Decimal)
    End Sub
    Partial Private Sub OnheightChanged()
    End Sub
    Partial Private Sub OndepthChanging(value As Decimal)
    End Sub
    Partial Private Sub OndepthChanged()
    End Sub
    Partial Private Sub OndateImportedChanging(value As Date)
    End Sub
    Partial Private Sub OndateImportedChanged()
    End Sub
    Partial Private Sub OndateReceivedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndateReceivedChanged()
    End Sub
    Partial Private Sub OndateDeliveredChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndateDeliveredChanged()
    End Sub
    Partial Private Sub OnotherChanging(value As String)
    End Sub
    Partial Private Sub OnotherChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblCWPackageContents = New EntitySet(Of tblCWPackageContent)(AddressOf Me.attach_tblCWPackageContents, AddressOf Me.detach_tblCWPackageContents)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cwref", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property cwref() As String
		Get
			Return Me._cwref
		End Get
		Set
			If (String.Equals(Me._cwref, value) = false) Then
				Me.OncwrefChanging(value)
				Me.SendPropertyChanging
				Me._cwref = value
				Me.SendPropertyChanged("cwref")
				Me.OncwrefChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shopno", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property shopno() As String
		Get
			Return Me._shopno
		End Get
		Set
			If (String.Equals(Me._shopno, value) = false) Then
				Me.OnshopnoChanging(value)
				Me.SendPropertyChanging
				Me._shopno = value
				Me.SendPropertyChanged("shopno")
				Me.OnshopnoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pkgno", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property pkgno() As String
		Get
			Return Me._pkgno
		End Get
		Set
			If (String.Equals(Me._pkgno, value) = false) Then
				Me.OnpkgnoChanging(value)
				Me.SendPropertyChanging
				Me._pkgno = value
				Me.SendPropertyChanged("pkgno")
				Me.OnpkgnoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_serialno", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property serialno() As String
		Get
			Return Me._serialno
		End Get
		Set
			If (String.Equals(Me._serialno, value) = false) Then
				Me.OnserialnoChanging(value)
				Me.SendPropertyChanging
				Me._serialno = value
				Me.SendPropertyChanged("serialno")
				Me.OnserialnoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shipdata", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property shipdata() As String
		Get
			Return Me._shipdata
		End Get
		Set
			If (String.Equals(Me._shipdata, value) = false) Then
				Me.OnshipdataChanging(value)
				Me.SendPropertyChanging
				Me._shipdata = value
				Me.SendPropertyChanged("shipdata")
				Me.OnshipdataChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dlrpo", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property dlrpo() As String
		Get
			Return Me._dlrpo
		End Get
		Set
			If (String.Equals(Me._dlrpo, value) = false) Then
				Me.OndlrpoChanging(value)
				Me.SendPropertyChanging
				Me._dlrpo = value
				Me.SendPropertyChanged("dlrpo")
				Me.OndlrpoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fbo", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property fbo() As String
		Get
			Return Me._fbo
		End Get
		Set
			If (String.Equals(Me._fbo, value) = false) Then
				Me.OnfboChanging(value)
				Me.SendPropertyChanging
				Me._fbo = value
				Me.SendPropertyChanged("fbo")
				Me.OnfboChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shipvia", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property shipvia() As String
		Get
			Return Me._shipvia
		End Get
		Set
			If (String.Equals(Me._shipvia, value) = false) Then
				Me.OnshipviaChanging(value)
				Me.SendPropertyChanging
				Me._shipvia = value
				Me.SendPropertyChanged("shipvia")
				Me.OnshipviaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_width", DbType:="Decimal(18,0) NOT NULL")>  _
	Public Property width() As Decimal
		Get
			Return Me._width
		End Get
		Set
			If ((Me._width = value)  _
						= false) Then
				Me.OnwidthChanging(value)
				Me.SendPropertyChanging
				Me._width = value
				Me.SendPropertyChanged("width")
				Me.OnwidthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_height", DbType:="Decimal(18,0) NOT NULL")>  _
	Public Property height() As Decimal
		Get
			Return Me._height
		End Get
		Set
			If ((Me._height = value)  _
						= false) Then
				Me.OnheightChanging(value)
				Me.SendPropertyChanging
				Me._height = value
				Me.SendPropertyChanged("height")
				Me.OnheightChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_depth", DbType:="Decimal(18,0) NOT NULL")>  _
	Public Property depth() As Decimal
		Get
			Return Me._depth
		End Get
		Set
			If ((Me._depth = value)  _
						= false) Then
				Me.OndepthChanging(value)
				Me.SendPropertyChanging
				Me._depth = value
				Me.SendPropertyChanged("depth")
				Me.OndepthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateImported", DbType:="DateTime NOT NULL")>  _
	Public Property dateImported() As Date
		Get
			Return Me._dateImported
		End Get
		Set
			If ((Me._dateImported = value)  _
						= false) Then
				Me.OndateImportedChanging(value)
				Me.SendPropertyChanging
				Me._dateImported = value
				Me.SendPropertyChanged("dateImported")
				Me.OndateImportedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateReceived", DbType:="DateTime")>  _
	Public Property dateReceived() As System.Nullable(Of Date)
		Get
			Return Me._dateReceived
		End Get
		Set
			If (Me._dateReceived.Equals(value) = false) Then
				Me.OndateReceivedChanging(value)
				Me.SendPropertyChanging
				Me._dateReceived = value
				Me.SendPropertyChanged("dateReceived")
				Me.OndateReceivedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateDelivered", DbType:="DateTime")>  _
	Public Property dateDelivered() As System.Nullable(Of Date)
		Get
			Return Me._dateDelivered
		End Get
		Set
			If (Me._dateDelivered.Equals(value) = false) Then
				Me.OndateDeliveredChanging(value)
				Me.SendPropertyChanging
				Me._dateDelivered = value
				Me.SendPropertyChanged("dateDelivered")
				Me.OndateDeliveredChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_other", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property other() As String
		Get
			Return Me._other
		End Get
		Set
			If (String.Equals(Me._other, value) = false) Then
				Me.OnotherChanging(value)
				Me.SendPropertyChanging
				Me._other = value
				Me.SendPropertyChanged("other")
				Me.OnotherChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblCWPackage_tblCWPackageContent", Storage:="_tblCWPackageContents", ThisKey:="serialno", OtherKey:="pkgserial")>  _
	Public Property tblCWPackageContents() As EntitySet(Of tblCWPackageContent)
		Get
			Return Me._tblCWPackageContents
		End Get
		Set
			Me._tblCWPackageContents.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblCWPackageContents(ByVal entity As tblCWPackageContent)
		Me.SendPropertyChanging
		entity.tblCWPackage = Me
	End Sub
	
	Private Sub detach_tblCWPackageContents(ByVal entity As tblCWPackageContent)
		Me.SendPropertyChanging
		entity.tblCWPackage = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblCWPackageContents")>  _
Partial Public Class tblCWPackageContent
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _gid As System.Guid
	
	Private _pkgserial As String
	
	Private _cabno As String
	
	Private _serialno As String
	
	Private _fdesc As String
	
	Private _qty As String
	
	Private _width As Decimal
	
	Private _height As Decimal
	
	Private _depth As Decimal
	
	Private _material As String
	
	Private _dateImported As Date
	
	Private _tblCWPackage As EntityRef(Of tblCWPackage)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OngidChanging(value As System.Guid)
    End Sub
    Partial Private Sub OngidChanged()
    End Sub
    Partial Private Sub OnpkgserialChanging(value As String)
    End Sub
    Partial Private Sub OnpkgserialChanged()
    End Sub
    Partial Private Sub OncabnoChanging(value As String)
    End Sub
    Partial Private Sub OncabnoChanged()
    End Sub
    Partial Private Sub OnserialnoChanging(value As String)
    End Sub
    Partial Private Sub OnserialnoChanged()
    End Sub
    Partial Private Sub OnfdescChanging(value As String)
    End Sub
    Partial Private Sub OnfdescChanged()
    End Sub
    Partial Private Sub OnqtyChanging(value As String)
    End Sub
    Partial Private Sub OnqtyChanged()
    End Sub
    Partial Private Sub OnwidthChanging(value As Decimal)
    End Sub
    Partial Private Sub OnwidthChanged()
    End Sub
    Partial Private Sub OnheightChanging(value As Decimal)
    End Sub
    Partial Private Sub OnheightChanged()
    End Sub
    Partial Private Sub OndepthChanging(value As Decimal)
    End Sub
    Partial Private Sub OndepthChanged()
    End Sub
    Partial Private Sub OnmaterialChanging(value As String)
    End Sub
    Partial Private Sub OnmaterialChanged()
    End Sub
    Partial Private Sub OndateImportedChanging(value As Date)
    End Sub
    Partial Private Sub OndateImportedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblCWPackage = CType(Nothing, EntityRef(Of tblCWPackage))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gid", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property gid() As System.Guid
		Get
			Return Me._gid
		End Get
		Set
			If ((Me._gid = value)  _
						= false) Then
				Me.OngidChanging(value)
				Me.SendPropertyChanging
				Me._gid = value
				Me.SendPropertyChanged("gid")
				Me.OngidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pkgserial", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property pkgserial() As String
		Get
			Return Me._pkgserial
		End Get
		Set
			If (String.Equals(Me._pkgserial, value) = false) Then
				If Me._tblCWPackage.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnpkgserialChanging(value)
				Me.SendPropertyChanging
				Me._pkgserial = value
				Me.SendPropertyChanged("pkgserial")
				Me.OnpkgserialChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cabno", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property cabno() As String
		Get
			Return Me._cabno
		End Get
		Set
			If (String.Equals(Me._cabno, value) = false) Then
				Me.OncabnoChanging(value)
				Me.SendPropertyChanging
				Me._cabno = value
				Me.SendPropertyChanged("cabno")
				Me.OncabnoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_serialno", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property serialno() As String
		Get
			Return Me._serialno
		End Get
		Set
			If (String.Equals(Me._serialno, value) = false) Then
				Me.OnserialnoChanging(value)
				Me.SendPropertyChanging
				Me._serialno = value
				Me.SendPropertyChanged("serialno")
				Me.OnserialnoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fdesc", DbType:="VarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property fdesc() As String
		Get
			Return Me._fdesc
		End Get
		Set
			If (String.Equals(Me._fdesc, value) = false) Then
				Me.OnfdescChanging(value)
				Me.SendPropertyChanging
				Me._fdesc = value
				Me.SendPropertyChanged("fdesc")
				Me.OnfdescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_qty", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property qty() As String
		Get
			Return Me._qty
		End Get
		Set
			If (String.Equals(Me._qty, value) = false) Then
				Me.OnqtyChanging(value)
				Me.SendPropertyChanging
				Me._qty = value
				Me.SendPropertyChanged("qty")
				Me.OnqtyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_width", DbType:="Decimal(18,0) NOT NULL")>  _
	Public Property width() As Decimal
		Get
			Return Me._width
		End Get
		Set
			If ((Me._width = value)  _
						= false) Then
				Me.OnwidthChanging(value)
				Me.SendPropertyChanging
				Me._width = value
				Me.SendPropertyChanged("width")
				Me.OnwidthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_height", DbType:="Decimal(18,0) NOT NULL")>  _
	Public Property height() As Decimal
		Get
			Return Me._height
		End Get
		Set
			If ((Me._height = value)  _
						= false) Then
				Me.OnheightChanging(value)
				Me.SendPropertyChanging
				Me._height = value
				Me.SendPropertyChanged("height")
				Me.OnheightChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_depth", DbType:="Decimal(18,0) NOT NULL")>  _
	Public Property depth() As Decimal
		Get
			Return Me._depth
		End Get
		Set
			If ((Me._depth = value)  _
						= false) Then
				Me.OndepthChanging(value)
				Me.SendPropertyChanging
				Me._depth = value
				Me.SendPropertyChanged("depth")
				Me.OndepthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_material", DbType:="VarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property material() As String
		Get
			Return Me._material
		End Get
		Set
			If (String.Equals(Me._material, value) = false) Then
				Me.OnmaterialChanging(value)
				Me.SendPropertyChanging
				Me._material = value
				Me.SendPropertyChanged("material")
				Me.OnmaterialChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateImported", DbType:="DateTime NOT NULL")>  _
	Public Property dateImported() As Date
		Get
			Return Me._dateImported
		End Get
		Set
			If ((Me._dateImported = value)  _
						= false) Then
				Me.OndateImportedChanging(value)
				Me.SendPropertyChanging
				Me._dateImported = value
				Me.SendPropertyChanged("dateImported")
				Me.OndateImportedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblCWPackage_tblCWPackageContent", Storage:="_tblCWPackage", ThisKey:="pkgserial", OtherKey:="serialno", IsForeignKey:=true)>  _
	Public Property tblCWPackage() As tblCWPackage
		Get
			Return Me._tblCWPackage.Entity
		End Get
		Set
			Dim previousValue As tblCWPackage = Me._tblCWPackage.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblCWPackage.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblCWPackage.Entity = Nothing
					previousValue.tblCWPackageContents.Remove(Me)
				End If
				Me._tblCWPackage.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblCWPackageContents.Add(Me)
					Me._pkgserial = value.serialno
				Else
					Me._pkgserial = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("tblCWPackage")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblJobActivity")>  _
Partial Public Class tblJobActivity
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _gID As System.Guid
	
	Private _nJobID As Decimal
	
	Private _dateEntered As Date
	
	Private _ActivityType As String
	
	Private _ActivityDetail As String
	
	Private _Other As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OngIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OngIDChanged()
    End Sub
    Partial Private Sub OnnJobIDChanging(value As Decimal)
    End Sub
    Partial Private Sub OnnJobIDChanged()
    End Sub
    Partial Private Sub OndateEnteredChanging(value As Date)
    End Sub
    Partial Private Sub OndateEnteredChanged()
    End Sub
    Partial Private Sub OnActivityTypeChanging(value As String)
    End Sub
    Partial Private Sub OnActivityTypeChanged()
    End Sub
    Partial Private Sub OnActivityDetailChanging(value As String)
    End Sub
    Partial Private Sub OnActivityDetailChanged()
    End Sub
    Partial Private Sub OnOtherChanging(value As String)
    End Sub
    Partial Private Sub OnOtherChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property gID() As System.Guid
		Get
			Return Me._gID
		End Get
		Set
			If ((Me._gID = value)  _
						= false) Then
				Me.OngIDChanging(value)
				Me.SendPropertyChanging
				Me._gID = value
				Me.SendPropertyChanged("gID")
				Me.OngIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nJobID", DbType:="Decimal(18,0) NOT NULL")>  _
	Public Property nJobID() As Decimal
		Get
			Return Me._nJobID
		End Get
		Set
			If ((Me._nJobID = value)  _
						= false) Then
				Me.OnnJobIDChanging(value)
				Me.SendPropertyChanging
				Me._nJobID = value
				Me.SendPropertyChanged("nJobID")
				Me.OnnJobIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateEntered", DbType:="DateTime NOT NULL")>  _
	Public Property dateEntered() As Date
		Get
			Return Me._dateEntered
		End Get
		Set
			If ((Me._dateEntered = value)  _
						= false) Then
				Me.OndateEnteredChanging(value)
				Me.SendPropertyChanging
				Me._dateEntered = value
				Me.SendPropertyChanged("dateEntered")
				Me.OndateEnteredChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActivityType", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ActivityType() As String
		Get
			Return Me._ActivityType
		End Get
		Set
			If (String.Equals(Me._ActivityType, value) = false) Then
				Me.OnActivityTypeChanging(value)
				Me.SendPropertyChanging
				Me._ActivityType = value
				Me.SendPropertyChanged("ActivityType")
				Me.OnActivityTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActivityDetail", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property ActivityDetail() As String
		Get
			Return Me._ActivityDetail
		End Get
		Set
			If (String.Equals(Me._ActivityDetail, value) = false) Then
				Me.OnActivityDetailChanging(value)
				Me.SendPropertyChanging
				Me._ActivityDetail = value
				Me.SendPropertyChanged("ActivityDetail")
				Me.OnActivityDetailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Other", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property Other() As String
		Get
			Return Me._Other
		End Get
		Set
			If (String.Equals(Me._Other, value) = false) Then
				Me.OnOtherChanging(value)
				Me.SendPropertyChanging
				Me._Other = value
				Me.SendPropertyChanged("Other")
				Me.OnOtherChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblJobTax")>  _
Partial Public Class tblJobTax
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _nJobID As Integer
	
	Private _TaxName As String
	
	Private _TaxPercent As Decimal
	
	Private _TaxCode As Integer
	
	Private _tJob As EntityRef(Of tJob)
	
	Private _tblTaxDistrict As EntityRef(Of tblTaxDistrict)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnnJobIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnnJobIDChanged()
    End Sub
    Partial Private Sub OnTaxNameChanging(value As String)
    End Sub
    Partial Private Sub OnTaxNameChanged()
    End Sub
    Partial Private Sub OnTaxPercentChanging(value As Decimal)
    End Sub
    Partial Private Sub OnTaxPercentChanged()
    End Sub
    Partial Private Sub OnTaxCodeChanging(value As Integer)
    End Sub
    Partial Private Sub OnTaxCodeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tJob = CType(Nothing, EntityRef(Of tJob))
		Me._tblTaxDistrict = CType(Nothing, EntityRef(Of tblTaxDistrict))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nJobID", DbType:="Int NOT NULL")>  _
	Public Property nJobID() As Integer
		Get
			Return Me._nJobID
		End Get
		Set
			If ((Me._nJobID = value)  _
						= false) Then
				If Me._tJob.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnnJobIDChanging(value)
				Me.SendPropertyChanging
				Me._nJobID = value
				Me.SendPropertyChanged("nJobID")
				Me.OnnJobIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TaxName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TaxName() As String
		Get
			Return Me._TaxName
		End Get
		Set
			If (String.Equals(Me._TaxName, value) = false) Then
				If Me._tblTaxDistrict.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTaxNameChanging(value)
				Me.SendPropertyChanging
				Me._TaxName = value
				Me.SendPropertyChanged("TaxName")
				Me.OnTaxNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TaxPercent", DbType:="Decimal(14,4) NOT NULL")>  _
	Public Property TaxPercent() As Decimal
		Get
			Return Me._TaxPercent
		End Get
		Set
			If ((Me._TaxPercent = value)  _
						= false) Then
				Me.OnTaxPercentChanging(value)
				Me.SendPropertyChanging
				Me._TaxPercent = value
				Me.SendPropertyChanged("TaxPercent")
				Me.OnTaxPercentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TaxCode", DbType:="Int NOT NULL")>  _
	Public Property TaxCode() As Integer
		Get
			Return Me._TaxCode
		End Get
		Set
			If ((Me._TaxCode = value)  _
						= false) Then
				Me.OnTaxCodeChanging(value)
				Me.SendPropertyChanging
				Me._TaxCode = value
				Me.SendPropertyChanged("TaxCode")
				Me.OnTaxCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tJob_tblJobTax", Storage:="_tJob", ThisKey:="nJobID", OtherKey:="nID", IsForeignKey:=true)>  _
	Public Property tJob() As tJob
		Get
			Return Me._tJob.Entity
		End Get
		Set
			Dim previousValue As tJob = Me._tJob.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tJob.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tJob.Entity = Nothing
					previousValue.tblJobTaxes.Remove(Me)
				End If
				Me._tJob.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblJobTaxes.Add(Me)
					Me._nJobID = value.nID
				Else
					Me._nJobID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tJob")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblTaxDistrict_tblJobTax", Storage:="_tblTaxDistrict", ThisKey:="TaxName", OtherKey:="RateName", IsForeignKey:=true)>  _
	Public Property tblTaxDistrict() As tblTaxDistrict
		Get
			Return Me._tblTaxDistrict.Entity
		End Get
		Set
			Dim previousValue As tblTaxDistrict = Me._tblTaxDistrict.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblTaxDistrict.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblTaxDistrict.Entity = Nothing
					previousValue.tblJobTaxes.Remove(Me)
				End If
				Me._tblTaxDistrict.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblJobTaxes.Add(Me)
					Me._TaxName = value.RateName
				Else
					Me._TaxName = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("tblTaxDistrict")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tUserPrefrences")>  _
Partial Public Class tUserPrefrence
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _AttributeName As String
	
	Private _Value As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnAttributeNameChanging(value As String)
    End Sub
    Partial Private Sub OnAttributeNameChanged()
    End Sub
    Partial Private Sub OnValueChanging(value As String)
    End Sub
    Partial Private Sub OnValueChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AttributeName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property AttributeName() As String
		Get
			Return Me._AttributeName
		End Get
		Set
			If (String.Equals(Me._AttributeName, value) = false) Then
				Me.OnAttributeNameChanging(value)
				Me.SendPropertyChanging
				Me._AttributeName = value
				Me.SendPropertyChanged("AttributeName")
				Me.OnAttributeNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Value", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Value() As String
		Get
			Return Me._Value
		End Get
		Set
			If (String.Equals(Me._Value, value) = false) Then
				Me.OnValueChanging(value)
				Me.SendPropertyChanging
				Me._Value = value
				Me.SendPropertyChanged("Value")
				Me.OnValueChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tPayments")>  _
Partial Public Class tPayment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _nID As Integer
	
	Private _JOBID As Integer
	
	Private _dDate As Date
	
	Private _nAmount As Decimal
	
	Private _salesnickname As String
	
	Private _tJob As EntityRef(Of tJob)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnnIDChanged()
    End Sub
    Partial Private Sub OnJOBIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnJOBIDChanged()
    End Sub
    Partial Private Sub OndDateChanging(value As Date)
    End Sub
    Partial Private Sub OndDateChanged()
    End Sub
    Partial Private Sub OnnAmountChanging(value As Decimal)
    End Sub
    Partial Private Sub OnnAmountChanged()
    End Sub
    Partial Private Sub OnsalesnicknameChanging(value As String)
    End Sub
    Partial Private Sub OnsalesnicknameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tJob = CType(Nothing, EntityRef(Of tJob))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property nID() As Integer
		Get
			Return Me._nID
		End Get
		Set
			If ((Me._nID = value)  _
						= false) Then
				Me.OnnIDChanging(value)
				Me.SendPropertyChanging
				Me._nID = value
				Me.SendPropertyChanged("nID")
				Me.OnnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_JOBID", DbType:="Int NOT NULL")>  _
	Public Property JOBID() As Integer
		Get
			Return Me._JOBID
		End Get
		Set
			If ((Me._JOBID = value)  _
						= false) Then
				If Me._tJob.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnJOBIDChanging(value)
				Me.SendPropertyChanging
				Me._JOBID = value
				Me.SendPropertyChanged("JOBID")
				Me.OnJOBIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dDate", DbType:="SmallDateTime NOT NULL")>  _
	Public Property dDate() As Date
		Get
			Return Me._dDate
		End Get
		Set
			If ((Me._dDate = value)  _
						= false) Then
				Me.OndDateChanging(value)
				Me.SendPropertyChanging
				Me._dDate = value
				Me.SendPropertyChanged("dDate")
				Me.OndDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nAmount", DbType:="Money NOT NULL")>  _
	Public Property nAmount() As Decimal
		Get
			Return Me._nAmount
		End Get
		Set
			If ((Me._nAmount = value)  _
						= false) Then
				Me.OnnAmountChanging(value)
				Me.SendPropertyChanging
				Me._nAmount = value
				Me.SendPropertyChanged("nAmount")
				Me.OnnAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_salesnickname", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property salesnickname() As String
		Get
			Return Me._salesnickname
		End Get
		Set
			If (String.Equals(Me._salesnickname, value) = false) Then
				Me.OnsalesnicknameChanging(value)
				Me.SendPropertyChanging
				Me._salesnickname = value
				Me.SendPropertyChanged("salesnickname")
				Me.OnsalesnicknameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tJob_tPayment", Storage:="_tJob", ThisKey:="JOBID", OtherKey:="nID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property tJob() As tJob
		Get
			Return Me._tJob.Entity
		End Get
		Set
			Dim previousValue As tJob = Me._tJob.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tJob.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tJob.Entity = Nothing
					previousValue.tPayments.Remove(Me)
				End If
				Me._tJob.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tPayments.Add(Me)
					Me._JOBID = value.nID
				Else
					Me._JOBID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tJob")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblTrailerHeader")>  _
Partial Public Class tblTrailerHeader
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PalletNum As String
	
	Private _SO As Decimal
	
	Private _PO As String
	
	Private _ShipDate As System.Nullable(Of Date)
	
	Private _TrailerControl As Decimal
	
	Private _FreightTermsCode As String
	
	Private _FreightCode As String
	
	Private _ShipType As Decimal
	
	Private _TrailerNumber As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPalletNumChanging(value As String)
    End Sub
    Partial Private Sub OnPalletNumChanged()
    End Sub
    Partial Private Sub OnSOChanging(value As Decimal)
    End Sub
    Partial Private Sub OnSOChanged()
    End Sub
    Partial Private Sub OnPOChanging(value As String)
    End Sub
    Partial Private Sub OnPOChanged()
    End Sub
    Partial Private Sub OnShipDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnShipDateChanged()
    End Sub
    Partial Private Sub OnTrailerControlChanging(value As Decimal)
    End Sub
    Partial Private Sub OnTrailerControlChanged()
    End Sub
    Partial Private Sub OnFreightTermsCodeChanging(value As String)
    End Sub
    Partial Private Sub OnFreightTermsCodeChanged()
    End Sub
    Partial Private Sub OnFreightCodeChanging(value As String)
    End Sub
    Partial Private Sub OnFreightCodeChanged()
    End Sub
    Partial Private Sub OnShipTypeChanging(value As Decimal)
    End Sub
    Partial Private Sub OnShipTypeChanged()
    End Sub
    Partial Private Sub OnTrailerNumberChanging(value As String)
    End Sub
    Partial Private Sub OnTrailerNumberChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PalletNum", DbType:="VarChar(30) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property PalletNum() As String
		Get
			Return Me._PalletNum
		End Get
		Set
			If (String.Equals(Me._PalletNum, value) = false) Then
				Me.OnPalletNumChanging(value)
				Me.SendPropertyChanging
				Me._PalletNum = value
				Me.SendPropertyChanged("PalletNum")
				Me.OnPalletNumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SO", DbType:="Decimal(18,0) NOT NULL")>  _
	Public Property SO() As Decimal
		Get
			Return Me._SO
		End Get
		Set
			If ((Me._SO = value)  _
						= false) Then
				Me.OnSOChanging(value)
				Me.SendPropertyChanging
				Me._SO = value
				Me.SendPropertyChanged("SO")
				Me.OnSOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PO", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property PO() As String
		Get
			Return Me._PO
		End Get
		Set
			If (String.Equals(Me._PO, value) = false) Then
				Me.OnPOChanging(value)
				Me.SendPropertyChanging
				Me._PO = value
				Me.SendPropertyChanged("PO")
				Me.OnPOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipDate", DbType:="DateTime")>  _
	Public Property ShipDate() As System.Nullable(Of Date)
		Get
			Return Me._ShipDate
		End Get
		Set
			If (Me._ShipDate.Equals(value) = false) Then
				Me.OnShipDateChanging(value)
				Me.SendPropertyChanging
				Me._ShipDate = value
				Me.SendPropertyChanged("ShipDate")
				Me.OnShipDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TrailerControl", DbType:="Decimal(18,0) NOT NULL")>  _
	Public Property TrailerControl() As Decimal
		Get
			Return Me._TrailerControl
		End Get
		Set
			If ((Me._TrailerControl = value)  _
						= false) Then
				Me.OnTrailerControlChanging(value)
				Me.SendPropertyChanging
				Me._TrailerControl = value
				Me.SendPropertyChanged("TrailerControl")
				Me.OnTrailerControlChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FreightTermsCode", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property FreightTermsCode() As String
		Get
			Return Me._FreightTermsCode
		End Get
		Set
			If (String.Equals(Me._FreightTermsCode, value) = false) Then
				Me.OnFreightTermsCodeChanging(value)
				Me.SendPropertyChanging
				Me._FreightTermsCode = value
				Me.SendPropertyChanged("FreightTermsCode")
				Me.OnFreightTermsCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FreightCode", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property FreightCode() As String
		Get
			Return Me._FreightCode
		End Get
		Set
			If (String.Equals(Me._FreightCode, value) = false) Then
				Me.OnFreightCodeChanging(value)
				Me.SendPropertyChanging
				Me._FreightCode = value
				Me.SendPropertyChanged("FreightCode")
				Me.OnFreightCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipType", DbType:="Decimal(18,0) NOT NULL")>  _
	Public Property ShipType() As Decimal
		Get
			Return Me._ShipType
		End Get
		Set
			If ((Me._ShipType = value)  _
						= false) Then
				Me.OnShipTypeChanging(value)
				Me.SendPropertyChanging
				Me._ShipType = value
				Me.SendPropertyChanged("ShipType")
				Me.OnShipTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TrailerNumber", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property TrailerNumber() As String
		Get
			Return Me._TrailerNumber
		End Get
		Set
			If (String.Equals(Me._TrailerNumber, value) = false) Then
				Me.OnTrailerNumberChanging(value)
				Me.SendPropertyChanging
				Me._TrailerNumber = value
				Me.SendPropertyChanged("TrailerNumber")
				Me.OnTrailerNumberChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblTrailerDetail")>  _
Partial Public Class tblTrailerDetail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ShipNum As String
	
	Private _OrderLineNumber As Decimal
	
	Private _ShippedQuantity As Decimal
	
	Private _LoadedDate As Date
	
	Private _LabelID As String
	
	Private _DateScannedTKSI As System.Nullable(Of Date)
	
	Private _DeliveredTKSI As System.Nullable(Of Date)
	
	Private _DamageNotes As String
	
	Private _DetailDescription As String
	
	Private _Other As String
	
	Private _SupplierSO As String
	
	Private _po As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnShipNumChanging(value As String)
    End Sub
    Partial Private Sub OnShipNumChanged()
    End Sub
    Partial Private Sub OnOrderLineNumberChanging(value As Decimal)
    End Sub
    Partial Private Sub OnOrderLineNumberChanged()
    End Sub
    Partial Private Sub OnShippedQuantityChanging(value As Decimal)
    End Sub
    Partial Private Sub OnShippedQuantityChanged()
    End Sub
    Partial Private Sub OnLoadedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnLoadedDateChanged()
    End Sub
    Partial Private Sub OnLabelIDChanging(value As String)
    End Sub
    Partial Private Sub OnLabelIDChanged()
    End Sub
    Partial Private Sub OnDateScannedTKSIChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateScannedTKSIChanged()
    End Sub
    Partial Private Sub OnDeliveredTKSIChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDeliveredTKSIChanged()
    End Sub
    Partial Private Sub OnDamageNotesChanging(value As String)
    End Sub
    Partial Private Sub OnDamageNotesChanged()
    End Sub
    Partial Private Sub OnDetailDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDetailDescriptionChanged()
    End Sub
    Partial Private Sub OnOtherChanging(value As String)
    End Sub
    Partial Private Sub OnOtherChanged()
    End Sub
    Partial Private Sub OnSupplierSOChanging(value As String)
    End Sub
    Partial Private Sub OnSupplierSOChanged()
    End Sub
    Partial Private Sub OnpoChanging(value As String)
    End Sub
    Partial Private Sub OnpoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipNum", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ShipNum() As String
		Get
			Return Me._ShipNum
		End Get
		Set
			If (String.Equals(Me._ShipNum, value) = false) Then
				Me.OnShipNumChanging(value)
				Me.SendPropertyChanging
				Me._ShipNum = value
				Me.SendPropertyChanged("ShipNum")
				Me.OnShipNumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderLineNumber", DbType:="Decimal(18,0) NOT NULL")>  _
	Public Property OrderLineNumber() As Decimal
		Get
			Return Me._OrderLineNumber
		End Get
		Set
			If ((Me._OrderLineNumber = value)  _
						= false) Then
				Me.OnOrderLineNumberChanging(value)
				Me.SendPropertyChanging
				Me._OrderLineNumber = value
				Me.SendPropertyChanged("OrderLineNumber")
				Me.OnOrderLineNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShippedQuantity", DbType:="Decimal(18,0) NOT NULL")>  _
	Public Property ShippedQuantity() As Decimal
		Get
			Return Me._ShippedQuantity
		End Get
		Set
			If ((Me._ShippedQuantity = value)  _
						= false) Then
				Me.OnShippedQuantityChanging(value)
				Me.SendPropertyChanging
				Me._ShippedQuantity = value
				Me.SendPropertyChanged("ShippedQuantity")
				Me.OnShippedQuantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoadedDate", DbType:="DateTime NOT NULL")>  _
	Public Property LoadedDate() As Date
		Get
			Return Me._LoadedDate
		End Get
		Set
			If ((Me._LoadedDate = value)  _
						= false) Then
				Me.OnLoadedDateChanging(value)
				Me.SendPropertyChanging
				Me._LoadedDate = value
				Me.SendPropertyChanged("LoadedDate")
				Me.OnLoadedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LabelID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property LabelID() As String
		Get
			Return Me._LabelID
		End Get
		Set
			If (String.Equals(Me._LabelID, value) = false) Then
				Me.OnLabelIDChanging(value)
				Me.SendPropertyChanging
				Me._LabelID = value
				Me.SendPropertyChanged("LabelID")
				Me.OnLabelIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateScannedTKSI", DbType:="DateTime")>  _
	Public Property DateScannedTKSI() As System.Nullable(Of Date)
		Get
			Return Me._DateScannedTKSI
		End Get
		Set
			If (Me._DateScannedTKSI.Equals(value) = false) Then
				Me.OnDateScannedTKSIChanging(value)
				Me.SendPropertyChanging
				Me._DateScannedTKSI = value
				Me.SendPropertyChanged("DateScannedTKSI")
				Me.OnDateScannedTKSIChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeliveredTKSI", DbType:="DateTime")>  _
	Public Property DeliveredTKSI() As System.Nullable(Of Date)
		Get
			Return Me._DeliveredTKSI
		End Get
		Set
			If (Me._DeliveredTKSI.Equals(value) = false) Then
				Me.OnDeliveredTKSIChanging(value)
				Me.SendPropertyChanging
				Me._DeliveredTKSI = value
				Me.SendPropertyChanged("DeliveredTKSI")
				Me.OnDeliveredTKSIChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DamageNotes", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property DamageNotes() As String
		Get
			Return Me._DamageNotes
		End Get
		Set
			If (String.Equals(Me._DamageNotes, value) = false) Then
				Me.OnDamageNotesChanging(value)
				Me.SendPropertyChanging
				Me._DamageNotes = value
				Me.SendPropertyChanged("DamageNotes")
				Me.OnDamageNotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DetailDescription", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property DetailDescription() As String
		Get
			Return Me._DetailDescription
		End Get
		Set
			If (String.Equals(Me._DetailDescription, value) = false) Then
				Me.OnDetailDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._DetailDescription = value
				Me.SendPropertyChanged("DetailDescription")
				Me.OnDetailDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Other", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Other() As String
		Get
			Return Me._Other
		End Get
		Set
			If (String.Equals(Me._Other, value) = false) Then
				Me.OnOtherChanging(value)
				Me.SendPropertyChanging
				Me._Other = value
				Me.SendPropertyChanged("Other")
				Me.OnOtherChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupplierSO", DbType:="VarChar(50)")>  _
	Public Property SupplierSO() As String
		Get
			Return Me._SupplierSO
		End Get
		Set
			If (String.Equals(Me._SupplierSO, value) = false) Then
				Me.OnSupplierSOChanging(value)
				Me.SendPropertyChanging
				Me._SupplierSO = value
				Me.SendPropertyChanged("SupplierSO")
				Me.OnSupplierSOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_po", DbType:="VarChar(50)")>  _
	Public Property po() As String
		Get
			Return Me._po
		End Get
		Set
			If (String.Equals(Me._po, value) = false) Then
				Me.OnpoChanging(value)
				Me.SendPropertyChanging
				Me._po = value
				Me.SendPropertyChanged("po")
				Me.OnpoChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblTasklist")>  _
Partial Public Class tblTasklist
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _gid As System.Guid
	
	Private _description As String
	
	Private _dateentered As Date
	
	Private _datemodified As Date
	
	Private _users As String
	
	Private _metatags As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OngidChanging(value As System.Guid)
    End Sub
    Partial Private Sub OngidChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub OndateenteredChanging(value As Date)
    End Sub
    Partial Private Sub OndateenteredChanged()
    End Sub
    Partial Private Sub OndatemodifiedChanging(value As Date)
    End Sub
    Partial Private Sub OndatemodifiedChanged()
    End Sub
    Partial Private Sub OnusersChanging(value As String)
    End Sub
    Partial Private Sub OnusersChanged()
    End Sub
    Partial Private Sub OnmetatagsChanging(value As String)
    End Sub
    Partial Private Sub OnmetatagsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gid", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property gid() As System.Guid
		Get
			Return Me._gid
		End Get
		Set
			If ((Me._gid = value)  _
						= false) Then
				Me.OngidChanging(value)
				Me.SendPropertyChanging
				Me._gid = value
				Me.SendPropertyChanged("gid")
				Me.OngidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="VarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateentered", DbType:="Date NOT NULL")>  _
	Public Property dateentered() As Date
		Get
			Return Me._dateentered
		End Get
		Set
			If ((Me._dateentered = value)  _
						= false) Then
				Me.OndateenteredChanging(value)
				Me.SendPropertyChanging
				Me._dateentered = value
				Me.SendPropertyChanged("dateentered")
				Me.OndateenteredChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_datemodified", DbType:="Date NOT NULL")>  _
	Public Property datemodified() As Date
		Get
			Return Me._datemodified
		End Get
		Set
			If ((Me._datemodified = value)  _
						= false) Then
				Me.OndatemodifiedChanging(value)
				Me.SendPropertyChanging
				Me._datemodified = value
				Me.SendPropertyChanged("datemodified")
				Me.OndatemodifiedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_users", DbType:="VarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property users() As String
		Get
			Return Me._users
		End Get
		Set
			If (String.Equals(Me._users, value) = false) Then
				Me.OnusersChanging(value)
				Me.SendPropertyChanging
				Me._users = value
				Me.SendPropertyChanged("users")
				Me.OnusersChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_metatags", DbType:="VarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property metatags() As String
		Get
			Return Me._metatags
		End Get
		Set
			If (String.Equals(Me._metatags, value) = false) Then
				Me.OnmetatagsChanging(value)
				Me.SendPropertyChanging
				Me._metatags = value
				Me.SendPropertyChanged("metatags")
				Me.OnmetatagsChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblSWOPending")>  _
Partial Public Class tblSWOPending
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _gid As System.Guid
	
	Private _AddressID As Integer
	
	Private _JOBID As Integer
	
	Private _CustID As Integer
	
	Private _DateOfOrder As Date
	
	Private _Sales As String
	
	Private _EstimatedHours As Decimal
	
	Private _MaterialCharge As Decimal
	
	Private _TaxCharge As Decimal
	
	Private _LaborCharge As Decimal
	
	Private _TripCharge As Decimal
	
	Private _sPOType As String
	
	Private _PONum As String
	
	Private _dateCreated As Date
	
	Private _detail1 As String
	
	Private _detail2 As String
	
	Private _detail3 As String
	
	Private _detail4 As String
	
	Private _detail5 As String
	
	Private _detail6 As String
	
	Private _PaymentTerms As String
	
	Private _dateOrderBy As Date
	
	Private _sStatus As String
	
	Private _detail7 As String
	
	Private _detail8 As String
	
	Private _detail9 As String
	
	Private _detail10 As String
	
	Private _detail11 As String
	
	Private _detail12 As String
	
	Private _NewCustomerInfo As String
	
	Private _Phone As String
	
	Private _JobContact As String
	
	Private _tblSWOOrders As EntitySet(Of tblSWOOrder)
	
	Private _tJob As EntityRef(Of tJob)
	
	Private _tAddress As EntityRef(Of tAddress)
	
	Private _tCustomr As EntityRef(Of tCustomr)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OngidChanging(value As System.Guid)
    End Sub
    Partial Private Sub OngidChanged()
    End Sub
    Partial Private Sub OnAddressIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnAddressIDChanged()
    End Sub
    Partial Private Sub OnJOBIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnJOBIDChanged()
    End Sub
    Partial Private Sub OnCustIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCustIDChanged()
    End Sub
    Partial Private Sub OnDateOfOrderChanging(value As Date)
    End Sub
    Partial Private Sub OnDateOfOrderChanged()
    End Sub
    Partial Private Sub OnSalesChanging(value As String)
    End Sub
    Partial Private Sub OnSalesChanged()
    End Sub
    Partial Private Sub OnEstimatedHoursChanging(value As Decimal)
    End Sub
    Partial Private Sub OnEstimatedHoursChanged()
    End Sub
    Partial Private Sub OnMaterialChargeChanging(value As Decimal)
    End Sub
    Partial Private Sub OnMaterialChargeChanged()
    End Sub
    Partial Private Sub OnTaxChargeChanging(value As Decimal)
    End Sub
    Partial Private Sub OnTaxChargeChanged()
    End Sub
    Partial Private Sub OnLaborChargeChanging(value As Decimal)
    End Sub
    Partial Private Sub OnLaborChargeChanged()
    End Sub
    Partial Private Sub OnTripChargeChanging(value As Decimal)
    End Sub
    Partial Private Sub OnTripChargeChanged()
    End Sub
    Partial Private Sub OnsPOTypeChanging(value As String)
    End Sub
    Partial Private Sub OnsPOTypeChanged()
    End Sub
    Partial Private Sub OnPONumChanging(value As String)
    End Sub
    Partial Private Sub OnPONumChanged()
    End Sub
    Partial Private Sub OndateCreatedChanging(value As Date)
    End Sub
    Partial Private Sub OndateCreatedChanged()
    End Sub
    Partial Private Sub Ondetail1Changing(value As String)
    End Sub
    Partial Private Sub Ondetail1Changed()
    End Sub
    Partial Private Sub Ondetail2Changing(value As String)
    End Sub
    Partial Private Sub Ondetail2Changed()
    End Sub
    Partial Private Sub Ondetail3Changing(value As String)
    End Sub
    Partial Private Sub Ondetail3Changed()
    End Sub
    Partial Private Sub Ondetail4Changing(value As String)
    End Sub
    Partial Private Sub Ondetail4Changed()
    End Sub
    Partial Private Sub Ondetail5Changing(value As String)
    End Sub
    Partial Private Sub Ondetail5Changed()
    End Sub
    Partial Private Sub Ondetail6Changing(value As String)
    End Sub
    Partial Private Sub Ondetail6Changed()
    End Sub
    Partial Private Sub OnPaymentTermsChanging(value As String)
    End Sub
    Partial Private Sub OnPaymentTermsChanged()
    End Sub
    Partial Private Sub OndateOrderByChanging(value As Date)
    End Sub
    Partial Private Sub OndateOrderByChanged()
    End Sub
    Partial Private Sub OnsStatusChanging(value As String)
    End Sub
    Partial Private Sub OnsStatusChanged()
    End Sub
    Partial Private Sub Ondetail7Changing(value As String)
    End Sub
    Partial Private Sub Ondetail7Changed()
    End Sub
    Partial Private Sub Ondetail8Changing(value As String)
    End Sub
    Partial Private Sub Ondetail8Changed()
    End Sub
    Partial Private Sub Ondetail9Changing(value As String)
    End Sub
    Partial Private Sub Ondetail9Changed()
    End Sub
    Partial Private Sub Ondetail10Changing(value As String)
    End Sub
    Partial Private Sub Ondetail10Changed()
    End Sub
    Partial Private Sub Ondetail11Changing(value As String)
    End Sub
    Partial Private Sub Ondetail11Changed()
    End Sub
    Partial Private Sub Ondetail12Changing(value As String)
    End Sub
    Partial Private Sub Ondetail12Changed()
    End Sub
    Partial Private Sub OnNewCustomerInfoChanging(value As String)
    End Sub
    Partial Private Sub OnNewCustomerInfoChanged()
    End Sub
    Partial Private Sub OnPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneChanged()
    End Sub
    Partial Private Sub OnJobContactChanging(value As String)
    End Sub
    Partial Private Sub OnJobContactChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblSWOOrders = New EntitySet(Of tblSWOOrder)(AddressOf Me.attach_tblSWOOrders, AddressOf Me.detach_tblSWOOrders)
		Me._tJob = CType(Nothing, EntityRef(Of tJob))
		Me._tAddress = CType(Nothing, EntityRef(Of tAddress))
		Me._tCustomr = CType(Nothing, EntityRef(Of tCustomr))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gid", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property gid() As System.Guid
		Get
			Return Me._gid
		End Get
		Set
			If ((Me._gid = value)  _
						= false) Then
				Me.OngidChanging(value)
				Me.SendPropertyChanging
				Me._gid = value
				Me.SendPropertyChanged("gid")
				Me.OngidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddressID", DbType:="Int NOT NULL")>  _
	Public Property AddressID() As Integer
		Get
			Return Me._AddressID
		End Get
		Set
			If ((Me._AddressID = value)  _
						= false) Then
				If Me._tAddress.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAddressIDChanging(value)
				Me.SendPropertyChanging
				Me._AddressID = value
				Me.SendPropertyChanged("AddressID")
				Me.OnAddressIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_JOBID", DbType:="Int NOT NULL")>  _
	Public Property JOBID() As Integer
		Get
			Return Me._JOBID
		End Get
		Set
			If ((Me._JOBID = value)  _
						= false) Then
				If Me._tJob.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnJOBIDChanging(value)
				Me.SendPropertyChanging
				Me._JOBID = value
				Me.SendPropertyChanged("JOBID")
				Me.OnJOBIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustID", DbType:="Int NOT NULL")>  _
	Public Property CustID() As Integer
		Get
			Return Me._CustID
		End Get
		Set
			If ((Me._CustID = value)  _
						= false) Then
				If Me._tCustomr.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCustIDChanging(value)
				Me.SendPropertyChanging
				Me._CustID = value
				Me.SendPropertyChanged("CustID")
				Me.OnCustIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateOfOrder", DbType:="DateTime NOT NULL")>  _
	Public Property DateOfOrder() As Date
		Get
			Return Me._DateOfOrder
		End Get
		Set
			If ((Me._DateOfOrder = value)  _
						= false) Then
				Me.OnDateOfOrderChanging(value)
				Me.SendPropertyChanging
				Me._DateOfOrder = value
				Me.SendPropertyChanged("DateOfOrder")
				Me.OnDateOfOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sales", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Sales() As String
		Get
			Return Me._Sales
		End Get
		Set
			If (String.Equals(Me._Sales, value) = false) Then
				Me.OnSalesChanging(value)
				Me.SendPropertyChanging
				Me._Sales = value
				Me.SendPropertyChanged("Sales")
				Me.OnSalesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EstimatedHours", DbType:="Decimal(18,0) NOT NULL")>  _
	Public Property EstimatedHours() As Decimal
		Get
			Return Me._EstimatedHours
		End Get
		Set
			If ((Me._EstimatedHours = value)  _
						= false) Then
				Me.OnEstimatedHoursChanging(value)
				Me.SendPropertyChanging
				Me._EstimatedHours = value
				Me.SendPropertyChanged("EstimatedHours")
				Me.OnEstimatedHoursChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaterialCharge", DbType:="Money NOT NULL")>  _
	Public Property MaterialCharge() As Decimal
		Get
			Return Me._MaterialCharge
		End Get
		Set
			If ((Me._MaterialCharge = value)  _
						= false) Then
				Me.OnMaterialChargeChanging(value)
				Me.SendPropertyChanging
				Me._MaterialCharge = value
				Me.SendPropertyChanged("MaterialCharge")
				Me.OnMaterialChargeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TaxCharge", DbType:="Money NOT NULL")>  _
	Public Property TaxCharge() As Decimal
		Get
			Return Me._TaxCharge
		End Get
		Set
			If ((Me._TaxCharge = value)  _
						= false) Then
				Me.OnTaxChargeChanging(value)
				Me.SendPropertyChanging
				Me._TaxCharge = value
				Me.SendPropertyChanged("TaxCharge")
				Me.OnTaxChargeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LaborCharge", DbType:="Money NOT NULL")>  _
	Public Property LaborCharge() As Decimal
		Get
			Return Me._LaborCharge
		End Get
		Set
			If ((Me._LaborCharge = value)  _
						= false) Then
				Me.OnLaborChargeChanging(value)
				Me.SendPropertyChanging
				Me._LaborCharge = value
				Me.SendPropertyChanged("LaborCharge")
				Me.OnLaborChargeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TripCharge", DbType:="Money NOT NULL")>  _
	Public Property TripCharge() As Decimal
		Get
			Return Me._TripCharge
		End Get
		Set
			If ((Me._TripCharge = value)  _
						= false) Then
				Me.OnTripChargeChanging(value)
				Me.SendPropertyChanging
				Me._TripCharge = value
				Me.SendPropertyChanged("TripCharge")
				Me.OnTripChargeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sPOType", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sPOType() As String
		Get
			Return Me._sPOType
		End Get
		Set
			If (String.Equals(Me._sPOType, value) = false) Then
				Me.OnsPOTypeChanging(value)
				Me.SendPropertyChanging
				Me._sPOType = value
				Me.SendPropertyChanged("sPOType")
				Me.OnsPOTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PONum", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property PONum() As String
		Get
			Return Me._PONum
		End Get
		Set
			If (String.Equals(Me._PONum, value) = false) Then
				Me.OnPONumChanging(value)
				Me.SendPropertyChanging
				Me._PONum = value
				Me.SendPropertyChanged("PONum")
				Me.OnPONumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateCreated", DbType:="DateTime NOT NULL")>  _
	Public Property dateCreated() As Date
		Get
			Return Me._dateCreated
		End Get
		Set
			If ((Me._dateCreated = value)  _
						= false) Then
				Me.OndateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._dateCreated = value
				Me.SendPropertyChanged("dateCreated")
				Me.OndateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_detail1", DbType:="VarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property detail1() As String
		Get
			Return Me._detail1
		End Get
		Set
			If (String.Equals(Me._detail1, value) = false) Then
				Me.Ondetail1Changing(value)
				Me.SendPropertyChanging
				Me._detail1 = value
				Me.SendPropertyChanged("detail1")
				Me.Ondetail1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_detail2", DbType:="VarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property detail2() As String
		Get
			Return Me._detail2
		End Get
		Set
			If (String.Equals(Me._detail2, value) = false) Then
				Me.Ondetail2Changing(value)
				Me.SendPropertyChanging
				Me._detail2 = value
				Me.SendPropertyChanged("detail2")
				Me.Ondetail2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_detail3", DbType:="VarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property detail3() As String
		Get
			Return Me._detail3
		End Get
		Set
			If (String.Equals(Me._detail3, value) = false) Then
				Me.Ondetail3Changing(value)
				Me.SendPropertyChanging
				Me._detail3 = value
				Me.SendPropertyChanged("detail3")
				Me.Ondetail3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_detail4", DbType:="VarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property detail4() As String
		Get
			Return Me._detail4
		End Get
		Set
			If (String.Equals(Me._detail4, value) = false) Then
				Me.Ondetail4Changing(value)
				Me.SendPropertyChanging
				Me._detail4 = value
				Me.SendPropertyChanged("detail4")
				Me.Ondetail4Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_detail5", DbType:="VarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property detail5() As String
		Get
			Return Me._detail5
		End Get
		Set
			If (String.Equals(Me._detail5, value) = false) Then
				Me.Ondetail5Changing(value)
				Me.SendPropertyChanging
				Me._detail5 = value
				Me.SendPropertyChanged("detail5")
				Me.Ondetail5Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_detail6", DbType:="VarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property detail6() As String
		Get
			Return Me._detail6
		End Get
		Set
			If (String.Equals(Me._detail6, value) = false) Then
				Me.Ondetail6Changing(value)
				Me.SendPropertyChanging
				Me._detail6 = value
				Me.SendPropertyChanged("detail6")
				Me.Ondetail6Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaymentTerms", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property PaymentTerms() As String
		Get
			Return Me._PaymentTerms
		End Get
		Set
			If (String.Equals(Me._PaymentTerms, value) = false) Then
				Me.OnPaymentTermsChanging(value)
				Me.SendPropertyChanging
				Me._PaymentTerms = value
				Me.SendPropertyChanged("PaymentTerms")
				Me.OnPaymentTermsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateOrderBy", DbType:="DateTime NOT NULL")>  _
	Public Property dateOrderBy() As Date
		Get
			Return Me._dateOrderBy
		End Get
		Set
			If ((Me._dateOrderBy = value)  _
						= false) Then
				Me.OndateOrderByChanging(value)
				Me.SendPropertyChanging
				Me._dateOrderBy = value
				Me.SendPropertyChanged("dateOrderBy")
				Me.OndateOrderByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sStatus", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sStatus() As String
		Get
			Return Me._sStatus
		End Get
		Set
			If (String.Equals(Me._sStatus, value) = false) Then
				Me.OnsStatusChanging(value)
				Me.SendPropertyChanging
				Me._sStatus = value
				Me.SendPropertyChanged("sStatus")
				Me.OnsStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_detail7", DbType:="VarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property detail7() As String
		Get
			Return Me._detail7
		End Get
		Set
			If (String.Equals(Me._detail7, value) = false) Then
				Me.Ondetail7Changing(value)
				Me.SendPropertyChanging
				Me._detail7 = value
				Me.SendPropertyChanged("detail7")
				Me.Ondetail7Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_detail8", DbType:="VarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property detail8() As String
		Get
			Return Me._detail8
		End Get
		Set
			If (String.Equals(Me._detail8, value) = false) Then
				Me.Ondetail8Changing(value)
				Me.SendPropertyChanging
				Me._detail8 = value
				Me.SendPropertyChanged("detail8")
				Me.Ondetail8Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_detail9", DbType:="VarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property detail9() As String
		Get
			Return Me._detail9
		End Get
		Set
			If (String.Equals(Me._detail9, value) = false) Then
				Me.Ondetail9Changing(value)
				Me.SendPropertyChanging
				Me._detail9 = value
				Me.SendPropertyChanged("detail9")
				Me.Ondetail9Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_detail10", DbType:="VarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property detail10() As String
		Get
			Return Me._detail10
		End Get
		Set
			If (String.Equals(Me._detail10, value) = false) Then
				Me.Ondetail10Changing(value)
				Me.SendPropertyChanging
				Me._detail10 = value
				Me.SendPropertyChanged("detail10")
				Me.Ondetail10Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_detail11", DbType:="VarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property detail11() As String
		Get
			Return Me._detail11
		End Get
		Set
			If (String.Equals(Me._detail11, value) = false) Then
				Me.Ondetail11Changing(value)
				Me.SendPropertyChanging
				Me._detail11 = value
				Me.SendPropertyChanged("detail11")
				Me.Ondetail11Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_detail12", DbType:="VarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property detail12() As String
		Get
			Return Me._detail12
		End Get
		Set
			If (String.Equals(Me._detail12, value) = false) Then
				Me.Ondetail12Changing(value)
				Me.SendPropertyChanging
				Me._detail12 = value
				Me.SendPropertyChanged("detail12")
				Me.Ondetail12Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NewCustomerInfo", DbType:="VarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property NewCustomerInfo() As String
		Get
			Return Me._NewCustomerInfo
		End Get
		Set
			If (String.Equals(Me._NewCustomerInfo, value) = false) Then
				Me.OnNewCustomerInfoChanging(value)
				Me.SendPropertyChanging
				Me._NewCustomerInfo = value
				Me.SendPropertyChanged("NewCustomerInfo")
				Me.OnNewCustomerInfoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, value) = false) Then
				Me.OnPhoneChanging(value)
				Me.SendPropertyChanging
				Me._Phone = value
				Me.SendPropertyChanged("Phone")
				Me.OnPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_JobContact", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property JobContact() As String
		Get
			Return Me._JobContact
		End Get
		Set
			If (String.Equals(Me._JobContact, value) = false) Then
				Me.OnJobContactChanging(value)
				Me.SendPropertyChanging
				Me._JobContact = value
				Me.SendPropertyChanged("JobContact")
				Me.OnJobContactChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblSWOPending_tblSWOOrder", Storage:="_tblSWOOrders", ThisKey:="gid", OtherKey:="gSWOID")>  _
	Public Property tblSWOOrders() As EntitySet(Of tblSWOOrder)
		Get
			Return Me._tblSWOOrders
		End Get
		Set
			Me._tblSWOOrders.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tJob_tblSWOPending", Storage:="_tJob", ThisKey:="JOBID", OtherKey:="nID", IsForeignKey:=true)>  _
	Public Property tJob() As tJob
		Get
			Return Me._tJob.Entity
		End Get
		Set
			Dim previousValue As tJob = Me._tJob.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tJob.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tJob.Entity = Nothing
					previousValue.tblSWOPendings.Remove(Me)
				End If
				Me._tJob.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblSWOPendings.Add(Me)
					Me._JOBID = value.nID
				Else
					Me._JOBID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tJob")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tAddress_tblSWOPending", Storage:="_tAddress", ThisKey:="AddressID", OtherKey:="nID", IsForeignKey:=true)>  _
	Public Property tAddress() As tAddress
		Get
			Return Me._tAddress.Entity
		End Get
		Set
			Dim previousValue As tAddress = Me._tAddress.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tAddress.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tAddress.Entity = Nothing
					previousValue.tblSWOPendings.Remove(Me)
				End If
				Me._tAddress.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblSWOPendings.Add(Me)
					Me._AddressID = value.nID
				Else
					Me._AddressID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tAddress")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tCustomr_tblSWOPending", Storage:="_tCustomr", ThisKey:="CustID", OtherKey:="lID", IsForeignKey:=true)>  _
	Public Property tCustomr() As tCustomr
		Get
			Return Me._tCustomr.Entity
		End Get
		Set
			Dim previousValue As tCustomr = Me._tCustomr.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tCustomr.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tCustomr.Entity = Nothing
					previousValue.tblSWOPendings.Remove(Me)
				End If
				Me._tCustomr.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblSWOPendings.Add(Me)
					Me._CustID = value.lID
				Else
					Me._CustID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tCustomr")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblSWOOrders(ByVal entity As tblSWOOrder)
		Me.SendPropertyChanging
		entity.tblSWOPending = Me
	End Sub
	
	Private Sub detach_tblSWOOrders(ByVal entity As tblSWOOrder)
		Me.SendPropertyChanging
		entity.tblSWOPending = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblSWOOrder")>  _
Partial Public Class tblSWOOrder
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _gid As System.Guid
	
	Private _gSWOID As System.Guid
	
	Private _nVendorID As Integer
	
	Private _sSalesName As String
	
	Private _OrderDate As Date
	
	Private _ShipWeekOf As Date
	
	Private _ShipVia As String
	
	Private _SalesTax As Decimal
	
	Private _Terms As String
	
	Private _LayoutSheets As String
	
	Private _BillTo As String
	
	Private _ShipTo As String
	
	Private _RetailFactor As Decimal
	
	Private _CostFactor As Decimal
	
	Private _RetailShipping As Decimal
	
	Private _CostShipping As Decimal
	
	Private _retailADD As Decimal
	
	Private _DoorStyleWall As String
	
	Private _DoorNo As String
	
	Private _DoorMod As String
	
	Private _Edge As String
	
	Private _wood As String
	
	Private _FinishColor As String
	
	Private _Laminate As String
	
	Private _DoorStyleBase As String
	
	Private _DoorNo2 As String
	
	Private _CabinetMod As String
	
	Private _Hinge As String
	
	Private _FinishMod As String
	
	Private _Description As String
	
	Private _MapleMelIntDoveDwr As String
	
	Private _WoodDoveDwr As String
	
	Private _WhiteMelInt As String
	
	Private _MapleMelInt As String
	
	Private _SDANum As String
	
	Private _CustID As Integer
	
	Private _NewCustomerInfo As String
	
	Private _JobContact As String
	
	Private _CompletionDate As String
	
	Private _PONum As String
	
	Private _Upcharge1 As Decimal
	
	Private _Upcharge2 As Decimal
	
	Private _Upcharge3 As Decimal
	
	Private _Upcharge1Label As String
	
	Private _Upcharge2Label As String
	
	Private _Upcharge3Label As String
	
	Private _tblSWOPending As EntityRef(Of tblSWOPending)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OngidChanging(value As System.Guid)
    End Sub
    Partial Private Sub OngidChanged()
    End Sub
    Partial Private Sub OngSWOIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OngSWOIDChanged()
    End Sub
    Partial Private Sub OnnVendorIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnnVendorIDChanged()
    End Sub
    Partial Private Sub OnsSalesNameChanging(value As String)
    End Sub
    Partial Private Sub OnsSalesNameChanged()
    End Sub
    Partial Private Sub OnOrderDateChanging(value As Date)
    End Sub
    Partial Private Sub OnOrderDateChanged()
    End Sub
    Partial Private Sub OnShipWeekOfChanging(value As Date)
    End Sub
    Partial Private Sub OnShipWeekOfChanged()
    End Sub
    Partial Private Sub OnShipViaChanging(value As String)
    End Sub
    Partial Private Sub OnShipViaChanged()
    End Sub
    Partial Private Sub OnSalesTaxChanging(value As Decimal)
    End Sub
    Partial Private Sub OnSalesTaxChanged()
    End Sub
    Partial Private Sub OnTermsChanging(value As String)
    End Sub
    Partial Private Sub OnTermsChanged()
    End Sub
    Partial Private Sub OnLayoutSheetsChanging(value As String)
    End Sub
    Partial Private Sub OnLayoutSheetsChanged()
    End Sub
    Partial Private Sub OnBillToChanging(value As String)
    End Sub
    Partial Private Sub OnBillToChanged()
    End Sub
    Partial Private Sub OnShipToChanging(value As String)
    End Sub
    Partial Private Sub OnShipToChanged()
    End Sub
    Partial Private Sub OnRetailFactorChanging(value As Decimal)
    End Sub
    Partial Private Sub OnRetailFactorChanged()
    End Sub
    Partial Private Sub OnCostFactorChanging(value As Decimal)
    End Sub
    Partial Private Sub OnCostFactorChanged()
    End Sub
    Partial Private Sub OnRetailShippingChanging(value As Decimal)
    End Sub
    Partial Private Sub OnRetailShippingChanged()
    End Sub
    Partial Private Sub OnCostShippingChanging(value As Decimal)
    End Sub
    Partial Private Sub OnCostShippingChanged()
    End Sub
    Partial Private Sub OnretailADDChanging(value As Decimal)
    End Sub
    Partial Private Sub OnretailADDChanged()
    End Sub
    Partial Private Sub OnDoorStyleWallChanging(value As String)
    End Sub
    Partial Private Sub OnDoorStyleWallChanged()
    End Sub
    Partial Private Sub OnDoorNoChanging(value As String)
    End Sub
    Partial Private Sub OnDoorNoChanged()
    End Sub
    Partial Private Sub OnDoorModChanging(value As String)
    End Sub
    Partial Private Sub OnDoorModChanged()
    End Sub
    Partial Private Sub OnEdgeChanging(value As String)
    End Sub
    Partial Private Sub OnEdgeChanged()
    End Sub
    Partial Private Sub OnwoodChanging(value As String)
    End Sub
    Partial Private Sub OnwoodChanged()
    End Sub
    Partial Private Sub OnFinishColorChanging(value As String)
    End Sub
    Partial Private Sub OnFinishColorChanged()
    End Sub
    Partial Private Sub OnLaminateChanging(value As String)
    End Sub
    Partial Private Sub OnLaminateChanged()
    End Sub
    Partial Private Sub OnDoorStyleBaseChanging(value As String)
    End Sub
    Partial Private Sub OnDoorStyleBaseChanged()
    End Sub
    Partial Private Sub OnDoorNo2Changing(value As String)
    End Sub
    Partial Private Sub OnDoorNo2Changed()
    End Sub
    Partial Private Sub OnCabinetModChanging(value As String)
    End Sub
    Partial Private Sub OnCabinetModChanged()
    End Sub
    Partial Private Sub OnHingeChanging(value As String)
    End Sub
    Partial Private Sub OnHingeChanged()
    End Sub
    Partial Private Sub OnFinishModChanging(value As String)
    End Sub
    Partial Private Sub OnFinishModChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnMapleMelIntDoveDwrChanging(value As String)
    End Sub
    Partial Private Sub OnMapleMelIntDoveDwrChanged()
    End Sub
    Partial Private Sub OnWoodDoveDwrChanging(value As String)
    End Sub
    Partial Private Sub OnWoodDoveDwrChanged()
    End Sub
    Partial Private Sub OnWhiteMelIntChanging(value As String)
    End Sub
    Partial Private Sub OnWhiteMelIntChanged()
    End Sub
    Partial Private Sub OnMapleMelIntChanging(value As String)
    End Sub
    Partial Private Sub OnMapleMelIntChanged()
    End Sub
    Partial Private Sub OnSDANumChanging(value As String)
    End Sub
    Partial Private Sub OnSDANumChanged()
    End Sub
    Partial Private Sub OnCustIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCustIDChanged()
    End Sub
    Partial Private Sub OnNewCustomerInfoChanging(value As String)
    End Sub
    Partial Private Sub OnNewCustomerInfoChanged()
    End Sub
    Partial Private Sub OnJobContactChanging(value As String)
    End Sub
    Partial Private Sub OnJobContactChanged()
    End Sub
    Partial Private Sub OnCompletionDateChanging(value As String)
    End Sub
    Partial Private Sub OnCompletionDateChanged()
    End Sub
    Partial Private Sub OnPONumChanging(value As String)
    End Sub
    Partial Private Sub OnPONumChanged()
    End Sub
    Partial Private Sub OnUpcharge1Changing(value As Decimal)
    End Sub
    Partial Private Sub OnUpcharge1Changed()
    End Sub
    Partial Private Sub OnUpcharge2Changing(value As Decimal)
    End Sub
    Partial Private Sub OnUpcharge2Changed()
    End Sub
    Partial Private Sub OnUpcharge3Changing(value As Decimal)
    End Sub
    Partial Private Sub OnUpcharge3Changed()
    End Sub
    Partial Private Sub OnUpcharge1LabelChanging(value As String)
    End Sub
    Partial Private Sub OnUpcharge1LabelChanged()
    End Sub
    Partial Private Sub OnUpcharge2LabelChanging(value As String)
    End Sub
    Partial Private Sub OnUpcharge2LabelChanged()
    End Sub
    Partial Private Sub OnUpcharge3LabelChanging(value As String)
    End Sub
    Partial Private Sub OnUpcharge3LabelChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblSWOPending = CType(Nothing, EntityRef(Of tblSWOPending))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gid", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property gid() As System.Guid
		Get
			Return Me._gid
		End Get
		Set
			If ((Me._gid = value)  _
						= false) Then
				Me.OngidChanging(value)
				Me.SendPropertyChanging
				Me._gid = value
				Me.SendPropertyChanged("gid")
				Me.OngidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gSWOID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property gSWOID() As System.Guid
		Get
			Return Me._gSWOID
		End Get
		Set
			If ((Me._gSWOID = value)  _
						= false) Then
				If Me._tblSWOPending.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OngSWOIDChanging(value)
				Me.SendPropertyChanging
				Me._gSWOID = value
				Me.SendPropertyChanged("gSWOID")
				Me.OngSWOIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nVendorID", DbType:="Int NOT NULL")>  _
	Public Property nVendorID() As Integer
		Get
			Return Me._nVendorID
		End Get
		Set
			If ((Me._nVendorID = value)  _
						= false) Then
				Me.OnnVendorIDChanging(value)
				Me.SendPropertyChanging
				Me._nVendorID = value
				Me.SendPropertyChanged("nVendorID")
				Me.OnnVendorIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sSalesName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sSalesName() As String
		Get
			Return Me._sSalesName
		End Get
		Set
			If (String.Equals(Me._sSalesName, value) = false) Then
				Me.OnsSalesNameChanging(value)
				Me.SendPropertyChanging
				Me._sSalesName = value
				Me.SendPropertyChanged("sSalesName")
				Me.OnsSalesNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderDate", DbType:="DateTime NOT NULL")>  _
	Public Property OrderDate() As Date
		Get
			Return Me._OrderDate
		End Get
		Set
			If ((Me._OrderDate = value)  _
						= false) Then
				Me.OnOrderDateChanging(value)
				Me.SendPropertyChanging
				Me._OrderDate = value
				Me.SendPropertyChanged("OrderDate")
				Me.OnOrderDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipWeekOf", DbType:="DateTime NOT NULL")>  _
	Public Property ShipWeekOf() As Date
		Get
			Return Me._ShipWeekOf
		End Get
		Set
			If ((Me._ShipWeekOf = value)  _
						= false) Then
				Me.OnShipWeekOfChanging(value)
				Me.SendPropertyChanging
				Me._ShipWeekOf = value
				Me.SendPropertyChanged("ShipWeekOf")
				Me.OnShipWeekOfChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipVia", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ShipVia() As String
		Get
			Return Me._ShipVia
		End Get
		Set
			If (String.Equals(Me._ShipVia, value) = false) Then
				Me.OnShipViaChanging(value)
				Me.SendPropertyChanging
				Me._ShipVia = value
				Me.SendPropertyChanged("ShipVia")
				Me.OnShipViaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalesTax", DbType:="Decimal(18,4) NOT NULL")>  _
	Public Property SalesTax() As Decimal
		Get
			Return Me._SalesTax
		End Get
		Set
			If ((Me._SalesTax = value)  _
						= false) Then
				Me.OnSalesTaxChanging(value)
				Me.SendPropertyChanging
				Me._SalesTax = value
				Me.SendPropertyChanged("SalesTax")
				Me.OnSalesTaxChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Terms", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Terms() As String
		Get
			Return Me._Terms
		End Get
		Set
			If (String.Equals(Me._Terms, value) = false) Then
				Me.OnTermsChanging(value)
				Me.SendPropertyChanging
				Me._Terms = value
				Me.SendPropertyChanged("Terms")
				Me.OnTermsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LayoutSheets", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property LayoutSheets() As String
		Get
			Return Me._LayoutSheets
		End Get
		Set
			If (String.Equals(Me._LayoutSheets, value) = false) Then
				Me.OnLayoutSheetsChanging(value)
				Me.SendPropertyChanging
				Me._LayoutSheets = value
				Me.SendPropertyChanged("LayoutSheets")
				Me.OnLayoutSheetsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BillTo", DbType:="VarChar(2000) NOT NULL", CanBeNull:=false)>  _
	Public Property BillTo() As String
		Get
			Return Me._BillTo
		End Get
		Set
			If (String.Equals(Me._BillTo, value) = false) Then
				Me.OnBillToChanging(value)
				Me.SendPropertyChanging
				Me._BillTo = value
				Me.SendPropertyChanged("BillTo")
				Me.OnBillToChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipTo", DbType:="VarChar(2000) NOT NULL", CanBeNull:=false)>  _
	Public Property ShipTo() As String
		Get
			Return Me._ShipTo
		End Get
		Set
			If (String.Equals(Me._ShipTo, value) = false) Then
				Me.OnShipToChanging(value)
				Me.SendPropertyChanging
				Me._ShipTo = value
				Me.SendPropertyChanged("ShipTo")
				Me.OnShipToChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RetailFactor", DbType:="Decimal(18,4) NOT NULL")>  _
	Public Property RetailFactor() As Decimal
		Get
			Return Me._RetailFactor
		End Get
		Set
			If ((Me._RetailFactor = value)  _
						= false) Then
				Me.OnRetailFactorChanging(value)
				Me.SendPropertyChanging
				Me._RetailFactor = value
				Me.SendPropertyChanged("RetailFactor")
				Me.OnRetailFactorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CostFactor", DbType:="Decimal(18,4) NOT NULL")>  _
	Public Property CostFactor() As Decimal
		Get
			Return Me._CostFactor
		End Get
		Set
			If ((Me._CostFactor = value)  _
						= false) Then
				Me.OnCostFactorChanging(value)
				Me.SendPropertyChanging
				Me._CostFactor = value
				Me.SendPropertyChanged("CostFactor")
				Me.OnCostFactorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RetailShipping", DbType:="Money NOT NULL")>  _
	Public Property RetailShipping() As Decimal
		Get
			Return Me._RetailShipping
		End Get
		Set
			If ((Me._RetailShipping = value)  _
						= false) Then
				Me.OnRetailShippingChanging(value)
				Me.SendPropertyChanging
				Me._RetailShipping = value
				Me.SendPropertyChanged("RetailShipping")
				Me.OnRetailShippingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CostShipping", DbType:="Money NOT NULL")>  _
	Public Property CostShipping() As Decimal
		Get
			Return Me._CostShipping
		End Get
		Set
			If ((Me._CostShipping = value)  _
						= false) Then
				Me.OnCostShippingChanging(value)
				Me.SendPropertyChanging
				Me._CostShipping = value
				Me.SendPropertyChanged("CostShipping")
				Me.OnCostShippingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_retailADD", DbType:="Money NOT NULL")>  _
	Public Property retailADD() As Decimal
		Get
			Return Me._retailADD
		End Get
		Set
			If ((Me._retailADD = value)  _
						= false) Then
				Me.OnretailADDChanging(value)
				Me.SendPropertyChanging
				Me._retailADD = value
				Me.SendPropertyChanged("retailADD")
				Me.OnretailADDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DoorStyleWall", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property DoorStyleWall() As String
		Get
			Return Me._DoorStyleWall
		End Get
		Set
			If (String.Equals(Me._DoorStyleWall, value) = false) Then
				Me.OnDoorStyleWallChanging(value)
				Me.SendPropertyChanging
				Me._DoorStyleWall = value
				Me.SendPropertyChanged("DoorStyleWall")
				Me.OnDoorStyleWallChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DoorNo", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property DoorNo() As String
		Get
			Return Me._DoorNo
		End Get
		Set
			If (String.Equals(Me._DoorNo, value) = false) Then
				Me.OnDoorNoChanging(value)
				Me.SendPropertyChanging
				Me._DoorNo = value
				Me.SendPropertyChanged("DoorNo")
				Me.OnDoorNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DoorMod", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property DoorMod() As String
		Get
			Return Me._DoorMod
		End Get
		Set
			If (String.Equals(Me._DoorMod, value) = false) Then
				Me.OnDoorModChanging(value)
				Me.SendPropertyChanging
				Me._DoorMod = value
				Me.SendPropertyChanged("DoorMod")
				Me.OnDoorModChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Edge", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Edge() As String
		Get
			Return Me._Edge
		End Get
		Set
			If (String.Equals(Me._Edge, value) = false) Then
				Me.OnEdgeChanging(value)
				Me.SendPropertyChanging
				Me._Edge = value
				Me.SendPropertyChanged("Edge")
				Me.OnEdgeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_wood", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property wood() As String
		Get
			Return Me._wood
		End Get
		Set
			If (String.Equals(Me._wood, value) = false) Then
				Me.OnwoodChanging(value)
				Me.SendPropertyChanging
				Me._wood = value
				Me.SendPropertyChanged("wood")
				Me.OnwoodChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FinishColor", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property FinishColor() As String
		Get
			Return Me._FinishColor
		End Get
		Set
			If (String.Equals(Me._FinishColor, value) = false) Then
				Me.OnFinishColorChanging(value)
				Me.SendPropertyChanging
				Me._FinishColor = value
				Me.SendPropertyChanged("FinishColor")
				Me.OnFinishColorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Laminate", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Laminate() As String
		Get
			Return Me._Laminate
		End Get
		Set
			If (String.Equals(Me._Laminate, value) = false) Then
				Me.OnLaminateChanging(value)
				Me.SendPropertyChanging
				Me._Laminate = value
				Me.SendPropertyChanged("Laminate")
				Me.OnLaminateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DoorStyleBase", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property DoorStyleBase() As String
		Get
			Return Me._DoorStyleBase
		End Get
		Set
			If (String.Equals(Me._DoorStyleBase, value) = false) Then
				Me.OnDoorStyleBaseChanging(value)
				Me.SendPropertyChanging
				Me._DoorStyleBase = value
				Me.SendPropertyChanged("DoorStyleBase")
				Me.OnDoorStyleBaseChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DoorNo2", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property DoorNo2() As String
		Get
			Return Me._DoorNo2
		End Get
		Set
			If (String.Equals(Me._DoorNo2, value) = false) Then
				Me.OnDoorNo2Changing(value)
				Me.SendPropertyChanging
				Me._DoorNo2 = value
				Me.SendPropertyChanged("DoorNo2")
				Me.OnDoorNo2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CabinetMod", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CabinetMod() As String
		Get
			Return Me._CabinetMod
		End Get
		Set
			If (String.Equals(Me._CabinetMod, value) = false) Then
				Me.OnCabinetModChanging(value)
				Me.SendPropertyChanging
				Me._CabinetMod = value
				Me.SendPropertyChanged("CabinetMod")
				Me.OnCabinetModChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Hinge", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Hinge() As String
		Get
			Return Me._Hinge
		End Get
		Set
			If (String.Equals(Me._Hinge, value) = false) Then
				Me.OnHingeChanging(value)
				Me.SendPropertyChanging
				Me._Hinge = value
				Me.SendPropertyChanged("Hinge")
				Me.OnHingeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FinishMod", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property FinishMod() As String
		Get
			Return Me._FinishMod
		End Get
		Set
			If (String.Equals(Me._FinishMod, value) = false) Then
				Me.OnFinishModChanging(value)
				Me.SendPropertyChanging
				Me._FinishMod = value
				Me.SendPropertyChanged("FinishMod")
				Me.OnFinishModChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MapleMelIntDoveDwr", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property MapleMelIntDoveDwr() As String
		Get
			Return Me._MapleMelIntDoveDwr
		End Get
		Set
			If (String.Equals(Me._MapleMelIntDoveDwr, value) = false) Then
				Me.OnMapleMelIntDoveDwrChanging(value)
				Me.SendPropertyChanging
				Me._MapleMelIntDoveDwr = value
				Me.SendPropertyChanged("MapleMelIntDoveDwr")
				Me.OnMapleMelIntDoveDwrChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WoodDoveDwr", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property WoodDoveDwr() As String
		Get
			Return Me._WoodDoveDwr
		End Get
		Set
			If (String.Equals(Me._WoodDoveDwr, value) = false) Then
				Me.OnWoodDoveDwrChanging(value)
				Me.SendPropertyChanging
				Me._WoodDoveDwr = value
				Me.SendPropertyChanged("WoodDoveDwr")
				Me.OnWoodDoveDwrChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WhiteMelInt", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property WhiteMelInt() As String
		Get
			Return Me._WhiteMelInt
		End Get
		Set
			If (String.Equals(Me._WhiteMelInt, value) = false) Then
				Me.OnWhiteMelIntChanging(value)
				Me.SendPropertyChanging
				Me._WhiteMelInt = value
				Me.SendPropertyChanged("WhiteMelInt")
				Me.OnWhiteMelIntChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MapleMelInt", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property MapleMelInt() As String
		Get
			Return Me._MapleMelInt
		End Get
		Set
			If (String.Equals(Me._MapleMelInt, value) = false) Then
				Me.OnMapleMelIntChanging(value)
				Me.SendPropertyChanging
				Me._MapleMelInt = value
				Me.SendPropertyChanged("MapleMelInt")
				Me.OnMapleMelIntChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SDANum", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property SDANum() As String
		Get
			Return Me._SDANum
		End Get
		Set
			If (String.Equals(Me._SDANum, value) = false) Then
				Me.OnSDANumChanging(value)
				Me.SendPropertyChanging
				Me._SDANum = value
				Me.SendPropertyChanged("SDANum")
				Me.OnSDANumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustID", DbType:="Int NOT NULL")>  _
	Public Property CustID() As Integer
		Get
			Return Me._CustID
		End Get
		Set
			If ((Me._CustID = value)  _
						= false) Then
				Me.OnCustIDChanging(value)
				Me.SendPropertyChanging
				Me._CustID = value
				Me.SendPropertyChanged("CustID")
				Me.OnCustIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NewCustomerInfo", DbType:="VarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property NewCustomerInfo() As String
		Get
			Return Me._NewCustomerInfo
		End Get
		Set
			If (String.Equals(Me._NewCustomerInfo, value) = false) Then
				Me.OnNewCustomerInfoChanging(value)
				Me.SendPropertyChanging
				Me._NewCustomerInfo = value
				Me.SendPropertyChanged("NewCustomerInfo")
				Me.OnNewCustomerInfoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_JobContact", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property JobContact() As String
		Get
			Return Me._JobContact
		End Get
		Set
			If (String.Equals(Me._JobContact, value) = false) Then
				Me.OnJobContactChanging(value)
				Me.SendPropertyChanging
				Me._JobContact = value
				Me.SendPropertyChanged("JobContact")
				Me.OnJobContactChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompletionDate", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CompletionDate() As String
		Get
			Return Me._CompletionDate
		End Get
		Set
			If (String.Equals(Me._CompletionDate, value) = false) Then
				Me.OnCompletionDateChanging(value)
				Me.SendPropertyChanging
				Me._CompletionDate = value
				Me.SendPropertyChanged("CompletionDate")
				Me.OnCompletionDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PONum", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property PONum() As String
		Get
			Return Me._PONum
		End Get
		Set
			If (String.Equals(Me._PONum, value) = false) Then
				Me.OnPONumChanging(value)
				Me.SendPropertyChanging
				Me._PONum = value
				Me.SendPropertyChanged("PONum")
				Me.OnPONumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Upcharge1", DbType:="Money NOT NULL")>  _
	Public Property Upcharge1() As Decimal
		Get
			Return Me._Upcharge1
		End Get
		Set
			If ((Me._Upcharge1 = value)  _
						= false) Then
				Me.OnUpcharge1Changing(value)
				Me.SendPropertyChanging
				Me._Upcharge1 = value
				Me.SendPropertyChanged("Upcharge1")
				Me.OnUpcharge1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Upcharge2", DbType:="Money NOT NULL")>  _
	Public Property Upcharge2() As Decimal
		Get
			Return Me._Upcharge2
		End Get
		Set
			If ((Me._Upcharge2 = value)  _
						= false) Then
				Me.OnUpcharge2Changing(value)
				Me.SendPropertyChanging
				Me._Upcharge2 = value
				Me.SendPropertyChanged("Upcharge2")
				Me.OnUpcharge2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Upcharge3", DbType:="Money NOT NULL")>  _
	Public Property Upcharge3() As Decimal
		Get
			Return Me._Upcharge3
		End Get
		Set
			If ((Me._Upcharge3 = value)  _
						= false) Then
				Me.OnUpcharge3Changing(value)
				Me.SendPropertyChanging
				Me._Upcharge3 = value
				Me.SendPropertyChanged("Upcharge3")
				Me.OnUpcharge3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Upcharge1Label", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Upcharge1Label() As String
		Get
			Return Me._Upcharge1Label
		End Get
		Set
			If (String.Equals(Me._Upcharge1Label, value) = false) Then
				Me.OnUpcharge1LabelChanging(value)
				Me.SendPropertyChanging
				Me._Upcharge1Label = value
				Me.SendPropertyChanged("Upcharge1Label")
				Me.OnUpcharge1LabelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Upcharge2Label", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Upcharge2Label() As String
		Get
			Return Me._Upcharge2Label
		End Get
		Set
			If (String.Equals(Me._Upcharge2Label, value) = false) Then
				Me.OnUpcharge2LabelChanging(value)
				Me.SendPropertyChanging
				Me._Upcharge2Label = value
				Me.SendPropertyChanged("Upcharge2Label")
				Me.OnUpcharge2LabelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Upcharge3Label", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Upcharge3Label() As String
		Get
			Return Me._Upcharge3Label
		End Get
		Set
			If (String.Equals(Me._Upcharge3Label, value) = false) Then
				Me.OnUpcharge3LabelChanging(value)
				Me.SendPropertyChanging
				Me._Upcharge3Label = value
				Me.SendPropertyChanged("Upcharge3Label")
				Me.OnUpcharge3LabelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblSWOPending_tblSWOOrder", Storage:="_tblSWOPending", ThisKey:="gSWOID", OtherKey:="gid", IsForeignKey:=true)>  _
	Public Property tblSWOPending() As tblSWOPending
		Get
			Return Me._tblSWOPending.Entity
		End Get
		Set
			Dim previousValue As tblSWOPending = Me._tblSWOPending.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblSWOPending.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblSWOPending.Entity = Nothing
					previousValue.tblSWOOrders.Remove(Me)
				End If
				Me._tblSWOPending.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblSWOOrders.Add(Me)
					Me._gSWOID = value.gid
				Else
					Me._gSWOID = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("tblSWOPending")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tJob")>  _
Partial Public Class tJob
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _nID As Integer
	
	Private _nAddressID As Integer
	
	Private _sJobDesc As String
	
	Private _dCreated As Date
	
	Private _dJobCreated As Date
	
	Private _sJobNo As String
	
	Private _nCustID As Integer
	
	Private _sPhone As String
	
	Private _sJobContact As String
	
	Private _sCounty As String
	
	Private _nTotalWholesale As Decimal
	
	Private _sBuildingPermit As String
	
	Private _sTerms As String
	
	Private _dDrawing As String
	
	Private _nMaterialsCharge As Decimal
	
	Private _nTaxRate As Decimal
	
	Private _nLaborCharge As Decimal
	
	Private _sContractSigned As String
	
	Private _sDisclaimerSigned As String
	
	Private _sDrawingsSigned As String
	
	Private _sComplete As String
	
	Private _sSalesperson As String
	
	Private _sOtherNotes As String
	
	Private _dCommPaid As System.Nullable(Of Date)
	
	Private _sCommLocked As String
	
	Private _dCrLimit As Decimal
	
	Private _dAmtYTD As Decimal
	
	Private _sInvNotes As String
	
	Private _lngCommissionStruct As Integer
	
	Private _blnSplitCommission As Boolean
	
	Private _sSalesperson2 As String
	
	Private _sEmail As String
	
	Private _tPOHeaders As EntitySet(Of tPOHeader)
	
	Private _tSOHeaders As EntitySet(Of tSOHeader)
	
	Private _tblJobTaxes As EntitySet(Of tblJobTax)
	
	Private _tPayments As EntitySet(Of tPayment)
	
	Private _tblSWOPendings As EntitySet(Of tblSWOPending)
	
	Private _tAddress As EntityRef(Of tAddress)
	
	Private _tCustomr As EntityRef(Of tCustomr)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnnIDChanged()
    End Sub
    Partial Private Sub OnnAddressIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnnAddressIDChanged()
    End Sub
    Partial Private Sub OnsJobDescChanging(value As String)
    End Sub
    Partial Private Sub OnsJobDescChanged()
    End Sub
    Partial Private Sub OndCreatedChanging(value As Date)
    End Sub
    Partial Private Sub OndCreatedChanged()
    End Sub
    Partial Private Sub OndJobCreatedChanging(value As Date)
    End Sub
    Partial Private Sub OndJobCreatedChanged()
    End Sub
    Partial Private Sub OnsJobNoChanging(value As String)
    End Sub
    Partial Private Sub OnsJobNoChanged()
    End Sub
    Partial Private Sub OnnCustIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnnCustIDChanged()
    End Sub
    Partial Private Sub OnsPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnsPhoneChanged()
    End Sub
    Partial Private Sub OnsJobContactChanging(value As String)
    End Sub
    Partial Private Sub OnsJobContactChanged()
    End Sub
    Partial Private Sub OnsCountyChanging(value As String)
    End Sub
    Partial Private Sub OnsCountyChanged()
    End Sub
    Partial Private Sub OnnTotalWholesaleChanging(value As Decimal)
    End Sub
    Partial Private Sub OnnTotalWholesaleChanged()
    End Sub
    Partial Private Sub OnsBuildingPermitChanging(value As String)
    End Sub
    Partial Private Sub OnsBuildingPermitChanged()
    End Sub
    Partial Private Sub OnsTermsChanging(value As String)
    End Sub
    Partial Private Sub OnsTermsChanged()
    End Sub
    Partial Private Sub OndDrawingChanging(value As String)
    End Sub
    Partial Private Sub OndDrawingChanged()
    End Sub
    Partial Private Sub OnnMaterialsChargeChanging(value As Decimal)
    End Sub
    Partial Private Sub OnnMaterialsChargeChanged()
    End Sub
    Partial Private Sub OnnTaxRateChanging(value As Decimal)
    End Sub
    Partial Private Sub OnnTaxRateChanged()
    End Sub
    Partial Private Sub OnnLaborChargeChanging(value As Decimal)
    End Sub
    Partial Private Sub OnnLaborChargeChanged()
    End Sub
    Partial Private Sub OnsContractSignedChanging(value As String)
    End Sub
    Partial Private Sub OnsContractSignedChanged()
    End Sub
    Partial Private Sub OnsDisclaimerSignedChanging(value As String)
    End Sub
    Partial Private Sub OnsDisclaimerSignedChanged()
    End Sub
    Partial Private Sub OnsDrawingsSignedChanging(value As String)
    End Sub
    Partial Private Sub OnsDrawingsSignedChanged()
    End Sub
    Partial Private Sub OnsCompleteChanging(value As String)
    End Sub
    Partial Private Sub OnsCompleteChanged()
    End Sub
    Partial Private Sub OnsSalespersonChanging(value As String)
    End Sub
    Partial Private Sub OnsSalespersonChanged()
    End Sub
    Partial Private Sub OnsOtherNotesChanging(value As String)
    End Sub
    Partial Private Sub OnsOtherNotesChanged()
    End Sub
    Partial Private Sub OndCommPaidChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndCommPaidChanged()
    End Sub
    Partial Private Sub OnsCommLockedChanging(value As String)
    End Sub
    Partial Private Sub OnsCommLockedChanged()
    End Sub
    Partial Private Sub OndCrLimitChanging(value As Decimal)
    End Sub
    Partial Private Sub OndCrLimitChanged()
    End Sub
    Partial Private Sub OndAmtYTDChanging(value As Decimal)
    End Sub
    Partial Private Sub OndAmtYTDChanged()
    End Sub
    Partial Private Sub OnsInvNotesChanging(value As String)
    End Sub
    Partial Private Sub OnsInvNotesChanged()
    End Sub
    Partial Private Sub OnlngCommissionStructChanging(value As Integer)
    End Sub
    Partial Private Sub OnlngCommissionStructChanged()
    End Sub
    Partial Private Sub OnblnSplitCommissionChanging(value As Boolean)
    End Sub
    Partial Private Sub OnblnSplitCommissionChanged()
    End Sub
    Partial Private Sub OnsSalesperson2Changing(value As String)
    End Sub
    Partial Private Sub OnsSalesperson2Changed()
    End Sub
    Partial Private Sub OnsEmailChanging(value As String)
    End Sub
    Partial Private Sub OnsEmailChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tPOHeaders = New EntitySet(Of tPOHeader)(AddressOf Me.attach_tPOHeaders, AddressOf Me.detach_tPOHeaders)
		Me._tSOHeaders = New EntitySet(Of tSOHeader)(AddressOf Me.attach_tSOHeaders, AddressOf Me.detach_tSOHeaders)
		Me._tblJobTaxes = New EntitySet(Of tblJobTax)(AddressOf Me.attach_tblJobTaxes, AddressOf Me.detach_tblJobTaxes)
		Me._tPayments = New EntitySet(Of tPayment)(AddressOf Me.attach_tPayments, AddressOf Me.detach_tPayments)
		Me._tblSWOPendings = New EntitySet(Of tblSWOPending)(AddressOf Me.attach_tblSWOPendings, AddressOf Me.detach_tblSWOPendings)
		Me._tAddress = CType(Nothing, EntityRef(Of tAddress))
		Me._tCustomr = CType(Nothing, EntityRef(Of tCustomr))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property nID() As Integer
		Get
			Return Me._nID
		End Get
		Set
			If ((Me._nID = value)  _
						= false) Then
				Me.OnnIDChanging(value)
				Me.SendPropertyChanging
				Me._nID = value
				Me.SendPropertyChanged("nID")
				Me.OnnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nAddressID", DbType:="Int NOT NULL")>  _
	Public Property nAddressID() As Integer
		Get
			Return Me._nAddressID
		End Get
		Set
			If ((Me._nAddressID = value)  _
						= false) Then
				If Me._tAddress.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnnAddressIDChanging(value)
				Me.SendPropertyChanging
				Me._nAddressID = value
				Me.SendPropertyChanged("nAddressID")
				Me.OnnAddressIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sJobDesc", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property sJobDesc() As String
		Get
			Return Me._sJobDesc
		End Get
		Set
			If (String.Equals(Me._sJobDesc, value) = false) Then
				Me.OnsJobDescChanging(value)
				Me.SendPropertyChanging
				Me._sJobDesc = value
				Me.SendPropertyChanged("sJobDesc")
				Me.OnsJobDescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dCreated", DbType:="SmallDateTime NOT NULL")>  _
	Public Property dCreated() As Date
		Get
			Return Me._dCreated
		End Get
		Set
			If ((Me._dCreated = value)  _
						= false) Then
				Me.OndCreatedChanging(value)
				Me.SendPropertyChanging
				Me._dCreated = value
				Me.SendPropertyChanged("dCreated")
				Me.OndCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dJobCreated", DbType:="SmallDateTime NOT NULL")>  _
	Public Property dJobCreated() As Date
		Get
			Return Me._dJobCreated
		End Get
		Set
			If ((Me._dJobCreated = value)  _
						= false) Then
				Me.OndJobCreatedChanging(value)
				Me.SendPropertyChanging
				Me._dJobCreated = value
				Me.SendPropertyChanged("dJobCreated")
				Me.OndJobCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sJobNo", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property sJobNo() As String
		Get
			Return Me._sJobNo
		End Get
		Set
			If (String.Equals(Me._sJobNo, value) = false) Then
				Me.OnsJobNoChanging(value)
				Me.SendPropertyChanging
				Me._sJobNo = value
				Me.SendPropertyChanged("sJobNo")
				Me.OnsJobNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nCustID", DbType:="Int NOT NULL")>  _
	Public Property nCustID() As Integer
		Get
			Return Me._nCustID
		End Get
		Set
			If ((Me._nCustID = value)  _
						= false) Then
				If Me._tCustomr.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnnCustIDChanging(value)
				Me.SendPropertyChanging
				Me._nCustID = value
				Me.SendPropertyChanged("nCustID")
				Me.OnnCustIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sPhone", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property sPhone() As String
		Get
			Return Me._sPhone
		End Get
		Set
			If (String.Equals(Me._sPhone, value) = false) Then
				Me.OnsPhoneChanging(value)
				Me.SendPropertyChanging
				Me._sPhone = value
				Me.SendPropertyChanged("sPhone")
				Me.OnsPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sJobContact", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property sJobContact() As String
		Get
			Return Me._sJobContact
		End Get
		Set
			If (String.Equals(Me._sJobContact, value) = false) Then
				Me.OnsJobContactChanging(value)
				Me.SendPropertyChanging
				Me._sJobContact = value
				Me.SendPropertyChanged("sJobContact")
				Me.OnsJobContactChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sCounty", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property sCounty() As String
		Get
			Return Me._sCounty
		End Get
		Set
			If (String.Equals(Me._sCounty, value) = false) Then
				Me.OnsCountyChanging(value)
				Me.SendPropertyChanging
				Me._sCounty = value
				Me.SendPropertyChanged("sCounty")
				Me.OnsCountyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nTotalWholesale", DbType:="Money NOT NULL")>  _
	Public Property nTotalWholesale() As Decimal
		Get
			Return Me._nTotalWholesale
		End Get
		Set
			If ((Me._nTotalWholesale = value)  _
						= false) Then
				Me.OnnTotalWholesaleChanging(value)
				Me.SendPropertyChanging
				Me._nTotalWholesale = value
				Me.SendPropertyChanged("nTotalWholesale")
				Me.OnnTotalWholesaleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sBuildingPermit", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property sBuildingPermit() As String
		Get
			Return Me._sBuildingPermit
		End Get
		Set
			If (String.Equals(Me._sBuildingPermit, value) = false) Then
				Me.OnsBuildingPermitChanging(value)
				Me.SendPropertyChanging
				Me._sBuildingPermit = value
				Me.SendPropertyChanged("sBuildingPermit")
				Me.OnsBuildingPermitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sTerms", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property sTerms() As String
		Get
			Return Me._sTerms
		End Get
		Set
			If (String.Equals(Me._sTerms, value) = false) Then
				Me.OnsTermsChanging(value)
				Me.SendPropertyChanging
				Me._sTerms = value
				Me.SendPropertyChanged("sTerms")
				Me.OnsTermsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dDrawing", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property dDrawing() As String
		Get
			Return Me._dDrawing
		End Get
		Set
			If (String.Equals(Me._dDrawing, value) = false) Then
				Me.OndDrawingChanging(value)
				Me.SendPropertyChanging
				Me._dDrawing = value
				Me.SendPropertyChanged("dDrawing")
				Me.OndDrawingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nMaterialsCharge", DbType:="Money NOT NULL")>  _
	Public Property nMaterialsCharge() As Decimal
		Get
			Return Me._nMaterialsCharge
		End Get
		Set
			If ((Me._nMaterialsCharge = value)  _
						= false) Then
				Me.OnnMaterialsChargeChanging(value)
				Me.SendPropertyChanging
				Me._nMaterialsCharge = value
				Me.SendPropertyChanged("nMaterialsCharge")
				Me.OnnMaterialsChargeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nTaxRate", DbType:="Money NOT NULL")>  _
	Public Property nTaxRate() As Decimal
		Get
			Return Me._nTaxRate
		End Get
		Set
			If ((Me._nTaxRate = value)  _
						= false) Then
				Me.OnnTaxRateChanging(value)
				Me.SendPropertyChanging
				Me._nTaxRate = value
				Me.SendPropertyChanged("nTaxRate")
				Me.OnnTaxRateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nLaborCharge", DbType:="Money NOT NULL")>  _
	Public Property nLaborCharge() As Decimal
		Get
			Return Me._nLaborCharge
		End Get
		Set
			If ((Me._nLaborCharge = value)  _
						= false) Then
				Me.OnnLaborChargeChanging(value)
				Me.SendPropertyChanging
				Me._nLaborCharge = value
				Me.SendPropertyChanged("nLaborCharge")
				Me.OnnLaborChargeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sContractSigned", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property sContractSigned() As String
		Get
			Return Me._sContractSigned
		End Get
		Set
			If (String.Equals(Me._sContractSigned, value) = false) Then
				Me.OnsContractSignedChanging(value)
				Me.SendPropertyChanging
				Me._sContractSigned = value
				Me.SendPropertyChanged("sContractSigned")
				Me.OnsContractSignedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sDisclaimerSigned", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sDisclaimerSigned() As String
		Get
			Return Me._sDisclaimerSigned
		End Get
		Set
			If (String.Equals(Me._sDisclaimerSigned, value) = false) Then
				Me.OnsDisclaimerSignedChanging(value)
				Me.SendPropertyChanging
				Me._sDisclaimerSigned = value
				Me.SendPropertyChanged("sDisclaimerSigned")
				Me.OnsDisclaimerSignedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sDrawingsSigned", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property sDrawingsSigned() As String
		Get
			Return Me._sDrawingsSigned
		End Get
		Set
			If (String.Equals(Me._sDrawingsSigned, value) = false) Then
				Me.OnsDrawingsSignedChanging(value)
				Me.SendPropertyChanging
				Me._sDrawingsSigned = value
				Me.SendPropertyChanged("sDrawingsSigned")
				Me.OnsDrawingsSignedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sComplete", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property sComplete() As String
		Get
			Return Me._sComplete
		End Get
		Set
			If (String.Equals(Me._sComplete, value) = false) Then
				Me.OnsCompleteChanging(value)
				Me.SendPropertyChanging
				Me._sComplete = value
				Me.SendPropertyChanged("sComplete")
				Me.OnsCompleteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sSalesperson", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sSalesperson() As String
		Get
			Return Me._sSalesperson
		End Get
		Set
			If (String.Equals(Me._sSalesperson, value) = false) Then
				Me.OnsSalespersonChanging(value)
				Me.SendPropertyChanging
				Me._sSalesperson = value
				Me.SendPropertyChanged("sSalesperson")
				Me.OnsSalespersonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sOtherNotes", DbType:="VarChar(3000) NOT NULL", CanBeNull:=false)>  _
	Public Property sOtherNotes() As String
		Get
			Return Me._sOtherNotes
		End Get
		Set
			If (String.Equals(Me._sOtherNotes, value) = false) Then
				Me.OnsOtherNotesChanging(value)
				Me.SendPropertyChanging
				Me._sOtherNotes = value
				Me.SendPropertyChanged("sOtherNotes")
				Me.OnsOtherNotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dCommPaid", DbType:="SmallDateTime")>  _
	Public Property dCommPaid() As System.Nullable(Of Date)
		Get
			Return Me._dCommPaid
		End Get
		Set
			If (Me._dCommPaid.Equals(value) = false) Then
				Me.OndCommPaidChanging(value)
				Me.SendPropertyChanging
				Me._dCommPaid = value
				Me.SendPropertyChanged("dCommPaid")
				Me.OndCommPaidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sCommLocked", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sCommLocked() As String
		Get
			Return Me._sCommLocked
		End Get
		Set
			If (String.Equals(Me._sCommLocked, value) = false) Then
				Me.OnsCommLockedChanging(value)
				Me.SendPropertyChanging
				Me._sCommLocked = value
				Me.SendPropertyChanged("sCommLocked")
				Me.OnsCommLockedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dCrLimit", DbType:="Money NOT NULL")>  _
	Public Property dCrLimit() As Decimal
		Get
			Return Me._dCrLimit
		End Get
		Set
			If ((Me._dCrLimit = value)  _
						= false) Then
				Me.OndCrLimitChanging(value)
				Me.SendPropertyChanging
				Me._dCrLimit = value
				Me.SendPropertyChanged("dCrLimit")
				Me.OndCrLimitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dAmtYTD", DbType:="Money NOT NULL")>  _
	Public Property dAmtYTD() As Decimal
		Get
			Return Me._dAmtYTD
		End Get
		Set
			If ((Me._dAmtYTD = value)  _
						= false) Then
				Me.OndAmtYTDChanging(value)
				Me.SendPropertyChanging
				Me._dAmtYTD = value
				Me.SendPropertyChanged("dAmtYTD")
				Me.OndAmtYTDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sInvNotes", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property sInvNotes() As String
		Get
			Return Me._sInvNotes
		End Get
		Set
			If (String.Equals(Me._sInvNotes, value) = false) Then
				Me.OnsInvNotesChanging(value)
				Me.SendPropertyChanging
				Me._sInvNotes = value
				Me.SendPropertyChanged("sInvNotes")
				Me.OnsInvNotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lngCommissionStruct", DbType:="Int NOT NULL")>  _
	Public Property lngCommissionStruct() As Integer
		Get
			Return Me._lngCommissionStruct
		End Get
		Set
			If ((Me._lngCommissionStruct = value)  _
						= false) Then
				Me.OnlngCommissionStructChanging(value)
				Me.SendPropertyChanging
				Me._lngCommissionStruct = value
				Me.SendPropertyChanged("lngCommissionStruct")
				Me.OnlngCommissionStructChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_blnSplitCommission", DbType:="Bit NOT NULL")>  _
	Public Property blnSplitCommission() As Boolean
		Get
			Return Me._blnSplitCommission
		End Get
		Set
			If ((Me._blnSplitCommission = value)  _
						= false) Then
				Me.OnblnSplitCommissionChanging(value)
				Me.SendPropertyChanging
				Me._blnSplitCommission = value
				Me.SendPropertyChanged("blnSplitCommission")
				Me.OnblnSplitCommissionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sSalesperson2", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sSalesperson2() As String
		Get
			Return Me._sSalesperson2
		End Get
		Set
			If (String.Equals(Me._sSalesperson2, value) = false) Then
				Me.OnsSalesperson2Changing(value)
				Me.SendPropertyChanging
				Me._sSalesperson2 = value
				Me.SendPropertyChanged("sSalesperson2")
				Me.OnsSalesperson2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sEmail", DbType:="VarChar(90) NOT NULL", CanBeNull:=false)>  _
	Public Property sEmail() As String
		Get
			Return Me._sEmail
		End Get
		Set
			If (String.Equals(Me._sEmail, value) = false) Then
				Me.OnsEmailChanging(value)
				Me.SendPropertyChanging
				Me._sEmail = value
				Me.SendPropertyChanged("sEmail")
				Me.OnsEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tJob_tPOHeader", Storage:="_tPOHeaders", ThisKey:="nID", OtherKey:="nJobID")>  _
	Public Property tPOHeaders() As EntitySet(Of tPOHeader)
		Get
			Return Me._tPOHeaders
		End Get
		Set
			Me._tPOHeaders.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tJob_tSOHeader", Storage:="_tSOHeaders", ThisKey:="nID", OtherKey:="nJobID")>  _
	Public Property tSOHeaders() As EntitySet(Of tSOHeader)
		Get
			Return Me._tSOHeaders
		End Get
		Set
			Me._tSOHeaders.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tJob_tblJobTax", Storage:="_tblJobTaxes", ThisKey:="nID", OtherKey:="nJobID")>  _
	Public Property tblJobTaxes() As EntitySet(Of tblJobTax)
		Get
			Return Me._tblJobTaxes
		End Get
		Set
			Me._tblJobTaxes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tJob_tPayment", Storage:="_tPayments", ThisKey:="nID", OtherKey:="JOBID")>  _
	Public Property tPayments() As EntitySet(Of tPayment)
		Get
			Return Me._tPayments
		End Get
		Set
			Me._tPayments.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tJob_tblSWOPending", Storage:="_tblSWOPendings", ThisKey:="nID", OtherKey:="JOBID")>  _
	Public Property tblSWOPendings() As EntitySet(Of tblSWOPending)
		Get
			Return Me._tblSWOPendings
		End Get
		Set
			Me._tblSWOPendings.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tAddress_tJob", Storage:="_tAddress", ThisKey:="nAddressID", OtherKey:="nID", IsForeignKey:=true)>  _
	Public Property tAddress() As tAddress
		Get
			Return Me._tAddress.Entity
		End Get
		Set
			Dim previousValue As tAddress = Me._tAddress.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tAddress.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tAddress.Entity = Nothing
					previousValue.tJobs.Remove(Me)
				End If
				Me._tAddress.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tJobs.Add(Me)
					Me._nAddressID = value.nID
				Else
					Me._nAddressID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tAddress")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tCustomr_tJob", Storage:="_tCustomr", ThisKey:="nCustID", OtherKey:="lID", IsForeignKey:=true)>  _
	Public Property tCustomr() As tCustomr
		Get
			Return Me._tCustomr.Entity
		End Get
		Set
			Dim previousValue As tCustomr = Me._tCustomr.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tCustomr.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tCustomr.Entity = Nothing
					previousValue.tJobs.Remove(Me)
				End If
				Me._tCustomr.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tJobs.Add(Me)
					Me._nCustID = value.lID
				Else
					Me._nCustID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tCustomr")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tPOHeaders(ByVal entity As tPOHeader)
		Me.SendPropertyChanging
		entity.tJob = Me
	End Sub
	
	Private Sub detach_tPOHeaders(ByVal entity As tPOHeader)
		Me.SendPropertyChanging
		entity.tJob = Nothing
	End Sub
	
	Private Sub attach_tSOHeaders(ByVal entity As tSOHeader)
		Me.SendPropertyChanging
		entity.tJob = Me
	End Sub
	
	Private Sub detach_tSOHeaders(ByVal entity As tSOHeader)
		Me.SendPropertyChanging
		entity.tJob = Nothing
	End Sub
	
	Private Sub attach_tblJobTaxes(ByVal entity As tblJobTax)
		Me.SendPropertyChanging
		entity.tJob = Me
	End Sub
	
	Private Sub detach_tblJobTaxes(ByVal entity As tblJobTax)
		Me.SendPropertyChanging
		entity.tJob = Nothing
	End Sub
	
	Private Sub attach_tPayments(ByVal entity As tPayment)
		Me.SendPropertyChanging
		entity.tJob = Me
	End Sub
	
	Private Sub detach_tPayments(ByVal entity As tPayment)
		Me.SendPropertyChanging
		entity.tJob = Nothing
	End Sub
	
	Private Sub attach_tblSWOPendings(ByVal entity As tblSWOPending)
		Me.SendPropertyChanging
		entity.tJob = Me
	End Sub
	
	Private Sub detach_tblSWOPendings(ByVal entity As tblSWOPending)
		Me.SendPropertyChanging
		entity.tJob = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblCustomerExtended")>  _
Partial Public Class tblCustomerExtended
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _lID As Integer
	
	Private _InvoiceNotes As String
	
	Private _tCustomr As EntityRef(Of tCustomr)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnlIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnlIDChanged()
    End Sub
    Partial Private Sub OnInvoiceNotesChanging(value As String)
    End Sub
    Partial Private Sub OnInvoiceNotesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tCustomr = CType(Nothing, EntityRef(Of tCustomr))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property lID() As Integer
		Get
			Return Me._lID
		End Get
		Set
			If ((Me._lID = value)  _
						= false) Then
				If Me._tCustomr.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnlIDChanging(value)
				Me.SendPropertyChanging
				Me._lID = value
				Me.SendPropertyChanged("lID")
				Me.OnlIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceNotes", DbType:="VarChar(3000) NOT NULL", CanBeNull:=false)>  _
	Public Property InvoiceNotes() As String
		Get
			Return Me._InvoiceNotes
		End Get
		Set
			If (String.Equals(Me._InvoiceNotes, value) = false) Then
				Me.OnInvoiceNotesChanging(value)
				Me.SendPropertyChanging
				Me._InvoiceNotes = value
				Me.SendPropertyChanged("InvoiceNotes")
				Me.OnInvoiceNotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tCustomr_tblCustomerExtended", Storage:="_tCustomr", ThisKey:="lID", OtherKey:="lID", IsForeignKey:=true)>  _
	Public Property tCustomr() As tCustomr
		Get
			Return Me._tCustomr.Entity
		End Get
		Set
			Dim previousValue As tCustomr = Me._tCustomr.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tCustomr.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tCustomr.Entity = Nothing
					previousValue.tblCustomerExtendeds = Nothing
				End If
				Me._tCustomr.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblCustomerExtendeds = Me
					Me._lID = value.lID
				Else
					Me._lID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tCustomr")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblLocationLabelJOIN")>  _
Partial Public Class tblLocationLabelJOIN
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _LocationNumber As Decimal
	
	Private _TrailerlLabelID As String
	
	Private _PO As String
	
	Private _DateEntered As Date
	
	Private _Notes As String
	
	Private _tblLocationBin As EntityRef(Of tblLocationBin)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnLocationNumberChanging(value As Decimal)
    End Sub
    Partial Private Sub OnLocationNumberChanged()
    End Sub
    Partial Private Sub OnTrailerlLabelIDChanging(value As String)
    End Sub
    Partial Private Sub OnTrailerlLabelIDChanged()
    End Sub
    Partial Private Sub OnPOChanging(value As String)
    End Sub
    Partial Private Sub OnPOChanged()
    End Sub
    Partial Private Sub OnDateEnteredChanging(value As Date)
    End Sub
    Partial Private Sub OnDateEnteredChanged()
    End Sub
    Partial Private Sub OnNotesChanging(value As String)
    End Sub
    Partial Private Sub OnNotesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblLocationBin = CType(Nothing, EntityRef(Of tblLocationBin))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationNumber", DbType:="Decimal(18,0) NOT NULL", IsPrimaryKey:=true)>  _
	Public Property LocationNumber() As Decimal
		Get
			Return Me._LocationNumber
		End Get
		Set
			If ((Me._LocationNumber = value)  _
						= false) Then
				If Me._tblLocationBin.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnLocationNumberChanging(value)
				Me.SendPropertyChanging
				Me._LocationNumber = value
				Me.SendPropertyChanged("LocationNumber")
				Me.OnLocationNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TrailerlLabelID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property TrailerlLabelID() As String
		Get
			Return Me._TrailerlLabelID
		End Get
		Set
			If (String.Equals(Me._TrailerlLabelID, value) = false) Then
				Me.OnTrailerlLabelIDChanging(value)
				Me.SendPropertyChanging
				Me._TrailerlLabelID = value
				Me.SendPropertyChanged("TrailerlLabelID")
				Me.OnTrailerlLabelIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PO", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property PO() As String
		Get
			Return Me._PO
		End Get
		Set
			If (String.Equals(Me._PO, value) = false) Then
				Me.OnPOChanging(value)
				Me.SendPropertyChanging
				Me._PO = value
				Me.SendPropertyChanged("PO")
				Me.OnPOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateEntered", DbType:="DateTime NOT NULL")>  _
	Public Property DateEntered() As Date
		Get
			Return Me._DateEntered
		End Get
		Set
			If ((Me._DateEntered = value)  _
						= false) Then
				Me.OnDateEnteredChanging(value)
				Me.SendPropertyChanging
				Me._DateEntered = value
				Me.SendPropertyChanged("DateEntered")
				Me.OnDateEnteredChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notes", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Notes() As String
		Get
			Return Me._Notes
		End Get
		Set
			If (String.Equals(Me._Notes, value) = false) Then
				Me.OnNotesChanging(value)
				Me.SendPropertyChanging
				Me._Notes = value
				Me.SendPropertyChanged("Notes")
				Me.OnNotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblLocationBin_tblLocationLabelJOIN", Storage:="_tblLocationBin", ThisKey:="LocationNumber", OtherKey:="LocationNumber", IsForeignKey:=true)>  _
	Public Property tblLocationBin() As tblLocationBin
		Get
			Return Me._tblLocationBin.Entity
		End Get
		Set
			Dim previousValue As tblLocationBin = Me._tblLocationBin.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblLocationBin.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblLocationBin.Entity = Nothing
					previousValue.tblLocationLabelJOINs.Remove(Me)
				End If
				Me._tblLocationBin.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblLocationLabelJOINs.Add(Me)
					Me._LocationNumber = value.LocationNumber
				Else
					Me._LocationNumber = CType(Nothing, Decimal)
				End If
				Me.SendPropertyChanged("tblLocationBin")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblLocationBins")>  _
Partial Public Class tblLocationBin
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _LocationNumber As Decimal
	
	Private _LocationPrefix As String
	
	Private _LabelID As String
	
	Private _DateModified As Date
	
	Private _Description As String
	
	Private _tblLocationLabelJOINs As EntitySet(Of tblLocationLabelJOIN)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnLocationNumberChanging(value As Decimal)
    End Sub
    Partial Private Sub OnLocationNumberChanged()
    End Sub
    Partial Private Sub OnLocationPrefixChanging(value As String)
    End Sub
    Partial Private Sub OnLocationPrefixChanged()
    End Sub
    Partial Private Sub OnLabelIDChanging(value As String)
    End Sub
    Partial Private Sub OnLabelIDChanged()
    End Sub
    Partial Private Sub OnDateModifiedChanging(value As Date)
    End Sub
    Partial Private Sub OnDateModifiedChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblLocationLabelJOINs = New EntitySet(Of tblLocationLabelJOIN)(AddressOf Me.attach_tblLocationLabelJOINs, AddressOf Me.detach_tblLocationLabelJOINs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationNumber", DbType:="Decimal(18,0) NOT NULL", IsPrimaryKey:=true)>  _
	Public Property LocationNumber() As Decimal
		Get
			Return Me._LocationNumber
		End Get
		Set
			If ((Me._LocationNumber = value)  _
						= false) Then
				Me.OnLocationNumberChanging(value)
				Me.SendPropertyChanging
				Me._LocationNumber = value
				Me.SendPropertyChanged("LocationNumber")
				Me.OnLocationNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationPrefix", DbType:="VarChar(4) NOT NULL", CanBeNull:=false)>  _
	Public Property LocationPrefix() As String
		Get
			Return Me._LocationPrefix
		End Get
		Set
			If (String.Equals(Me._LocationPrefix, value) = false) Then
				Me.OnLocationPrefixChanging(value)
				Me.SendPropertyChanging
				Me._LocationPrefix = value
				Me.SendPropertyChanged("LocationPrefix")
				Me.OnLocationPrefixChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LabelID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property LabelID() As String
		Get
			Return Me._LabelID
		End Get
		Set
			If (String.Equals(Me._LabelID, value) = false) Then
				Me.OnLabelIDChanging(value)
				Me.SendPropertyChanging
				Me._LabelID = value
				Me.SendPropertyChanged("LabelID")
				Me.OnLabelIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateModified", DbType:="DateTime NOT NULL")>  _
	Public Property DateModified() As Date
		Get
			Return Me._DateModified
		End Get
		Set
			If ((Me._DateModified = value)  _
						= false) Then
				Me.OnDateModifiedChanging(value)
				Me.SendPropertyChanging
				Me._DateModified = value
				Me.SendPropertyChanged("DateModified")
				Me.OnDateModifiedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblLocationBin_tblLocationLabelJOIN", Storage:="_tblLocationLabelJOINs", ThisKey:="LocationNumber", OtherKey:="LocationNumber")>  _
	Public Property tblLocationLabelJOINs() As EntitySet(Of tblLocationLabelJOIN)
		Get
			Return Me._tblLocationLabelJOINs
		End Get
		Set
			Me._tblLocationLabelJOINs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblLocationLabelJOINs(ByVal entity As tblLocationLabelJOIN)
		Me.SendPropertyChanging
		entity.tblLocationBin = Me
	End Sub
	
	Private Sub detach_tblLocationLabelJOINs(ByVal entity As tblLocationLabelJOIN)
		Me.SendPropertyChanging
		entity.tblLocationBin = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblTaxDistrict")>  _
Partial Public Class tblTaxDistrict
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _TaxRate As Single
	
	Private _RateName As String
	
	Private _AccountingCode As Integer
	
	Private _Note As String
	
	Private _tblJobTaxes As EntitySet(Of tblJobTax)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTaxRateChanging(value As Single)
    End Sub
    Partial Private Sub OnTaxRateChanged()
    End Sub
    Partial Private Sub OnRateNameChanging(value As String)
    End Sub
    Partial Private Sub OnRateNameChanged()
    End Sub
    Partial Private Sub OnAccountingCodeChanging(value As Integer)
    End Sub
    Partial Private Sub OnAccountingCodeChanged()
    End Sub
    Partial Private Sub OnNoteChanging(value As String)
    End Sub
    Partial Private Sub OnNoteChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblJobTaxes = New EntitySet(Of tblJobTax)(AddressOf Me.attach_tblJobTaxes, AddressOf Me.detach_tblJobTaxes)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TaxRate", DbType:="Real NOT NULL")>  _
	Public Property TaxRate() As Single
		Get
			Return Me._TaxRate
		End Get
		Set
			If ((Me._TaxRate = value)  _
						= false) Then
				Me.OnTaxRateChanging(value)
				Me.SendPropertyChanging
				Me._TaxRate = value
				Me.SendPropertyChanged("TaxRate")
				Me.OnTaxRateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RateName", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property RateName() As String
		Get
			Return Me._RateName
		End Get
		Set
			If (String.Equals(Me._RateName, value) = false) Then
				Me.OnRateNameChanging(value)
				Me.SendPropertyChanging
				Me._RateName = value
				Me.SendPropertyChanged("RateName")
				Me.OnRateNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountingCode", DbType:="Int NOT NULL")>  _
	Public Property AccountingCode() As Integer
		Get
			Return Me._AccountingCode
		End Get
		Set
			If ((Me._AccountingCode = value)  _
						= false) Then
				Me.OnAccountingCodeChanging(value)
				Me.SendPropertyChanging
				Me._AccountingCode = value
				Me.SendPropertyChanged("AccountingCode")
				Me.OnAccountingCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Note", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property Note() As String
		Get
			Return Me._Note
		End Get
		Set
			If (String.Equals(Me._Note, value) = false) Then
				Me.OnNoteChanging(value)
				Me.SendPropertyChanging
				Me._Note = value
				Me.SendPropertyChanged("Note")
				Me.OnNoteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblTaxDistrict_tblJobTax", Storage:="_tblJobTaxes", ThisKey:="RateName", OtherKey:="TaxName")>  _
	Public Property tblJobTaxes() As EntitySet(Of tblJobTax)
		Get
			Return Me._tblJobTaxes
		End Get
		Set
			Me._tblJobTaxes.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblJobTaxes(ByVal entity As tblJobTax)
		Me.SendPropertyChanging
		entity.tblTaxDistrict = Me
	End Sub
	
	Private Sub detach_tblJobTaxes(ByVal entity As tblJobTax)
		Me.SendPropertyChanging
		entity.tblTaxDistrict = Nothing
	End Sub
End Class
